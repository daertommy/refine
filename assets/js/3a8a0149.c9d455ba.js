"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[42706],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=o,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},24023:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});t(67294);var r=t(3905);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={id:"appwrite",title:"Appwrite",sidebar_label:"Appwrite"},d=void 0,l={unversionedId:"packages/documentation/data-providers/appwrite",id:"packages/documentation/data-providers/appwrite",title:"Appwrite",description:"Introduction",source:"@site/docs/packages/documentation/data-providers/appwrite.md",sourceDirName:"packages/documentation/data-providers",slug:"/packages/documentation/data-providers/appwrite",permalink:"/docs/packages/documentation/data-providers/appwrite",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/packages/documentation/data-providers/appwrite.md",tags:[],version:"current",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1694709258,formattedLastUpdatedAt:"Sep 14, 2023",frontMatter:{id:"appwrite",title:"Appwrite",sidebar_label:"Appwrite"},sidebar:"someSidebar",previous:{title:"CLI",permalink:"/docs/packages/documentation/cli"},next:{title:"GraphQL",permalink:"/docs/packages/documentation/data-providers/graphql"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating Appwrite Client",id:"creating-appwrite-client",level:3},{value:"Creating Auth Provider",id:"creating-auth-provider",level:3},{value:"Configure Refine Component",id:"configure-refine-component",level:3},{value:"Create Collections",id:"create-collections",level:2},{value:"Permissions",id:"permissions",level:3},{value:"Login page\u200b",id:"login-page",level:2},{value:"List Page",id:"list-page",level:2},{value:"Create Page",id:"create-page",level:2},{value:"Edit Page",id:"edit-page",level:2},{value:"Example",id:"example",level:2}],c=(m="CodeSandboxExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var m;const g={toc:u};function f(e){var{components:n}=e,t=i(e,["components"]);return(0,r.kt)("wrapper",a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){o(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { Appwrite } from "@refinedev/appwrite";\nconst APPWRITE_URL = "https://refine.appwrite.org/v1";\nconst APPWRITE_PROJECT = "61c4368b4e349";\nconst appwriteClient = new Appwrite();\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\nwindow.__refineAuthStatus = false;\n\nconst authProvider = {\n    login: () => {\n        window.__refineAuthStatus = true;\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    register: async () => {\n        return {\n            success: true,\n        };\n    },\n    forgotPassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    updatePassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    logout: async () => {\n        window.__refineAuthStatus = false;\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    check: async () => {\n        return {\n            authenticated: window.__refineAuthStatus ? true : false,\n            redirectTo: window.__refineAuthStatus ? undefined : "/login",\n        };\n    },\n    onError: async (error) => {\n        console.error(error);\n        return { error };\n    },\n    getPermissions: async () => null,\n    getIdentity: async () => null,\n};\n\nimport {\n    useMany as CoreUseMany,\n    useShow as RefineCoreUseShow,\n    useOne as RefineCoreUseOne,\n} from "@refinedev/core";\nimport {\n    List as RefineAntdList,\n    TextField as RefineAntdTextField,\n    useTable as RefineAntdUseTable,\n    EditButton as RefineAntdEditButton,\n    ShowButton as RefineAntdShowButton,\n    getDefaultSortOrder as RefineAntdGetDefaultSortOrder,\n    useForm as RefineAntdUseForm,\n    useSelect as RefineAntdUseSelect,\n    Create as RefineAntdCreate,\n    Show as RefineAntdShow,\n} from "@refinedev/antd";\nimport {\n    Table as AntdTable,\n    Space as AntdSpace,\n    Form as AntdForm,\n    Select as AntdSelect,\n    Input as AntdInput,\n    Typography as AntdTypography,\n} from "antd";\n\nconst PostList: React.FC = () => {\n    const { tableProps, sorter } = RefineAntdUseTable<IPost>({\n        sorters: {\n            initial: [\n                {\n                    field: "$id",\n                    order: "asc",\n                },\n            ],\n        },\n    });\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.categoryId) ?? [];\n    const { data, isLoading } = CoreUseMany<ICategory>({\n        resource: "61c43adc284ac",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    return (\n        <RefineAntdList>\n            <AntdTable {...tableProps} rowKey="id">\n                <AntdTable.Column\n                    dataIndex="id"\n                    title="ID"\n                    sorter\n                    defaultSortOrder={RefineAntdGetDefaultSortOrder(\n                        "id",\n                        sorter,\n                    )}\n                />\n                <AntdTable.Column dataIndex="title" title="Title" sorter />\n                <AntdTable.Column\n                    dataIndex="categoryId"\n                    title="Category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <RefineAntdTextField value="Loading..." />;\n                        }\n\n                        return (\n                            <RefineAntdTextField\n                                value={\n                                    data?.data.find((item) => item.id === value)\n                                        ?.title\n                                }\n                            />\n                        );\n                    }}\n                />\n                <AntdTable.Column<IPost>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <AntdSpace>\n                            <RefineAntdEditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <RefineAntdShowButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </AntdSpace>\n                    )}\n                />\n            </AntdTable>\n        </RefineAntdList>\n    );\n};\n\nconst PostCreate: React.FC = () => {\n    const { formProps, saveButtonProps } = RefineAntdUseForm<IPost>();\n\n    const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>(\n        {\n            resource: "61bc4afa9ee2c",\n            optionLabel: "title",\n            optionValue: "id",\n        },\n    );\n\n    return (\n        <RefineAntdCreate saveButtonProps={saveButtonProps}>\n            <AntdForm {...formProps} layout="vertical">\n                <AntdForm.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdInput />\n                </AntdForm.Item>\n                <AntdForm.Item\n                    label="Category"\n                    name="categoryId"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdSelect {...categorySelectProps} />\n                </AntdForm.Item>\n                <AntdForm.Item\n                    label="Content"\n                    name="content"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdInput.TextArea />\n                </AntdForm.Item>\n            </AntdForm>\n        </RefineAntdCreate>\n    );\n};\n\nconst PostEdit: React.FC = () => {\n    const { formProps, saveButtonProps, queryResult } =\n        RefineAntdUseForm<IPost>();\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = RefineAntdUseSelect<ICategory>(\n        {\n            defaultValue: postData?.categoryId,\n            resource: "61c43adc284ac",\n            optionLabel: "title",\n            optionValue: "id",\n        },\n    );\n\n    return (\n        <RefineAntdCreate saveButtonProps={saveButtonProps}>\n            <AntdForm {...formProps} layout="vertical">\n                <AntdForm.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdInput />\n                </AntdForm.Item>\n                <AntdForm.Item\n                    label="Category"\n                    name="categoryId"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdSelect {...categorySelectProps} />\n                </AntdForm.Item>\n                <AntdForm.Item\n                    label="Content"\n                    name="content"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <AntdInput.TextArea />\n                </AntdForm.Item>\n            </AntdForm>\n        </RefineAntdCreate>\n    );\n};\n\nconst PostShow: React.FC = () => {\n    const { queryResult } = RefineCoreUseShow<IPost>();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: categoryData, isLoading: categoryIsLoading } =\n        RefineCoreUseOne<ICategory>({\n            resource: "categories",\n            id: record?.category?.id || "",\n            queryOptions: {\n                enabled: !!record,\n            },\n        });\n\n    return (\n        <RefineAntdShow isLoading={isLoading}>\n            <AntdTypography.Title level={5}>Id</AntdTypography.Title>\n            <AntdTypography.Text>{record?.id}</AntdTypography.Text>\n\n            <AntdTypography.Title level={5}>\n                AntdTypography.Title\n            </AntdTypography.Title>\n            <AntdTypography.Text>{record?.title}</AntdTypography.Text>\n\n            <AntdTypography.Title level={5}>Category</AntdTypography.Title>\n            <AntdTypography.Text>\n                {categoryIsLoading ? "Loading..." : categoryData?.data.title}\n            </AntdTypography.Text>\n\n            <AntdTypography.Title level={5}>Content</AntdTypography.Title>\n            <AntdTypography.Text>{record?.content}</AntdTypography.Text>\n        </RefineAntdShow>\n    );\n};\n')),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," and ",(0,r.kt)("a",{parentName:"p",href:"https://appwrite.io/"},"Appwrite")," work in harmony, offering you quick development options. You can use your data (API, Database) very simply by using ",(0,r.kt)("strong",{parentName:"p"},"refine"),"'s Appwrite data provider."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://appwrite.io/"},"Appwrite")," version >= 1.0 is required")),(0,r.kt)("p",null,"You can only focus on your UI as we can handle your data quickly and simply."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This guide has been prepared assuming you know the basics of ",(0,r.kt)("strong",{parentName:"p"},"refine"),". If you haven't learned these basics yet, we recommend reading the ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/"},"Tutorial"),".")),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @refinedev/appwrite\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"To make this example more visual, we used the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/refine-antd"},(0,r.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. If you are using Refine headless, you need to provide the components, hooks or helpers imported from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/refine-antd"},(0,r.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package.")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"It is very simple to use and consists of two steps. First, define your Appwrite project id and then give it to the dataprovider."),(0,r.kt)("h3",{id:"creating-appwrite-client"},"Creating Appwrite Client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="appwriteClient.ts"',title:'"appwriteClient.ts"'},'import { Appwrite, Account, Storage } from "@refinedev/appwrite";\n\nconst APPWRITE_URL = "http://YOUR_COOL_APPWRITE_API/v1";\n//highlight-start\nconst APPWRITE_PROJECT = "YOUR_APPWRITE_PROJECT_ID";\n//highlight-end\n\nconst appwriteClient = new Appwrite();\n\nappwriteClient.setEndpoint(APPWRITE_URL).setProject(APPWRITE_PROJECT);\n\n// for authentication\nconst account = new Account(appwriteClient);\n// for file upload\nconst storage = new Storage(appwriteClient);\n\nexport { appwriteClient, account, storage };\n')),(0,r.kt)("h3",{id:"creating-auth-provider"},"Creating Auth Provider"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="authProvider.ts"',title:'"authProvider.ts"'},'import { AuthBindings } from "@refinedev/core";\n\nimport { account } from "./appwriteClient";\n\nconst authProvider: AuthBindings = {\n    login: async ({ email, password }) => {\n        try {\n            await account.createEmailSession(email, password);\n            return {\n                success: true,\n                redirectTo: "/",\n            };\n        } catch (e) {\n            const { type, message, code } = e as AppwriteException;\n            return {\n                success: false,\n                error: {\n                    message,\n                    name: `${code} - ${type}`,\n                },\n            };\n        }\n    },\n    logout: async () => {\n        try {\n            await account.deleteSession("current");\n        } catch (error: any) {\n            return {\n                success: false,\n                error,\n            };\n        }\n\n        return {\n            success: true,\n            redirectTo: "/login",\n        };\n    },\n    onError: async (error) => {\n        console.error(error);\n        return { error };\n    },\n    check: async () => {\n        try {\n            const session = await account.get();\n\n            if (session) {\n                return {\n                    authenticated: true,\n                };\n            }\n        } catch (error: any) {\n            return {\n                authenticated: false,\n                error: error,\n                logout: true,\n                redirectTo: "/login",\n            };\n        }\n\n        return {\n            authenticated: false,\n            error: {\n                message: "Check failed",\n                name: "Session not found",\n            },\n            logout: true,\n            redirectTo: "/login",\n        };\n    },\n    getPermissions: async () => null,\n    getIdentity: async () => {\n        const user = await account.get();\n\n        if (user) {\n            return user;\n        }\n\n        return null;\n    },\n};\n')),(0,r.kt)("h3",{id:"configure-refine-component"},"Configure Refine Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine, AuthBindings } from "@refinedev/core";\nimport {\n    Layout,\n    ReadyPage,\n    notificationProvider,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\n\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\n\n//highlight-start\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\n//highlight-end\n\n//highlight-start\nimport { appwriteClient, account } from "./appwriteClient";\nimport authProvider from "./authProvider";\n//highlight-end\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Refine\n                //highlight-start\n                dataProvider={dataProvider(appwriteClient, {\n                    databaseId: "default",\n                })}\n                liveProvider={liveProvider(appwriteClient, {\n                    databaseId: "default",\n                })}\n                options={{ liveMode: "auto" }}\n                authProvider={authProvider}\n                //highlight-end\n                routerProvider={routerProvider}\n                notificationProvider={notificationProvider}\n            >\n                {/* ... */}\n            </Refine>\n        </BrowserRouter>\n    );\n};\n')),(0,r.kt)("admonition",{title:"Live/Realtime \ud83d\ude80",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"@refinedev/appwrite")," package supports Live/Realtime Provider natively \ud83d\ude80"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Refer to the Live/Realtime Provider docs for detailed usage. \u2192"))),(0,r.kt)("h2",{id:"create-collections"},"Create Collections"),(0,r.kt)("p",null,"We created two collections on Appwrite Database as ",(0,r.kt)("inlineCode",{parentName:"p"},"posts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"categories")," and added a relation between them."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Category Collection"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Title: text")),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/category.png",alt:"category"}),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Post Collection"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Title: text"),(0,r.kt)("li",{parentName:"ul"},"CategoryId: text"),(0,r.kt)("li",{parentName:"ul"},"Content: text"),(0,r.kt)("li",{parentName:"ul"},"Images: wilcard")),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/posts.png",alt:"posts"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Then we need to create an appwrite user to be able to login with ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/user.png",alt:"user"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"permissions"},"Permissions"),(0,r.kt)("p",null,"In order to list posts and categories, you need to give read and write permission by Appwrite."),(0,r.kt)("p",null,"Example: ",(0,r.kt)("inlineCode",{parentName:"p"},"Post Collection Permissons")),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/data-provider/appwrite/permission.png",alt:"permission"}),(0,r.kt)("br",null),(0,r.kt)("p",null,'We indicate that the read and write permission is open to everyone by giving the "',"*",'" parameter.'),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://appwrite.io/docs/permissions"},"Refer to the Appwrite Permissions documentation for detailed information.\u2192")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#create-page"},"Check out how you can use permissions when creating posts with ",(0,r.kt)("strong",{parentName:"a"},"refine")," \u2192")),(0,r.kt)("h2",{id:"login-page"},"Login page\u200b"),(0,r.kt)("p",null,"Before creating CRUD pages, let's create a login page. For this we use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/antd-auth-page/"},(0,r.kt)("inlineCode",{parentName:"a"},"AuthPage"))," component. This component returns ready-to-use authentication pages for ",(0,r.kt)("inlineCode",{parentName:"p"},"login"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"register"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"forgot password")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update password")," actions."),(0,r.kt)("p",null,"Below we see its implementation in the ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:5173 previewHeight=650px",live:!0,hideCode:!0,url:"http://localhost:5173",previewHeight:"650px"},'setInitialRoutes(["/"]);\n// visible-block-start\n// src/App.tsx\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    List,\n    EditButton,\n    ShowButton,\n    useTable,\n    AuthPage,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ConfigProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    liveProvider={liveProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    authProvider={authProvider}\n                    routerProvider={routerProvider}\n                    resources={[\n                        {\n                            name: "61c43ad33b857",\n                            list: "/posts",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            show: "/posts/show/:id",\n                            meta: {\n                                label: "Post",\n                            },\n                        },\n                    ]}\n                    notificationProvider={notificationProvider}\n                    options={{\n                        liveMode: "auto",\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                index\n                                element={\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                }\n                            />\n\n                            <Route path="/posts">\n                                <Route index element={<PostList />} />\n                                <Route path="create" element={<PostCreate />} />\n                                <Route path="edit/:id" element={<PostEdit />} />\n                                <Route path="show/:id" element={<PostShow />} />\n                            </Route>\n                        </Route>\n\n                        {/* highlight-start */}\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                path="/login"\n                                element={\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                            initialValues: {\n                                                email: "demo@refine.dev",\n                                                password: "demodemo",\n                                            },\n                                        }}\n                                    />\n                                }\n                            />\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated>\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                        {/* highlight-end */}\n                    </Routes>\n                </Refine>\n            </ConfigProvider>\n        </BrowserRouter>\n    );\n};\n// visible-block-end\nrender(<App />);\n')),(0,r.kt)("p",null,"Now we can login with the user we created by Appwrite. We can then list, create and edit posts."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"refine")," resource name must be the same as Appwrite Collection ID. You can change your label with resource meta."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const App: React.FC = () => {\n    return (\n        <Refine\n            dataProvider={dataProvider(appwriteClient, {\n                databaseId: "default",\n            })}\n            liveProvider={liveProvider(appwriteClient, {\n                databaseId: "default",\n            })}\n            options={{ liveMode: "auto" }}\n            authProvider={authProvider}\n            routerProvider={routerProvider}\n            Layout={Layout}\n            ReadyPage={ReadyPage}\n            notificationProvider={notificationProvider}\n            catchAll={<ErrorComponent />}\n            LoginPage={Login}\n            resources={[\n                {\n                    //highlight-start\n                    name: "61bc3660648a6",\n                    //highlight-end\n                    meta: {\n                        //highlight-start\n                        label: "Post",\n                        //highlight-end\n                    },\n                },\n            ]}\n        />\n    );\n};\n\nexport default App;\n'))),(0,r.kt)("h2",{id:"list-page"},"List Page"),(0,r.kt)("p",null,"Now that we've created our collections, we can create and list documents. Let's list the posts and categories that we have created by Appwrite with ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useMany } from "@refinedev/core";\nimport {\n    List,\n    TextField,\n    useTable,\n    EditButton,\n    ShowButton,\n    getDefaultSortOrder,\n} from "@refinedev/antd";\nimport { Table, Space } from "antd";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostsList: React.FC = () => {\n    const { tableProps, sorter } = useTable<IPost>({\n        sorters: {\n            initial: [\n                {\n                    field: "$id",\n                    order: "asc",\n                },\n            ],\n        },\n    });\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.categoryId) ?? [];\n    const { data, isLoading } = useMany<ICategory>({\n        resource: "61bc4afa9ee2c",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column\n                    dataIndex="id"\n                    title="ID"\n                    sorter\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                />\n                <Table.Column dataIndex="title" title="Title" sorter />\n                <Table.Column\n                    dataIndex="categoryId"\n                    title="Category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    data?.data.find((item) => item.id === value)\n                                        ?.title\n                                }\n                            />\n                        );\n                    }}\n                />\n                <Table.Column<IPost>\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                            <ShowButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=650px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"650px"},'setInitialRoutes(["/"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    List,\n    EditButton,\n    ShowButton,\n    useTable,\n    AuthPage,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ConfigProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    liveProvider={liveProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    authProvider={{\n                        ...authProvider,\n                        check: async () => ({\n                            authenticated: true,\n                        }),\n                    }}\n                    routerProvider={routerProvider}\n                    resources={[\n                        {\n                            name: "61c43ad33b857",\n                            list: "/posts",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            show: "/posts/show/:id",\n                            meta: {\n                                label: "Post",\n                            },\n                        },\n                    ]}\n                    notificationProvider={notificationProvider}\n                    options={{\n                        liveMode: "auto",\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                index\n                                element={\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                }\n                            />\n\n                            <Route path="/posts">\n                                <Route index element={<PostList />} />\n                                <Route path="create" element={<PostCreate />} />\n                                <Route path="edit/:id" element={<PostEdit />} />\n                                <Route path="show/:id" element={<PostShow />} />\n                            </Route>\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                path="/login"\n                                element={\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                            initialValues: {\n                                                email: "demo@refine.dev",\n                                                password: "demodemo",\n                                            },\n                                        }}\n                                    />\n                                }\n                            />\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated>\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ConfigProvider>\n        </BrowserRouter>\n    );\n};\nrender(<App />);\n')),(0,r.kt)("h2",{id:"create-page"},"Create Page"),(0,r.kt)("p",null,"We can now create posts and set categories from our ",(0,r.kt)("strong",{parentName:"p"},"refine")," UI."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useState } from "react";\n\nimport { Create, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsCreate: React.FC = () => {\n    const { formProps, saveButtonProps } = useForm<IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "61bc4afa9ee2c",\n        optionLabel: "title",\n        optionValue: "id",\n    });\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label="Category"\n                    name="categoryId"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label="Content"\n                    name="content"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <MDEditor data-color-mode="light" />\n                </Form.Item>\n                <Form.Item label="Images">\n                    <Form.Item\n                        name="images"\n                        valuePropName="fileList"\n                        normalize={normalizeFile}\n                        noStyle\n                    >\n                        <Upload.Dragger\n                            name="file"\n                            listType="picture"\n                            multiple\n                            customRequest={async ({\n                                file,\n                                onError,\n                                onSuccess,\n                            }) => {\n                                try {\n                                    const rcFile = file as RcFile;\n\n                                    const { $id } = await storage.createFile(\n                                        "default",\n                                        rcFile.name,\n                                        rcFile,\n                                    );\n\n                                    const url = storage.getFileView(\n                                        "default",\n                                        $id,\n                                    );\n\n                                    onSuccess?.({ url }, new XMLHttpRequest());\n                                } catch (error) {\n                                    onError?.(new Error("Upload Error"));\n                                }\n                            }}\n                        >\n                            <p className="ant-upload-text">\n                                Drag &amp; drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n            </Form>\n        </Create>\n    );\n};\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=650px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"650px"},'setInitialRoutes(["/posts/create"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    List,\n    EditButton,\n    ShowButton,\n    useTable,\n    AuthPage,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ConfigProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    liveProvider={liveProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    authProvider={{\n                        ...authProvider,\n                        check: async () => ({\n                            authenticated: true,\n                        }),\n                    }}\n                    routerProvider={routerProvider}\n                    resources={[\n                        {\n                            name: "61c43ad33b857",\n                            list: "/posts",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            show: "/posts/show/:id",\n                            meta: {\n                                label: "Post",\n                            },\n                        },\n                    ]}\n                    notificationProvider={notificationProvider}\n                    options={{\n                        liveMode: "auto",\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                index\n                                element={\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                }\n                            />\n\n                            <Route path="/posts">\n                                <Route index element={<PostList />} />\n                                <Route path="create" element={<PostCreate />} />\n                                <Route path="edit/:id" element={<PostEdit />} />\n                                <Route path="show/:id" element={<PostShow />} />\n                            </Route>\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                path="/login"\n                                element={\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                            initialValues: {\n                                                email: "demo@refine.dev",\n                                                password: "demodemo",\n                                            },\n                                        }}\n                                    />\n                                }\n                            />\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated>\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ConfigProvider>\n        </BrowserRouter>\n    );\n};\nrender(<App />);\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"As we mentioned above, we need permissions to list or create documents in Appwrite. By default, Read Access and Write Access are public when creating documents from ",(0,r.kt)("strong",{parentName:"p"},"refine")," UI."),(0,r.kt)("p",{parentName:"admonition"},"If you want to restrict ",(0,r.kt)("a",{parentName:"p",href:"https://appwrite.io/docs/permissions#permission-types"},"permissions")," and only allow specific users, you need to specify it in meta."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Permission, Role } from "@refinedev/appwrite";\nconst { formProps, saveButtonProps } = useForm<IPost>({\n    meta: {\n        writePermissions: [Permission.read(Role.any())],\n        readPermissions: [Permission.read(Role.any())],\n    },\n});\n'))),(0,r.kt)("h2",{id:"edit-page"},"Edit Page"),(0,r.kt)("p",null,"You can edit the posts and categories we have created update your data."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show Code"),(0,r.kt)("p",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nimport { Edit, useForm, useSelect } from "@refinedev/antd";\nimport { Form, Input, Select, Upload } from "antd";\nimport { RcFile } from "antd/lib/upload/interface";\n\nimport MDEditor from "@uiw/react-md-editor";\n\nimport { IPost, ICategory } from "interfaces";\nimport { storage, normalizeFile } from "utility";\n\nexport const PostsEdit: React.FC = () => {\n    const { formProps, saveButtonProps, queryResult } = useForm<IPost>();\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<ICategory>({\n        resource: "61bc4afa9ee2c",\n        defaultValue: postData?.categoryId,\n        optionLabel: "title",\n        optionValue: "id",\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label="Category"\n                    name="categoryId"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Select {...categorySelectProps} />\n                </Form.Item>\n                <Form.Item\n                    label="Content"\n                    name="content"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <MDEditor data-color-mode="light" />\n                </Form.Item>\n                <Form.Item label="Images">\n                    <Form.Item\n                        name="images"\n                        valuePropName="fileList"\n                        normalize={normalizeFile}\n                        noStyle\n                    >\n                        <Upload.Dragger\n                            name="file"\n                            listType="picture"\n                            multiple\n                            customRequest={async ({\n                                file,\n                                onError,\n                                onSuccess,\n                            }) => {\n                                try {\n                                    const rcFile = file as RcFile;\n\n                                    const { $id } = await storage.createFile(\n                                        "default",\n                                        rcFile.name,\n                                        rcFile,\n                                    );\n\n                                    const url = storage.getFileView(\n                                        "default",\n                                        $id,\n                                    );\n\n                                    onSuccess?.({ url }, new XMLHttpRequest());\n                                } catch (error) {\n                                    onError?.(new Error("Upload Error"));\n                                }\n                            }}\n                        >\n                            <p className="ant-upload-text">\n                                Drag &amp; drop a file in this area\n                            </p>\n                        </Upload.Dragger>\n                    </Form.Item>\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live previewOnly url=http://localhost:5173 previewHeight=650px",live:!0,previewOnly:!0,url:"http://localhost:5173",previewHeight:"650px"},'setInitialRoutes(["/posts/edit/61c4697ab9ff9"]);\n\nimport { Refine, Authenticated } from "@refinedev/core";\nimport routerProvider, {\n    CatchAllNavigate,\n    NavigateToResource,\n} from "@refinedev/react-router-v6";\nimport { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";\nimport { dataProvider, liveProvider } from "@refinedev/appwrite";\nimport {\n    ThemedLayoutV2,\n    RefineThemes,\n    notificationProvider,\n    List,\n    EditButton,\n    ShowButton,\n    useTable,\n    AuthPage,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport { ConfigProvider, Layout, Table, Space } from "antd";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <ConfigProvider theme={RefineThemes.Blue}>\n                <Refine\n                    dataProvider={dataProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    liveProvider={liveProvider(appwriteClient, {\n                        databaseId: "default",\n                    })}\n                    authProvider={{\n                        ...authProvider,\n                        check: async () => ({\n                            authenticated: true,\n                        }),\n                    }}\n                    routerProvider={routerProvider}\n                    resources={[\n                        {\n                            name: "61c43ad33b857",\n                            list: "/posts",\n                            create: "/posts/create",\n                            edit: "/posts/edit/:id",\n                            show: "/posts/show/:id",\n                            meta: {\n                                label: "Post",\n                            },\n                        },\n                    ]}\n                    notificationProvider={notificationProvider}\n                    options={{\n                        liveMode: "auto",\n                        syncWithLocation: true,\n                        warnWhenUnsavedChanges: true,\n                    }}\n                >\n                    <Routes>\n                        <Route\n                            element={\n                                <Authenticated\n                                    fallback={<CatchAllNavigate to="/login" />}\n                                >\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                index\n                                element={\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                }\n                            />\n\n                            <Route path="/posts">\n                                <Route index element={<PostList />} />\n                                <Route path="create" element={<PostCreate />} />\n                                <Route path="edit/:id" element={<PostEdit />} />\n                                <Route path="show/:id" element={<PostShow />} />\n                            </Route>\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated fallback={<Outlet />}>\n                                    <NavigateToResource resource="61c43ad33b857" />\n                                </Authenticated>\n                            }\n                        >\n                            <Route\n                                path="/login"\n                                element={\n                                    <AuthPage\n                                        type="login"\n                                        formProps={{\n                                            initialValues: {\n                                                email: "demo@refine.dev",\n                                                password: "demodemo",\n                                            },\n                                        }}\n                                    />\n                                }\n                            />\n                        </Route>\n\n                        <Route\n                            element={\n                                <Authenticated>\n                                    <ThemedLayoutV2>\n                                        <Outlet />\n                                    </ThemedLayoutV2>\n                                </Authenticated>\n                            }\n                        >\n                            <Route path="*" element={<ErrorComponent />} />\n                        </Route>\n                    </Routes>\n                </Refine>\n            </ConfigProvider>\n        </BrowserRouter>\n    );\n};\nrender(<App />);\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("admonition",{type:"additional"},(0,r.kt)("p",{parentName:"admonition"},"Username: ",(0,r.kt)("inlineCode",{parentName:"p"},"demo@refine.dev")),(0,r.kt)("p",{parentName:"admonition"},"Password: ",(0,r.kt)("inlineCode",{parentName:"p"},"demodemo"))),(0,r.kt)(c,{path:"data-provider-appwrite",mdxType:"CodeSandboxExample"}))}f.isMDXComponent=!0}}]);