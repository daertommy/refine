"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[97302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},27975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>v,frontMatter:()=>l,metadata:()=>d,toc:()=>m});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={id:"useDrawerForm",title:"useDrawerForm",sidebar_label:"useDrawerForm"},p=void 0,d={unversionedId:"api-reference/antd/hooks/form/useDrawerForm",id:"api-reference/antd/hooks/form/useDrawerForm",title:"useDrawerForm",description:"The useDrawerForm hook allows you to manage a form within a Drawer. It returns the Ant Design ` and ` components props.",source:"@site/docs/api-reference/antd/hooks/form/useDrawerForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useDrawerForm",permalink:"/docs/api-reference/antd/hooks/form/useDrawerForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/form/useDrawerForm.md",tags:[],version:"current",lastUpdatedBy:"Refine Community Bot",lastUpdatedAt:1700520648,formattedLastUpdatedAt:"Nov 20, 2023",frontMatter:{id:"useDrawerForm",title:"useDrawerForm",sidebar_label:"useDrawerForm"},sidebar:"someSidebar",previous:{title:"useSelect",permalink:"/docs/api-reference/antd/hooks/field/useSelect/"},next:{title:"useForm",permalink:"/docs/api-reference/antd/hooks/form/useForm"}},s={},m=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>overtimeOptions</code>",id:"overtimeoptions",level:3},{value:"<code>autoSave</code>",id:"autosave",level:3},{value:"<code>enabled</code>",id:"enabled",level:4},{value:"<code>debounce</code>",id:"debounce",level:4},{value:"<code>onFinish</code>",id:"onfinish",level:4},{value:"<code>invalidateOnUnmount</code>",id:"invalidateonunmount",level:4},{value:"<code>invalidateOnClose</code>",id:"invalidateonclose",level:4},{value:"Return values",id:"return-values",level:2},{value:"<code>show</code>",id:"show",level:3},{value:"<code>close</code>",id:"close",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>deleteButtonProps</code>",id:"deletebuttonprops",level:3},{value:"<code>formProps</code>",id:"formprops",level:3},{value:"<code>drawerProps</code>",id:"drawerprops",level:3},{value:"<code>width</code>",id:"width",level:4},{value:"<code>onClose</code>",id:"onclose",level:4},{value:"<code>open</code>",id:"open",level:4},{value:"<code>forceRender</code>",id:"forcerender",level:4},{value:"<code>overtime</code>",id:"overtime",level:3},{value:"<code>autoSaveProps</code>",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Parameters",id:"api-parameters",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Example",id:"example",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("Tabs"),k=u("TabItem"),h=u("PropsTable"),f=u("CodeSandboxExample"),N={toc:m};function v(e){var{components:t}=e,n=i(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},N,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," hook allows you to manage a form within a Drawer. It returns the Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/drawer/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Drawer>"))," components props."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," hook is extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/antd"},"@refinedev/antd")," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook with it.")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"We will show two examples, one for creating a post and one for editing it. Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrwaerForm")," is used in them."),(0,a.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,a.kt)(k,{value:"create",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\nimport React from "react";\n\nimport { Create, List, useDrawerForm, useTable } from "@refinedev/antd";\nimport { Drawer, Form, Input, Select, Table } from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost, HttpError>();\n\n    // highlight-start\n    const { formProps, drawerProps, show, saveButtonProps } = useDrawerForm<\n        IPost,\n        HttpError,\n        IPost\n    >({\n        action: "create",\n    });\n    // highlight-end\n\n    return (\n        <>\n            <List\n                canCreate\n                // highlight-start\n                createButtonProps={{\n                    onClick: () => {\n                        show();\n                    },\n                }}\n                // highlight-end\n            >\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" />\n                    <Table.Column dataIndex="title" title="Title" />\n                </Table>\n            </List>\n            {/* highlight-start */}\n            <Drawer {...drawerProps}>\n                <Create saveButtonProps={saveButtonProps}>\n                    <Form {...formProps} layout="vertical">\n                        <Form.Item\n                            label="Title"\n                            name="title"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label="Status"\n                            name="status"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Select\n                                options={[\n                                    {\n                                        label: "Published",\n                                        value: "published",\n                                    },\n                                    {\n                                        label: "Draft",\n                                        value: "draft",\n                                    },\n                                    {\n                                        label: "Rejected",\n                                        value: "rejected",\n                                    },\n                                ]}\n                            />\n                        </Form.Item>\n                    </Form>\n                </Create>\n            </Drawer>\n            {/* highlight-end */}\n        </>\n    );\n};\n\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,a.kt)(k,{value:"edit",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\nimport React from "react";\n\nimport {\n    Edit,\n    EditButton,\n    List,\n    useDrawerForm,\n    useTable,\n} from "@refinedev/antd";\nimport { Drawer, Form, Input, Select, Space, Table } from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost, HttpError>();\n\n    // highlight-start\n    const { formProps, drawerProps, show, saveButtonProps, id } = useDrawerForm<\n        IPost,\n        HttpError,\n        IPost\n    >({\n        action: "edit",\n        warnWhenUnsavedChanges: true,\n    });\n    // highlight-end\n\n    return (\n        <>\n            <List\n                canCreate\n                // highlight-start\n                createButtonProps={{\n                    onClick: () => {\n                        show();\n                    },\n                }}\n                // highlight-end\n            >\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" />\n                    <Table.Column dataIndex="title" title="Title" />\n                    <Table.Column<IPost>\n                        title="Actions"\n                        dataIndex="actions"\n                        key="actions"\n                        render={(_, record) => (\n                            // highlight-start\n                            <Space>\n                                <EditButton\n                                    hideText\n                                    size="small"\n                                    recordItemId={record.id}\n                                    onClick={() => show(record.id)}\n                                />\n                            </Space>\n                            // highlight-end\n                        )}\n                    />\n                </Table>\n            </List>\n            {/* highlight-start */}\n            <Drawer {...drawerProps}>\n                <Edit saveButtonProps={saveButtonProps} recordItemId={id}>\n                    <Form {...formProps} layout="vertical">\n                        <Form.Item\n                            label="Title"\n                            name="title"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label="Status"\n                            name="status"\n                            rules={[\n                                {\n                                    required: true,\n                                },\n                            ]}\n                        >\n                            <Select\n                                options={[\n                                    {\n                                        label: "Published",\n                                        value: "published",\n                                    },\n                                    {\n                                        label: "Draft",\n                                        value: "draft",\n                                    },\n                                    {\n                                        label: "Rejected",\n                                        value: "rejected",\n                                    },\n                                ]}\n                            />\n                        </Form.Item>\n                    </Form>\n                </Edit>\n            </Drawer>\n            {/* highlight-end */}\n        </>\n    );\n};\n\n// visible-block-end\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens the edit form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," when clicked."),(0,a.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list manually. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n    title="Actions"\n    dataIndex="actions"\n    key="actions"\n    render={(_value, record) => <EditButton onClick={() => show(record.id)} />}\n/>\n'))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," props are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm"),". You can find descriptions on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," documentation.")),(0,a.kt)("h3",{id:"syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the drawers visibility state and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"This property can also be set as an object ",(0,a.kt)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.kt)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const drawerForm = useDrawerForm({\n    syncWithLocation: { key: "my-modal", syncId: true },\n});\n')),(0,a.kt)("h3",{id:"overtimeoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtimeOptions")),(0,a.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useDrawerForm({\n    //...\n    overtimeOptions: {\n        interval: 1000,\n        onInterval(elapsedInterval) {\n            console.log(elapsedInterval);\n        },\n    },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n    elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,a.kt)("h3",{id:"autosave"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSave")),(0,a.kt)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.kt)("p",null,"By default the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.kt)("p",null,"It also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed."),(0,a.kt)("h4",{id:"enabled"},(0,a.kt)("inlineCode",{parentName:"h4"},"enabled")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n    autoSave: {\n        enabled: true,\n    },\n});\n")),(0,a.kt)("h4",{id:"debounce"},(0,a.kt)("inlineCode",{parentName:"h4"},"debounce")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"1000"))),(0,a.kt)("p",null,"Set the debounce time for the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        debounce: 2000,\n    },\n});\n")),(0,a.kt)("h4",{id:"onfinish"},(0,a.kt)("inlineCode",{parentName:"h4"},"onFinish")),(0,a.kt)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useDrawerForm({\n    autoSave: {\n        enabled: true,\n        // highlight-start\n        onFinish: (values) => {\n            return {\n                foo: "bar",\n                ...values,\n            };\n        },\n        // highlight-end\n    },\n});\n')),(0,a.kt)("h4",{id:"invalidateonunmount"},(0,a.kt)("inlineCode",{parentName:"h4"},"invalidateOnUnmount")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        invalidateOnUnmount: true,\n    },\n});\n")),(0,a.kt)("h4",{id:"invalidateonclose"},(0,a.kt)("inlineCode",{parentName:"h4"},"invalidateOnClose")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the drawer is closed. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useDrawerForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        invalidateOnClose: true,\n    },\n});\n")),(0,a.kt)("h2",{id:"return-values"},"Return values"),(0,a.kt)("h3",{id:"show"},(0,a.kt)("inlineCode",{parentName:"h3"},"show")),(0,a.kt)("p",null,"A function that opens the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),". It takes an optional ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," parameter. If ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," is provided, it will fetch the record data and fill the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," with it."),(0,a.kt)("h3",{id:"close"},(0,a.kt)("inlineCode",{parentName:"h3"},"close")),(0,a.kt)("p",null,"A function that closes the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),". Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"[onClose][#onClose]"),"."),(0,a.kt)("h3",{id:"savebuttonprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,a.kt)("p",null,"It contains the props needed by the ",(0,a.kt)("inlineCode",{parentName:"p"},'"submit"')," button within the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," (disabled,loading etc.). When ",(0,a.kt)("inlineCode",{parentName:"p"},"saveButtonProps.onClick")," is called, it triggers ",(0,a.kt)("inlineCode",{parentName:"p"},"form.submit()"),". You can manually pass these props to your custom button."),(0,a.kt)("h3",{id:"deletebuttonprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"deleteButtonProps")),(0,a.kt)("p",null,"It contains the props needed by the ",(0,a.kt)("inlineCode",{parentName:"p"},'"delete"')," button within the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," (disabled,loading etc.). When ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteButtonProps.onSuccess")," is called, it triggers it sets ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". You can manually pass these props to your custom button."),(0,a.kt)("h3",{id:"formprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"formProps")),(0,a.kt)("p",null,"It's required to manage ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," state and actions. Under the hood the ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," came from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")),"."),(0,a.kt)("p",null,"It contains the props to manage the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form#api"},"Antd ",(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," component such as ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#return-values"},(0,a.kt)("em",{parentName:"a"},(0,a.kt)("inlineCode",{parentName:"em"},"onValuesChange"),", ",(0,a.kt)("inlineCode",{parentName:"em"},"initialValues"),", ",(0,a.kt)("inlineCode",{parentName:"em"},"onFieldsChange"),", ",(0,a.kt)("inlineCode",{parentName:"em"},"onFinish")," etc."))),(0,a.kt)("h3",{id:"drawerprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"drawerProps")),(0,a.kt)("p",null,"It's required to manage ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/drawer/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Drawer>"))," state and actions."),(0,a.kt)("h4",{id:"width"},(0,a.kt)("inlineCode",{parentName:"h4"},"width")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},'"500px"'))),(0,a.kt)("p",null,"It's the width of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),"."),(0,a.kt)("h4",{id:"onclose"},(0,a.kt)("inlineCode",{parentName:"h4"},"onClose")),(0,a.kt)("p",null,"A function that can close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),". It's useful when you want to close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," manually.\nWhen ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#warnwhenunsavedchanges"},(0,a.kt)("inlineCode",{parentName:"a"},"warnWhenUnsavedChanges"))," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", it will show a confirmation modal before closing the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),". If you override this function, you have to handle this confirmation modal manually."),(0,a.kt)("h4",{id:"open"},(0,a.kt)("inlineCode",{parentName:"h4"},"open")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"Current visible state of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>"),"."),(0,a.kt)("h4",{id:"forcerender"},(0,a.kt)("inlineCode",{parentName:"h4"},"forceRender")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"true"))),(0,a.kt)("p",null,"It renders ",(0,a.kt)("inlineCode",{parentName:"p"},"<Drawer>")," instead of lazy rendering it."),(0,a.kt)("h3",{id:"overtime"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtime")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useDrawerForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"autosaveprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSaveProps")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," properties from mutation."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.kt)("p",null,"You may need to modify the form data before it is sent to the API."),(0,a.kt)("p",null,"For example, Let's send the values we received from the user in two separate inputs, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { Create, Drawer, useDrawerForm } from "@refinedev/antd";\nimport { Form, Input } from "antd";\nimport React from "react";\n\nexport const UserCreate: React.FC = () => {\n    // highlight-start\n    const { formProps, drawerProps, saveButtonProps } = useDrawerForm({\n        action: "create",\n    });\n    // highlight-end\n\n    // highlight-start\n    const handleOnFinish = (values) => {\n        formProps.onFinish?.({\n            fullName: `${values.name} ${values.surname}`,\n        });\n    };\n    // highlight-end\n\n    return (\n        <Drawer {...drawerProps}>\n            <Create saveButtonProps={saveButtonProps}>\n                // highlight-next-line\n                <Form\n                    {...formProps}\n                    onFinish={handleOnFinish}\n                    layout="vertical"\n                >\n                    <Form.Item label="Name" name="name">\n                        <Input />\n                    </Form.Item>\n                    <Form.Item label="Surname" name="surname">\n                        <Input />\n                    </Form.Item>\n                </Form>\n            </Create>\n        </Drawer>\n    );\n};\n')),(0,a.kt)("h2",{id:"api-parameters"},"API Parameters"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)(h,{module:"@refinedev/antd/useDrawerForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,a.kt)("inlineCode",{parentName:"p"},"useDrawerForm")," will use what is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," depends which ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). Otherwise if ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponse"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TError"))))),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that opens the drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"form"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"drawerProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for managed drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#drawerprops"},(0,a.kt)("inlineCode",{parentName:"a"},"DrawerProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean; onClick: () => void; loading: boolean; }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"deleteButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Adds props for delete button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#delete-button-props"},(0,a.kt)("inlineCode",{parentName:"a"},"DeleteButtonProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"open"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the drawer is open or not"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a function that can close the drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"success" }'))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(f,{path:"form-antd-use-drawer-form",mdxType:"CodeSandboxExample"}))}v.isMDXComponent=!0}}]);