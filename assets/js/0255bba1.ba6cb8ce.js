"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[88449],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},20059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",slug:"refine-react-ant-design-admin-panel-framework",authors:"melih",tags:["refine","ant-design","react","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},s=void 0,c={permalink:"/blog/refine-react-ant-design-admin-panel-framework",source:"@site/blog/2022-02-21-react-antd-admin.md",title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",date:"2022-02-21T00:00:00.000Z",formattedDate:"February 21, 2022",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"ant-design",permalink:"/blog/tags/ant-design"},{label:"react",permalink:"/blog/tags/react"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:12.56,hasTruncateMarker:!0,authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],frontMatter:{title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",slug:"refine-react-ant-design-admin-panel-framework",authors:"melih",tags:["refine","ant-design","react","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},prevItem:{title:"Build low-code, customizable and authorization ready (accesscontrol) admin panel with NestJS.",permalink:"/blog/how-to-access-control-with-nestjs"},nextItem:{title:"Top React JS Frameworks Every Developer Should Know",permalink:"/blog/best-react-frameworks"},relatedPosts:[{title:"Creating a Responsive React Navbar with Tailwind CSS",description:"In this brief guide, we'll create a responsive navbar with Tailwind CSS and Bootstrap in React.",permalink:"/blog/react-navbar-responsive-tailwind",formattedDate:"October 7, 2022",authors:[{name:"Muhammed  Sarwar",title:"Software Engineer",url:"https://twitter.com/arslans171",imageURL:"/img/generic-profile.png",key:"muhammed_arslan"}],readingTime:8.4,date:"2022-10-07T00:00:00.000Z"},{title:"Creating Mission and Invoice Pages",description:"We add more CRUD views to the Pdf Invoice Generator app we have been building using refine and Strapi last few days.",permalink:"/blog/refine-react-invoice-generator-4",formattedDate:"April 13, 2023",authors:[{name:"Abdullah Numan",title:"Fullstack Developer",url:"https://github.com/anewman15/",imageURL:"https://github.com/anewman15.png",key:"abdullah_numan"}],readingTime:17.935,date:"2023-04-13T00:00:00.000Z"},{title:"An Intro to server components in React",description:"We will discuss what React server components are as well as how to incorporate them into building applications.",permalink:"/blog/react-server-components",formattedDate:"July 9, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:10.405,date:"2023-07-09T00:00:00.000Z"}],authorPosts:[{title:"Web3 with Refine",description:"Sign-in Ethereum with Web3 and Refine",permalink:"/blog/web3-with-refine",formattedDate:"December 13, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:1.53,date:"2021-12-13T00:00:00.000Z"},{title:"We are going back to 1995! The perfect harmony of Modern stack and Win95",description:"With the refine being headless, we may use any UI we choose for our Admin Panel. In this tutorial, we'll create a Nostalgic-style admin panel using refine and React95 UI.",permalink:"/blog/awesome-react-windows95-ui-with-refine",formattedDate:"March 22, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:18.555,date:"2022-03-22T00:00:00.000Z"},{title:"How to Create Full Stack React/Next.JS Web App in Few Hour",description:"In this article, we will learn how we can create a full-featured customizable Web / B2B application with **refine** in just a few hours.",permalink:"/blog/create-full-stack-app-with-refine",formattedDate:"April 29, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:8.075,date:"2022-04-29T00:00:00.000Z"}]},d={authorsImageUrls:[void 0]},p=[{value:"Key features\u200b",id:"key-features",level:4},{value:"Refine Advanced Tutorial",id:"refine-advanced-tutorial",level:2},{value:"Create Refine Project",id:"create-refine-project",level:3},{value:"Adding i18n Provider to Your Project",id:"adding-i18n-provider-to-your-project",level:2},{value:"Create i18n Instance",id:"create-i18n-instance",level:3},{value:"Use the translation with Table Content",id:"use-the-translation-with-table-content",level:3},{value:"Add Live Provider(Realtime) to Your Project with Refine",id:"add-live-providerrealtime-to-your-project-with-refine",level:2},{value:"Installation",id:"installation",level:3},{value:"Add Access Control to Your Project with Refine",id:"add-access-control-to-your-project-with-refine",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:p};function m(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,r.kt)("strong",{parentName:"p"},"refine"),". Although we plan to update it with the latest version of ",(0,r.kt)("strong",{parentName:"p"},"refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,r.kt)("p",{parentName:"admonition"},"You should know that ",(0,r.kt)("strong",{parentName:"p"},"refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),".")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/"},(0,r.kt)("strong",{parentName:"a"},"refine"))," is a ",(0,r.kt)("strong",{parentName:"p"},"headless")," ",(0,r.kt)("a",{parentName:"p",href:"https://en.reactjs.org/"},"React")," ",(0,r.kt)("strong",{parentName:"p"},"internal tool")," framework. It helps you develop quickly while developing both B2B and B2C applications. While speeding you up, it is never restricted and has a fully customizable structure."),(0,r.kt)("h4",{id:"key-features"},"Key features\u200b"),(0,r.kt)("p",null,"\ud83d\udd25 Headless : Works with any UI framework"),(0,r.kt)("p",null,"\u2699\ufe0f Zero-configuration : One-line setup with superplate. It takes less than a minute to start a project."),(0,r.kt)("p",null,"\ud83d\udce6 Out-of-the-box : Routing, networking, authentication, state management, i18n and UI."),(0,r.kt)("p",null,"\ud83d\udd0c Backend Agnostic : Connects to any custom backend. Built-in support for REST API, GraphQL, NestJs CRUD, Airtable, Strapi, Strapi v4, Strapi GraphQL, Supabase, Hasura, Nhost, Medusa, Appwrite, and Firebase."),(0,r.kt)("p",null,"\ud83d\udcdd Native Typescript Core : You can always opt out for plain JavaScript."),(0,r.kt)("p",null,"\ud83d\udc1c Enterprise UI : Works seamlessly with Ant Design. (Support for multiple UI frameworks is on the Roadmap)"),(0,r.kt)("p",null,"\ud83d\udcdd Boilerplate-free Code : Keeps your codebase clean and readable."),(0,r.kt)("p",null,"You can use it with any UI library you want without any problems. Also, ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/"},"Ant Design")," as out-of-the-box is supported."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," directly provides Ant Design components and some hooks to work with those components. These hooks give you the required props for those Ant Design components."),(0,r.kt)("h2",{id:"refine-advanced-tutorial"},"Refine Advanced Tutorial"),(0,r.kt)("p",null,"This article will proceed through refine's ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/tutorial/introduction/index/"},"Refine Basic Tutorial"),". That's why I suggest you read the basic tutorial of refine."),(0,r.kt)("p",null,"In this tutorial, we will learn how to include the features(i18n, Realtime, Access Control) provided by the refine in our project and how we can use it."),(0,r.kt)("h3",{id:"create-refine-project"},"Create Refine Project"),(0,r.kt)("p",null,"Let's start by creating our refine project. You can use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pankod/superplate"},"superplate")," to create a refine project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm create refine-app@latest refine-advanced-tutorial -- -p refine-react -b v3\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 What will be the name of your app \u203a refine-advanced-tutorial\n\n\u2714 Package manager: \xb7 Npm\n\n\u2714 Do you want to use a UI Framework?: \xb7 Ant Design\n\n\u2714 Do you want a customized layout?: \xb7 Default theme\n\n\u2714 Router Provider: \xb7 React Router v6\n\n\u2714 Data Provider: \xb7 REST API\n\n\u2714 Auth Provider: \xb7 None\n\n\u2714 Do you want to add example pages? \xb7 Yes (Recommended)\n\n\u2714 Do you want a customized layout? \xb7 No\n\n\u2714 i18n - Internationalization: \xb7 No\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"\u2714 Do you want to add example pages? \xb7Yes (Recommended)")," By selecting you can view the tutorial in your local."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd refine-advanced-tutorial\n\nnpm run dev\n")),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/refine_tutorial.gif",alt:"Refine Tutorial"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"As you have seen, our example project is ready. Now let's examine how the features offered by ",(0,r.kt)("strong",{parentName:"p"},"refine")," are included in a project and how they are used."),(0,r.kt)("h2",{id:"adding-i18n-provider-to-your-project"},"Adding i18n Provider to Your Project"),(0,r.kt)("h3",{id:"create-i18n-instance"},"Create i18n Instance"),(0,r.kt)("p",null,"First, we will create an i18n instance using react-i18next."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/i18n.ts"',title:'"src/i18n.ts"'},'import i18n from "i18next";\nimport { initReactI18next } from "react-i18next";\nimport Backend from "i18next-xhr-backend";\nimport detector from "i18next-browser-languagedetector";\n\ni18n\n  .use(Backend)\n  .use(detector)\n  .use(initReactI18next)\n  .init({\n    supportedLngs: ["en", "de"],\n    backend: {\n      loadPath: "/locales/{{lng}}/{{ns}}.json",\n    },\n    defaultNS: "common",\n    fallbackLng: ["en", "de"],\n  });\n\nexport default i18n;\n')),(0,r.kt)("p",null,"Let's import the ",(0,r.kt)("inlineCode",{parentName:"p"},"i18n")," instance we created in index.tsx. Then let's wrap the App in ",(0,r.kt)("inlineCode",{parentName:"p"},"React.Suspense"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/index.tsx"',title:'"src/index.tsx"'},'import React from "react";\nimport { createRoot } from "react-dom/client";\n\nimport App from "./App";\nimport "./i18n";\n\nconst container = document.getElementById("root");\nconst root = createRoot(container!);\nroot.render(\n  <React.StrictMode>\n    <React.Suspense fallback="loading">\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n);\n')),(0,r.kt)("p",null,"Let's define our i18n provider and give it a ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { notificationProvider, Layout } from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { PostList, PostCreate, PostEdit, PostShow } from "pages/posts";\n//highlight-next-line\nimport { useTranslation } from "react-i18next";\n\nfunction App() {\n  //highlight-start\n  const { t, i18n } = useTranslation();\n\n  const i18nProvider = {\n    translate: (key: string, params: object) => t(key, params),\n    changeLocale: (lang: string) => i18n.changeLanguage(lang),\n    getLocale: () => i18n.language,\n  };\n  //highlight-end\n\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      notificationProvider={notificationProvider}\n      Layout={Layout}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "posts",\n          list: PostList,\n          create: PostCreate,\n          edit: PostEdit,\n          show: PostShow,\n        },\n      ]}\n      //highlight-next-line\n      i18nProvider={i18nProvider}\n    />\n  );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Now let's add our own translation. Let's create two separate json files in English and German."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="/public/locales/en/common.json"',title:'"/public/locales/en/common.json"'},'{\n  "posts": {\n    "posts": "Posts",\n    "fields": {\n      "id": "Id",\n      "title": "Title",\n      "category": "Category",\n      "status": {\n        "title": "Status",\n        "published": "Published",\n        "draft": "Draft",\n        "rejected": "Rejected"\n      },\n      "content": "Content",\n      "createdAt": "Created At"\n    },\n    "titles": {\n      "create": "Create Post",\n      "edit": "Edit Post",\n      "list": "Posts",\n      "show": "Show Post"\n    }\n  },\n  "table": {\n    "actions": "Actions"\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="/public/locales/de/common.json"',title:'"/public/locales/de/common.json"'},'{\n  "posts": {\n    "posts": "Eintr\xe4ge",\n    "fields": {\n      "id": "Id",\n      "title": "Title",\n      "category": "Kategorie",\n      "status": {\n        "title": "Status",\n        "published": "Ver\xf6ffentlicht",\n        "draft": "Draft",\n        "rejected": "Abgelehnt"\n      },\n      "content": "Inhalh",\n      "createdAt": "Erstellt am"\n    },\n    "titles": {\n      "create": "Erstellen",\n      "edit": "Bearbeiten",\n      "list": "Eintr\xe4ge",\n      "show": "Eintrag zeigen"\n    }\n  },\n  "table": {\n    "actions": "Aktionen"\n  }\n}\n')),(0,r.kt)("p",null,"In this article, we have included the translation of only a small part as an example."),(0,r.kt)("p",null,"Now, let's create a select component in the header and examine our posts according to the language we have chosen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/header.tsx"',title:'"src/components/header.tsx"'},'import { useGetLocale, useSetLocale } from "@refinedev/core";\nimport { AntdLayout, Space, Menu, Button, Icons, Dropdown } from "@refinedev/antd";\n//highlight-next-line\nimport { useTranslation } from "react-i18next";\n\nconst { DownOutlined } = Icons;\n\nexport const Header: React.FC = () => {\n  //highlight-start\n  const { i18n } = useTranslation();\n  const locale = useGetLocale();\n  const changeLanguage = useSetLocale();\n\n  const currentLocale = locale();\n\n  const menu = (\n    <Menu selectedKeys={[currentLocale]}>\n      {[...(i18n.languages || [])].sort().map((lang: string) => (\n        <Menu.Item key={lang} onClick={() => changeLanguage(lang)}>\n          {lang === "en" ? "English" : "German"}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n  //highlight-end\n\n  return (\n    <AntdLayout.Header\n      style={{\n        display: "flex",\n        justifyContent: "flex-end",\n        alignItems: "center",\n        padding: "0px 24px",\n        height: "48px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      <Dropdown overlay={menu}>\n        <Button type="link">\n          <Space>\n            {currentLocale === "en" ? "English" : "German"}\n            <DownOutlined />\n          </Space>\n        </Button>\n      </Dropdown>\n    </AntdLayout.Header>\n  );\n};\n')),(0,r.kt)("p",null,"Let's define the header we created within the refine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'return (\n  <Refine\n    routerProvider={routerProvider}\n    notificationProvider={notificationProvider}\n    Layout={Layout}\n    i18nProvider={i18nProvider}\n    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n    //highlight-next-line\n    Header={Header}\n    resources={[\n      {\n        name: "posts",\n        list: PostList,\n        create: PostCreate,\n        edit: PostEdit,\n        show: PostShow,\n      },\n    ]}\n  />\n);\n')),(0,r.kt)("p",null,"Now our i18n Provider is ready to use, let's test it together."),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/i8n-overview.gif",alt:"Refine i18n Provider"}),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"use-the-translation-with-table-content"},"Use the translation with Table Content"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  //highlight-next-line\n  useTranslate,\n  useMany,\n} from "@refinedev/core";\nimport { List, Table, TextField, useTable, Space, EditButton, ShowButton } from "@refinedev/antd";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC = () => {\n  //highlight-next-line\n  const translate = useTranslate();\n  const { tableProps } = useTable<IPost>();\n\n  const categoryIds = tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany<ICategory>({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column\n          dataIndex="title"\n          //highlight-next-line\n          title={translate("posts.fields.title")}\n        />\n        <Table.Column\n          dataIndex={["category", "id"]}\n          //highlight-next-line\n          title={translate("posts.fields.category")}\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return <TextField value={data?.data.find((item) => item.id === value)?.title} />;\n          }}\n        />\n        <Table.Column<IPost>\n          //highlight-next-line\n          title={translate("table.actions")}\n          dataIndex="actions"\n          key="actions"\n          render={(_value, record) => (\n            <Space>\n              <EditButton size="small" recordItemId={record.id} />\n              <ShowButton size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n')),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/table-i18n.gif",alt:"Refine i18n Provider"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"You can add the translation you want and organize your content according to different languages \u200b\u200btogether with the ",(0,r.kt)("strong",{parentName:"p"},"refine")," i18n Provider."),(0,r.kt)("p",null,"Check out ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/providers/i18n-provider/"},"refine i18n Provider")," for more detailed information and step-by-step guide"),(0,r.kt)("h2",{id:"add-live-providerrealtime-to-your-project-with-refine"},"Add Live Provider(Realtime) to Your Project with Refine"),(0,r.kt)("p",null,"refine lets you add Realtime support to your app via liveProvider prop for ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),". It can be used to update and show data in Realtime throughout your app."),(0,r.kt)("p",null,"Now let's make our application Realtime using the ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/guides-and-concepts/real-time/"},"refine Live Provider")),(0,r.kt)("p",null,"We will using ",(0,r.kt)("a",{parentName:"p",href:"https://ably.com/"},"Ably")," in this article to provide Realtime features."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"We need to install Ably live provider package from refine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," npm install @refinedev/ably\n")),(0,r.kt)("p",null,"First, let's create ably-client and define our Ably API key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/utility/client.ts"',title:'"src/utility/client.ts"'},'import { Ably } from "@refinedev/ably";\n\nexport const ablyClient = new Ably.Realtime("YOUR_ABLY_API_KEY");\n')),(0,r.kt)("p",null,"Then pass liveProvider from @refinedev/ably to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { Refine } from "@refinedev/core";\nimport { notificationProvider, Layout } from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n//highlight-start\nimport { liveProvider } from "@refinedev/ably";\nimport { ablyClient } from "utility";\n//highlight-end\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { PostList, PostCreate, PostEdit, PostShow } from "pages/posts";\nimport { Header } from "./components/header";\nimport { useTranslation } from "react-i18next";\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n\n  const i18nProvider = {\n    translate: (key: string, params: object) => t(key, params),\n    changeLocale: (lang: string) => i18n.changeLanguage(lang),\n    getLocale: () => i18n.language,\n  };\n\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      notificationProvider={notificationProvider}\n      Layout={Layout}\n      i18nProvider={i18nProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      Header={Header}\n      //highlight-start\n      liveProvider={liveProvider(ablyClient)}\n      options={{ liveMode: "auto" }}\n      //highlight-end\n      resources={[\n        {\n          name: "posts",\n          list: PostList,\n          create: PostCreate,\n          edit: PostEdit,\n          show: PostShow,\n        },\n      ]}\n    />\n  );\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"You can configure ",(0,r.kt)("inlineCode",{parentName:"p"},"liveMode"),', this example use "auto" mode.'),(0,r.kt)("p",null,"Check out ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/guides-and-concepts/real-time/"},"Refine Live Provider")," for more detailed information and step-by-step guide."),(0,r.kt)("p",null,"Our project is now Realtime! Thanks to ",(0,r.kt)("strong",{parentName:"p"},"refine")," Live Provider, we made our project Realtime by adding only 2 lines."),(0,r.kt)("p",null,"Let's see how our RealTime Project works."),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/realtime.gif",alt:"Refine Live Provider"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"add-access-control-to-your-project-with-refine"},"Add Access Control to Your Project with Refine"),(0,r.kt)("p",null,"You can control your project as you wish with the ",(0,r.kt)("strong",{parentName:"p"},"refine react admin framework"),". Now let's add ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/providers/accessControl-provider/"},"Access Control Provider")," to our refine project."),(0,r.kt)("p",null,"Access control is a broad topic where there are lots of advanced solutions that provide different set of features. refine is deliberately agnostic for its own API to be able to integrate different methods (RBAC, ABAC, ACL, etc.) and different libraries (Casbin, CASL, Cerbos, AccessControl.js). can method would be the entry point for those solutions."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/providers/accessControl-provider/"},"Refer to the Access Control Provider documentation for detailed information. \u2192")),(0,r.kt)("p",null,"Let's create two Roles, Admin and Editor. Admin have full CRUD authority on the posts. The Editor role, on the other hand, only has the authority to create and edit new posts. In other words, the person in the editor role cannot delete the posts and cannot view all the rows on the table."),(0,r.kt)("p",null,"Let's start by creating two buttons for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Admin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Editor")," roles in our created Header Component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="/src/componets/header.tsx"',title:'"/src/componets/header.tsx"'},'import { useGetLocale, useSetLocale } from "@refinedev/core";\nimport { AntdLayout, Space, Menu, Button, Icons, Dropdown, Radio } from "@refinedev/antd";\nimport { useTranslation } from "react-i18next";\n\nconst { DownOutlined } = Icons;\n\n//highlight-start\ninterface HeaderProps {\n  role: string;\n}\n//highlight-end\n\nexport const Header: React.FC<HeaderProps> = ({ role }) => {\n  const { i18n } = useTranslation();\n  const locale = useGetLocale();\n  const changeLanguage = useSetLocale();\n\n  const currentLocale = locale();\n\n  const menu = (\n    <Menu selectedKeys={[currentLocale]}>\n      {[...(i18n.languages || [])].sort().map((lang: string) => (\n        <Menu.Item key={lang} onClick={() => changeLanguage(lang)}>\n          {lang === "en" ? "English" : "German"}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <AntdLayout.Header\n      style={{\n        display: "flex",\n        justifyContent: "space-between",\n        alignItems: "center",\n        padding: "0px 24px",\n        height: "48px",\n        backgroundColor: "#FFF",\n      }}\n    >\n      //highlight-start\n      <Radio.Group\n        value={role}\n        onChange={(event) => {\n          localStorage.setItem("role", event.target.value);\n          location.reload();\n        }}\n      >\n        <Radio.Button value="admin">Admin</Radio.Button>\n        <Radio.Button value="editor">Editor</Radio.Button>\n      </Radio.Group>\n      //highlight-end\n      <Dropdown overlay={menu}>\n        <Button type="link">\n          <Space>\n            {currentLocale === "en" ? "English" : "German"}\n            <DownOutlined />\n          </Space>\n        </Button>\n      </Dropdown>\n    </AntdLayout.Header>\n  );\n};\n')),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/access_button.png",alt:"Refine Access Control Provider"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"In this article, we will use ",(0,r.kt)("a",{parentName:"p",href:"https://cerbos.dev/"},"Cerbos")," to ",(0,r.kt)("strong",{parentName:"p"},"refine")," Access Control."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install cerbos\n")),(0,r.kt)("p",null,"After the installation is complete, let's create a Cerbos object in the App.tsx file and define it in ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Cerbos } from "cerbos";\n\nconst cerbos = new Cerbos({\n  hostname: "https://demo-pdp.cerbos.cloud", // The Cerbos PDP instance\n  playgroundInstance: "WS961950bd85QNYlAvTmJYubP0bqF7e3", // The playground instance ID to test\n});\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  routerProvider={routerProvider}\n  notificationProvider={notificationProvider}\n  Layout={Layout}\n  i18nProvider={i18nProvider}\n  dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n  Header={() => <Header role={role} />}\n  liveProvider={liveProvider(ablyClient)}\n  options={{ liveMode: "auto" }}\n  //highlight-start\n  accessControlProvider={{\n    can: async ({ action, params, resource }) => {\n      const cerbosPayload = {\n        principal: {\n          id: "demoUser", // Fake a user ID\n          roles: [role],\n          attr: {},\n        },\n        resource: {\n          kind: resource,\n          instances: {\n            [params?.id || "new"]: {\n              attr: params,\n            },\n          },\n        },\n        actions: [action],\n      };\n      const result = await cerbos.check(cerbosPayload);\n      return Promise.resolve({\n        can: result.isAuthorized(params?.id || "new", action),\n      });\n    },\n  }}\n  //highlight-end\n  resources={[\n    {\n      name: "posts",\n      list: PostList,\n      create: PostCreate,\n      edit: PostEdit,\n      show: PostShow,\n      canDelete: true,\n    },\n  ]}\n/>\n')),(0,r.kt)("p",null,"We will perform our actions according to the role we choose from the header. As you can see above, we set this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"access Control Provider")," ",(0,r.kt)("inlineCode",{parentName:"p"},"can")," method."),(0,r.kt)("p",null,"Now using the ",(0,r.kt)("strong",{parentName:"p"},"refine")," ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/hooks/accessControl/useCan/"},(0,r.kt)("inlineCode",{parentName:"a"},"useCan")),"hook Let's perform operations according to roles within our list."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/PostList.tsx"',title:'"src/pages/PostList.tsx"'},'import {\n  IResourceComponentsProps,\n  useMany,\n  useTranslate,\n  //highlight-next-line\n  useCan,\n} from "@refinedev/core";\n\nimport {\n  List,\n  Table,\n  TextField,\n  useTable,\n  Space,\n  EditButton,\n  ShowButton,\n  FilterDropdown,\n  useSelect,\n  Select,\n  Radio,\n  TagField,\n  NumberField,\n} from "@refinedev/antd";\n\nimport { IPost, ICategory } from "interfaces";\n\nexport const PostList: React.FC<IResourceComponentsProps> = () => {\n  const translate = useTranslate();\n  const { tableProps } = useTable<IPost>();\n\n  const categoryIds = tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n  const { data, isLoading } = useMany<ICategory>({\n    resource: "categories",\n    ids: categoryIds,\n    queryOptions: {\n      enabled: categoryIds.length > 0,\n    },\n  });\n\n  const { selectProps: categorySelectProps } = useSelect<ICategory>({\n    resource: "categories",\n    optionLabel: "title",\n    optionValue: "id",\n  });\n\n  //highlight-start\n  const { data: canAccess } = useCan({\n    resource: "posts",\n    action: "field",\n    params: { field: "hit" },\n  });\n  //highlight-end\n\n  return (\n    <List>\n      <Table {...tableProps} rowKey="id">\n        <Table.Column dataIndex="id" title="ID" />\n        <Table.Column dataIndex="title" title={translate("posts.fields.title")} />\n        <Table.Column\n          dataIndex={["category", "id"]}\n          title={translate("posts.fields.category")}\n          render={(value) => {\n            if (isLoading) {\n              return <TextField value="Loading..." />;\n            }\n\n            return <TextField value={data?.data.find((item) => item.id === value)?.title} />;\n          }}\n          filterDropdown={(props) => (\n            <FilterDropdown {...props}>\n              <Select\n                style={{ minWidth: 200 }}\n                mode="multiple"\n                placeholder="Select Category"\n                {...categorySelectProps}\n              />\n            </FilterDropdown>\n          )}\n        />\n        //highlight-start\n        {canAccess?.can && (\n          <Table.Column\n            dataIndex="hit"\n            title="Hit"\n            render={(value: number) => (\n              <NumberField\n                value={value}\n                options={{\n                  notation: "compact",\n                }}\n              />\n            )}\n          />\n        )}\n        //highlight-end\n        <Table.Column\n          dataIndex="status"\n          title="Status"\n          render={(value: string) => <TagField value={value} />}\n          filterDropdown={(props: any) => (\n            <FilterDropdown {...props}>\n              <Radio.Group>\n                <Radio value="published">Published</Radio>\n                <Radio value="draft">Draft</Radio>\n                <Radio value="rejected">Rejected</Radio>\n              </Radio.Group>\n            </FilterDropdown>\n          )}\n        />\n        <Table.Column<IPost>\n          title={translate("table.actions")}\n          dataIndex="actions"\n          render={(_, record) => (\n            <Space>\n              <EditButton hideText size="small" recordItemId={record.id} />\n              <ShowButton hideText size="small" recordItemId={record.id} />\n            </Space>\n          )}\n        />\n      </Table>\n    </List>\n  );\n};\n')),(0,r.kt)("p",null,"Here, if the selected role is Admin, the 'Hit' section will appear in our Table. We have stated that the Editor role cannot display this section."),(0,r.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2022-02-21-react-antd-admin/access-control.gif",alt:"Refine Access Control Provider"}),(0,r.kt)("br",null),(0,r.kt)("p",null,"Check out ",(0,r.kt)("a",{parentName:"p",href:"https://refine.dev/docs/guides-and-concepts/access-control/"},(0,r.kt)("strong",{parentName:"a"},"refine")," Access Control")," Provider for more detailed information and step-by-step guide"),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this tutorial, we have shown that the features of the ",(0,r.kt)("strong",{parentName:"p"},"refine")," internal tool Framework are useful and how simple it is. These features will shorten your development time considerably. While Refine offers you the opportunity to develop quickly, it does not limit you and gives you the opportunity to customize your project as you wish."),(0,r.kt)("p",null,"We saw how simple it was for refine to include and use the Internationalization (i18n), Live Provider(Realtime) and Access Control features. You can develop more complex applications in a simple way with ",(0,r.kt)("strong",{parentName:"p"},"refine"),"."),(0,r.kt)("p",null,"With ",(0,r.kt)("strong",{parentName:"p"},"refine")," react admin, you can develop any web application you want with ",(0,r.kt)("inlineCode",{parentName:"p"},"Admin Panel"),", Basic ",(0,r.kt)("inlineCode",{parentName:"p"},"Crud App")," or Next.js-SSR Support."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," offers the opportunity to develop ",(0,r.kt)("inlineCode",{parentName:"p"},"B2B")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"B2C")," applications without any restrictions and in a fully customizable manner."))}m.isMDXComponent=!0}}]);