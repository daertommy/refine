"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[90655],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},30697:(e,t,n)=>{n.d(t,{x:()=>v});var r=n(86010),o=n(67294),i=n(73808),a=n(96319),s=n(79526);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const d=({onClick:e})=>o.createElement(a.z,{className:(0,r.Z)(),onClick:e,title:"Report Issue"},o.createElement(u,null)),u=e=>o.createElement("svg",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){l(e,t,n[t])}))}return e}({xmlns:"http://www.w3.org/2000/svg",width:16,height:16,viewBox:"0 0 512 512"},e),o.createElement("title",null,"Report issue"),o.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M370 378c28.89 23.52 46 46.07 46 86m-274-86c-28.89 23.52-46 46.06-46 86m288-256c28.89-23.52 32-56.07 32-96m-288 94c-28.89-23.52-32-54.06-32-94m368 176.13h-80m-256 0H48M256 192v256"}),o.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M256 448h0c-70.4 0-128-57.6-128-128v-96.07c0-65.07 57.6-96 128-96h0c70.4 0 128 25.6 128 96V320c0 70.4-57.6 128-128 128z"}),o.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M179.43 143.52a49.08 49.08 0 0 1-3.43-15.73A80 80 0 0 1 255.79 48h.42A80 80 0 0 1 336 127.79a41.91 41.91 0 0 1-3.12 14.3"})),c=({visible:e,onClose:t})=>o.createElement("div",{className:(0,r.Z)("absolute","left-0","top-0","right-0","bottom-0",!e&&"opacity-0",e&&"opacity-100",!e&&"pointer-events-none",!e&&"w-0",!e&&"!h-0",!e&&"overflow-hidden",e&&"w-full",e&&"h-full","bg-gray-200","bg-opacity-10","backdrop-blur-sm","p-8","z-[4]")},o.createElement("div",{className:(0,r.Z)("absolute","left-1/2","top-1/2","max-w-sm","w-full","-translate-x-1/2","-translate-y-1/2","rounded","bg-gray-0","shadow-md","p-4","border","border-gray-100")},o.createElement("form",{className:(0,r.Z)("flex","flex-col","gap-4"),onSubmit:e=>{e.preventDefault();const n=new FormData(e.currentTarget).get("email");console.log(n),t()}},o.createElement("div",{className:(0,r.Z)("text-gray-500","text-xs")},"Thank you for reporting this issue! We'll fix it as soon as possible. If you want to get notified when it's fixed, let us email you!"),o.createElement("input",{name:"email",type:"email",placeholder:"Your email address",className:(0,r.Z)("placeholder:text-gray-300","text-gray-700","py-2","px-2","rounded","border","border-gray-100","focus:outline-none","focus:ring","focus:ring-gray-50")}),o.createElement("div",{className:(0,r.Z)("flex","items-center","justify-between")},o.createElement("button",{type:"button",className:(0,r.Z)("py-2","px-3","rounded","transition-all","duration-200","ease-in-out","bg-transparent","hover:bg-gray-100","focus:bg-gray-100","text-gray-500"),onClick:()=>t()},"Cancel"),o.createElement("button",{type:"submit",className:(0,r.Z)("py-2","px-3","rounded","transition-all","duration-200","ease-in-out","text-gray-0","bg-refine-blue","hover:brightness-110","focus:brightness-75")},"Get Notified!"))))),p=({horizontalSize:e,onMouseDown:t})=>o.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:t,style:{left:`calc(${e}% - 5px)`}});function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){m(e,t,n[t])}))}return e}function g(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function h(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const v=e=>{var t;return"nextjs"===(null===(t=e)||void 0===t?void 0:t.template)?o.createElement(y,e):o.createElement(b,e)},b=e=>{var t,n,l,u,m,v,b,y,k,x,w,R,P,N,C,{startRoute:S,showNavigator:L,initialPercentage:O=50,dependencies:j,options:E={showTabs:!0,initMode:"lazy",classes:{"sp-cm":"p-0 bg-transparent"}},template:T="react-ts",customSetup:F,files:A,previewOnly:z,layout:M,height:D=420,wrapperClassName:q,className:I,showFiles:B=!1,showConsole:W=!1,hidePreview:G=!1}=e,U=h(e,["startRoute","showNavigator","initialPercentage","dependencies","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const{colorMode:Z}=(0,s.I)();var H,Q;null!=E||(E={}),null!==(H=(N=E).resizablePanels)&&void 0!==H||(N.resizablePanels=!0),null!==(Q=(C=E).editorWidthPercentage)&&void 0!==Q||(C.editorWidthPercentage=null!=O?O:50);const Y={showTabs:E.showTabs,showLineNumbers:E.showLineNumbers,showInlineErrors:E.showInlineErrors,wrapContent:E.wrapContent,closableTabs:E.closableTabs,initMode:E.initMode,extensions:null===(t=E.codeEditor)||void 0===t?void 0:t.extensions,extensionsKeymap:null===(n=E.codeEditor)||void 0===n?void 0:n.extensionsKeymap,readOnly:E.readOnly,showReadOnly:E.showReadOnly,additionalLanguages:null===(l=E.codeEditor)||void 0===l?void 0:l.additionalLanguages},$={activeFile:E.activeFile,visibleFiles:E.visibleFiles,recompileMode:E.recompileMode,recompileDelay:E.recompileDelay,autorun:E.autorun,autoReload:E.autoReload,bundlerURL:E.bundlerURL,startRoute:E.startRoute,skipEval:E.skipEval,fileResolver:E.fileResolver,initMode:E.initMode,initModeObserverOptions:E.initModeObserverOptions,externalResources:E.externalResources,logLevel:E.logLevel,classes:E.classes},[_,V]=o.useState(!1),{onHandleMouseDown:X,horizontalSize:J}=(({initialSize:e=50})=>{const[t,n]=o.useState(e),r=o.useRef(null),i=e=>{if(!r.current)return;const t=r.current.parentElement;if(!t)return;const{left:o,width:i}=t.getBoundingClientRect(),a=(e.clientX-o)/i*100,s=Math.min(Math.max(a,25),75);n(s),t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},a=()=>{var e;const t=null===(e=r.current)||void 0===e?void 0:e.parentElement;t&&(t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return o.useEffect((()=>(document.body.addEventListener("mousemove",i),document.body.addEventListener("mouseup",a),()=>{document.body.removeEventListener("mousemove",i),document.body.removeEventListener("mouseup",a)})),[]),{horizontalSize:t,onHandleMouseDown:o.useCallback((e=>{r.current=e.target}),[])}})({initialSize:E.editorWidthPercentage}),K=!z&&!(null===(m=M)||void 0===m||null===(u=m.includes)||void 0===u?void 0:u.call(m,"col"));var ee,te,ne,re,oe,ie;return o.createElement(o.Fragment,null,o.createElement("div",{className:(0,r.Z)("pb-6",q)},o.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",I)},o.createElement(a.oT,f({key:T,customSetup:f({dependencies:j},F),files:A,options:$,template:T,theme:"light"===Z?g(f({},a.dN),{colors:g(f({},a.dN.colors),{surface1:"#F4F8FB",surface2:"rgb(222, 229, 237)",surface3:"rgb(222, 229, 237)"})}):g(f({},i.I2),{colors:g(f({},i.I2.colors),{surface1:"#1D1E30",surface2:"#303450",surface3:"#303450"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl")},U),o.createElement(a.sp,{className:(0,r.Z)("col"===M&&"!flex-col","col-reverse"===M&&"!flex-col-reverse")},B&&o.createElement(a.Lj,{autoHiddenFiles:!0,style:{height:null!==(ee=E.editorHeight)&&void 0!==ee?ee:D}}),!z&&o.createElement(a._V,g(f({},Y),{initMode:"lazy",style:g(f({height:null!==(te=E.editorHeight)&&void 0!==te?te:D},(null===(b=M)||void 0===b||null===(v=b.includes)||void 0===v?void 0:v.call(b,"col"))?{flex:"initial"}:{flexGrow:J,flexShrink:J,flexBasis:0}),{overflow:"hidden"})})),W?o.createElement(a.Tq,{style:g(f({height:null!==(ne=E.editorHeight)&&void 0!==ne?ne:D},(null===(k=M)||void 0===k||null===(y=k.includes)||void 0===y?void 0:y.call(k,"col"))?{flex:"initial"}:{flexGrow:J,flexShrink:J,flexBasis:0}),{overflow:"hidden"})}):null,K?o.createElement(p,{onMouseDown:X,horizontalSize:J}):null,o.createElement(a.Gj,{actionsChildren:o.createElement(d,{onClick:()=>V(!0)}),startRoute:S,showNavigator:null!=L?L:E.showNavigator,showRefreshButton:E.showRefreshButton,style:g(f({display:G?"none":"flex"},(null===(w=M)||void 0===w||null===(x=w.includes)||void 0===x?void 0:x.call(w,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-J,flexShrink:100-J,flexBasis:0,width:z?"100%":100-J+"%"}),{gap:0,height:null!==(re=E.editorHeight)&&void 0!==re?re:D})},o.createElement("div",{className:"sp-custom-loading"},o.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))),o.createElement(c,{visible:_,onClose:()=>V(!1)})))),o.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(oe=E.editorHeight)&&void 0!==oe?oe:D)+2}}),o.createElement("div",{className:(0,r.Z)((null===(P=M)||void 0===P||null===(R=P.includes)||void 0===R?void 0:R.call(P,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(ie=E.editorHeight)&&void 0!==ie?ie:D)+2}})),o.createElement("section",{className:"hidden max-w-0 max-h-0"},o.createElement("p",null,`Dependencies: ${Object.keys(null!=j?j:{}).map((e=>`${e}@${j[e]}`))}`),o.createElement("h3",null,"Code Files"),Object.keys(null!=A?A:{}).map((e=>o.createElement("div",{key:e},o.createElement("div",null,`File: ${e}`),o.createElement("div",null,`Content: ${"code"in A[e]?A[e].code:A[e]}`))))))},y=e=>{const t={hidePreview:!0};return o.createElement(b,g(f({},e,t),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},65530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>Y,default:()=>ne,frontMatter:()=>Q,metadata:()=>$,toc:()=>V});var r=n(67294),o=n(3905),i=n(30697);function a(){return r.createElement(i.x,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router-v6":"latest","react-router-dom":"latest","react-router":"latest"},startRoute:"/my-products",files:{"/App.tsx":{code:s},"/style.css":{code:l,hidden:!0},"/pages/products/list.tsx":{code:d},"/pages/products/show.tsx":{code:u,active:!0}}})}const s='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport "./style.css";\n\nimport { ProductList } from "./pages/products/list.tsx";\nimport { ProductShow } from "./pages/products/show.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            // We\'re defining the routes and assigning them to an action of a resource\n            list: "/my-products",\n            show: "/my-products/:id",\n            // For sake of simplicity, we are not defining other routes here but the implementation is the same\n            // create: "/my-products/new",\n            // edit: "/my-products/:id/edit",\n            // clone: "/my-products/:id/clone",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n          <Route path="/my-products/:id" element={<ProductShow />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),l="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),d='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nexport const ProductList: React.FC = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { data, isLoading } = useList();\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {data?.data?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n'.trim(),u='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nexport const ProductShow: React.FC = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    queryResult: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({\n            to: {\n              resource: "products",\n              action: "list",\n            },\n          });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n'.trim();function c(){return r.createElement(i.x,{template:"nextjs",showFiles:!0,startRoute:"/my-products",files:{"/pages/_app.tsx":{code:m},"/style.css":{code:p,hidden:!0},"/pages/my-products/index.tsx":{code:f},"/pages/my-products/[id].tsx":{code:g,active:!0}}})}const p="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label,\nform input,\nform button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),m='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nimport "../style.css";\n\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "products",\n          // We\'re defining the routes and assigning them to an action of a resource\n          list: "/my-products",\n          show: "/my-products/:id",\n          // For sake of simplicity, we are not defining other routes here but the implementation is the same\n          // create: "/my-products/new",\n          // edit: "/my-products/:id/edit",\n          // clone: "/my-products/:id/clone",\n        },\n      ]}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n\nexport default App;\n'.trim(),f='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nconst ProductList = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { data, isLoading } = useList();\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {data?.data?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ProductList;\n'.trim(),g='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nconst ProductShow = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    queryResult: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({ to: { resource: "products", action: "list" } });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n\nexport default ProductShow;\n'.trim();function h(){return r.createElement(i.x,{hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest","react-router-dom":"latest","react-router":"latest"},files:{"/app/root.tsx":{code:v},"/app/routes/my-products._index.tsx":{code:b},"/app/routes/my-products.$id.tsx":{code:y,active:!0}}})}const v='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "products",\n              // We\'re defining the routes and assigning them to an action of a resource\n              list: "/my-products",\n              show: "/my-products/:id",\n              // For sake of simplicity, we are not defining other routes here but the implementation is the same\n              // create: "/my-products/new",\n              // edit: "/my-products/:id/edit",\n              // clone: "/my-products/:id/clone",\n            },\n          ]}\n        >\n          <Outlet />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),b='\nimport { useGo, useList } from "@refinedev/core";\nimport React from "react";\n\nconst ProductList = () => {\n  // We\'re inferring the resource from the route\n  // So we call `useList` hook without any arguments.\n  // const { ... } = useList({ resource: "products" })\n  const { data, isLoading } = useList();\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {data?.data?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "show",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            show\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ProductList;\n'.trim(),y='\nimport React from "react";\n\nimport { useGo, useShow } from "@refinedev/core";\n\nconst ProductShow = () => {\n  // We\'re inferring the resource and the id from the route params\n  // So we can call useShow hook without any arguments.\n  // const result = useShow({ resource: "products", id: "xxx" })\n  const result = useShow();\n\n  const {\n    queryResult: { data, isLoading },\n  } = result;\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <div>\n        <h1>{data?.data?.name}</h1>\n        <p>Material: {data?.data?.material}</p>\n        <small>ID: {data?.data?.id}</small>\n      </div>\n      <button\n        onClick={() => {\n          go({ to: { resource: "products", action: "list" } });\n        }}\n      >\n        Go to Products list\n      </button>\n    </>\n  );\n};\n\nexport default ProductShow;\n'.trim();function k(){return r.createElement(i.x,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router-v6":"latest","react-router-dom":"latest","react-router":"latest"},startRoute:"/my-products",files:{"/App.tsx":{code:x,hidden:!0},"/style.css":{code:w,hidden:!0},"list.tsx":{code:R},"edit.tsx":{code:P,active:!0}}})}const x='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport "./style.css";\n\nimport { ProductEdit } from "./edit.tsx";\nimport { ProductList } from "./list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n            edit: "/my-products/:id/edit",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n          <Route path="/my-products/:id/edit" element={<ProductEdit />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),w="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),R='\nimport React from "react";\n\nimport { useGo, useList } from "@refinedev/core";\n\nexport const ProductList: React.FC = () => {\n  const { data, isLoading } = useList();\n\n  const go = useGo();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <ul>\n      {data?.data?.map((product) => (\n        <li key={product.id}>\n          <span>{product.name}</span>\n          <button\n            onClick={() => {\n              go({\n                to: {\n                  resource: "products",\n                  action: "edit",\n                  id: product.id,\n                },\n              });\n            }}\n          >\n            edit\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n'.trim(),P='\nimport React from "react";\n\nimport { useForm } from "@refinedev/core";\n\nexport const ProductEdit: React.FC = () => {\n  const { formLoading, onFinish, queryResult } = useForm();\n  const defaultValues = queryResult?.data?.data;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const data = Object.fromEntries(new FormData(e.target).entries());\n\n    onFinish(data);\n  };\n\n  return (\n    <div>\n      <br />\n      <form onSubmit={onSubmit}>\n        <div>\n          <label htmlFor="name">name</label>\n          <input\n            type="text"\n            id="name"\n            name="name"\n            placeholder="name"\n            defaultValue={defaultValues?.name}\n          />\n        </div>\n        <button type="submit" disabled={formLoading}>\n          <span>Save</span>\n        </button>\n      </form>\n    </div>\n  );\n};\n'.trim();function N(){return r.createElement(i.x,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router-v6":"latest","react-router-dom":"latest","react-router":"latest"},startRoute:"/my-products",theme:{},files:{"/App.tsx":{code:C},"/style.css":{code:S,hidden:!0},"/pages/products/list.tsx":{code:L,active:!0},"/components/products/list.tsx":{code:O}}})}const C='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport "./style.css";\n\nimport { ListPage } from "./pages/products/list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n          },\n        ]}\n        options={{ syncWithLocation: true }}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ListPage />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),S="\nhtml {\n    margin: 0;\n    padding: 0;\n    font-size: 14px;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-bottom: 6px;\n}\nspan, button {\n    margin: 6px 0;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),L='\nimport React from "react";\n\nimport { useTable } from "@refinedev/core";\n\nimport { ProductList } from "../../components/products/list";\n\nexport const ListPage: React.FC = () => {\n  const tableProps = useTable({\n    pagination: { current: 1, pageSize: 2 },\n    filters: {\n      initial: [{ field: "category.id", operator: "eq", value: "1" }],\n    },\n    sorters: { initial: [{ field: "id", order: "asc" }] },\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n'.trim(),O='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    tableQueryResult,\n    isLoading,\n    current,\n    setCurrent,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {tableQueryResult.data?.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0].field}, order {sorters[0].order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0].order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0].field}, operator {filters[0].operator}, value\n        {filters[0].value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0].value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {current}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrent(current - 1);\n        }}\n        disabled={current < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrent(current + 1);\n        }}\n        disabled={current === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function j(){return r.createElement(i.x,{template:"nextjs",showFiles:!0,startRoute:"/my-products",files:{"/pages/_app.tsx":{code:E},"/pages/my-products/index.tsx":{code:T,active:!0},"/components/products/list.tsx":{code:F}}})}const E='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\nimport type { AppProps } from "next/app";\n\nfunction App({ Component, pageProps }: AppProps) {\n  return (\n    <Refine\n      routerProvider={routerProvider}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[\n        {\n          name: "products",\n          list: "/my-products",\n        },\n      ]}\n      options={{ syncWithLocation: true }}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n\nexport default App;\n'.trim(),T='\nimport React from "react";\n\nimport { useTable } from "@refinedev/core";\nimport { parseTableParams } from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { ProductList } from "../../components/products/list";\n\nexport const getServerSideProps = async (context) => {\n  const {\n    pagination: queryPagination,\n    filters: queryFilters,\n    sorters: querySorters,\n  } = parseTableParams(context.resolvedUrl?.split("?")[1] ?? "");\n\n  const pagination = {\n    current: queryPagination.current ?? 1,\n    pageSize: queryPagination.pageSize ?? 2,\n  };\n\n  const filters = queryFilters ?? [\n    {\n      field: "category.id",\n      operator: "eq",\n      value: "1",\n    },\n  ];\n\n  const sorters = querySorters ?? [{ field: "id", order: "asc" }];\n\n  const data = await dataProvider("https://api.fake-rest.refine.dev").getList({\n    resource: "products",\n    filters,\n    pagination,\n    sorters,\n  });\n\n  return {\n    props: {\n      initialData: data,\n      initialProps: { pagination, filters, sorters },\n    },\n  };\n};\n\nconst ProductListPage = (props) => {\n  const {\n    initialData,\n    initialProps: { filters, sorters, pagination },\n  } = props;\n\n  const tableProps = useTable({\n    queryOptions: { initialData },\n    filters: { initial: filters },\n    sorters: { initial: sorters },\n    pagination,\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n\nexport default ProductListPage;\n'.trim(),F='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    tableQueryResult,\n    isLoading,\n    current,\n    setCurrent,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {tableQueryResult.data?.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0]?.field}, order {sorters[0]?.order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0]?.order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0]?.field}, operator {filters[0]?.operator}, value:{" "}\n        {filters[0]?.value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0]?.value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {current}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrent(+current - 1);\n        }}\n        disabled={+current < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrent(+current + 1);\n        }}\n        disabled={current === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function A(){return r.createElement(i.x,{hidePreview:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/remix-router":"latest","react-router-dom":"latest","react-router":"latest"},files:{"/app/root.tsx":{code:z},"/app/components/products/list.tsx":{code:D},"/app/routes/my-products._index.tsx":{code:M,active:!0}}})}const z='\nimport React from "react";\n\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from "@remix-run/react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/nextjs-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nexport default function App() {\n  return (\n    <html lang="en">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Refine\n          routerProvider={routerProvider}\n          dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n          resources={[\n            {\n              name: "products",\n              list: "/my-products",\n            },\n          ]}\n        >\n          <Outlet />\n        </Refine>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n'.trim(),M='\nimport React from "react";\n\nimport { json, LoaderArgs } from "@remix-run/node";\nimport { useLoaderData } from "@remix-run/react";\n\nimport { useTable } from "@refinedev/core";\nimport { parseTableParams } from "@refinedev/remix-router";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { ProductList } from "../components/products/list";\n\nexport async function loader({ request }: LoaderArgs) {\n  const url = new URL(request.url);\n\n  const {\n    pagination: queryPagination,\n    filters: queryFilters,\n    sorters: querySorters,\n  } = parseTableParams(url.search);\n\n  const pagination = {\n    current: queryPagination.current ?? 1,\n    pageSize: queryPagination.pageSize ?? 2,\n  };\n\n  const filters = queryFilters ?? [\n    {\n      field: "category.id",\n      operator: "eq",\n      value: "1",\n    },\n  ];\n\n  const sorters = querySorters ?? [{ field: "id", order: "asc" }];\n\n  const data = await dataProvider("https://api.fake-rest.refine.dev").getList({\n    resource: "products",\n    filters,\n    pagination,\n    sorters,\n  });\n\n  return json({\n    initialData: data,\n    initialProps: { pagination, filters, sorters },\n  });\n}\n\nconst ProductList = () => {\n  const {\n    initialData,\n    initialProps: { filters, sorters, pagination },\n  } = useLoaderData<typeof loader>();\n  const tableProps = useTable({\n    queryOptions: { initialData },\n    filters: { initial: filters },\n    sorters: { initial: sorters },\n    pagination,\n  });\n\n  return <ProductList tableProps={tableProps} />;\n};\n\nexport default ProductList;\n'.trim(),D='\nimport React from "react";\n\nexport const ProductList: React.FC = ({ tableProps }) => {\n  const {\n    tableQueryResult,\n    isLoading,\n    current,\n    setCurrent,\n    pageSize,\n    pageCount,\n    filters,\n    setFilters,\n    sorters,\n    setSorters,\n  } = tableProps;\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <h3>Products</h3>\n      <table style={{ border: "1px solid black" }}>\n        <thead>\n          <tr key="header">\n            <td>id</td>\n            <td>name</td>\n            <td>categoryId</td>\n          </tr>\n        </thead>\n        <tbody>\n          {tableQueryResult.data?.data?.map((record) => (\n            <tr key={record.id}>\n              <td>{record.id}</td>\n              <td>{record.name}</td>\n              <td>{record.category.id}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      Sorting by field:\n      <b>\n        {sorters[0]?.field}, order {sorters[0]?.order}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setSorters([\n            {\n              field: "id",\n              order: sorters[0]?.order === "asc" ? "desc" : "asc",\n            },\n          ]);\n        }}\n      >\n        Toggle Sort\n      </button>\n      <hr />\n      Filtering by field:\n      <b>\n        {filters[0]?.field}, operator {filters[0]?.operator}, value:{" "}\n        {filters[0]?.value}\n      </b>\n      <br />\n      <button\n        onClick={() => {\n          setFilters([\n            {\n              field: "category.id",\n              operator: "eq",\n              value: filters[0]?.value === "1" ? "2" : "1",\n            },\n          ]);\n        }}\n      >\n        Toggle Filter\n      </button>\n      <hr />\n      <p>Current Page: {current}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrent(+current - 1);\n        }}\n        disabled={+current < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrent(+current + 1);\n        }}\n        disabled={current === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n'.trim();function q(){return r.createElement(i.x,{showNavigator:!0,showFiles:!0,dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/react-router-v6":"latest","@refinedev/react-hook-form":"latest","react-router-dom":"latest","react-router":"latest"},startRoute:"/my-products",files:{"/App.tsx":{code:B},"/style.css":{code:W,hidden:!0},"/components/modal.tsx":{code:I},"/pages/products/list.tsx":{code:G,active:!0}}})}const I='\nimport React from "react";\n\nexport const Modal: React.FC = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      <div className="overlay" onClick={onClose}></div>\n      <div className="modal">\n        <div className="modal-title">\n          <button className="close-button" onClick={onClose}>\n            &times;\n          </button>\n        </div>\n        <div className="modal-content">{children}</div>\n      </div>\n    </>\n  );\n};\n'.trim(),B='\nimport React from "react";\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport "./style.css";\n\nimport { ProductList } from "./pages/products/list.tsx";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n        resources={[\n          {\n            name: "products",\n            list: "/my-products",\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/my-products" element={<ProductList />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n}\n'.trim(),W="\nhtml {\n    margin: 0;\n    padding: 0;\n}\nbody {\n    margin: 0;\n    padding: 12px;\n}\n* {\n    box-sizing: border-box;\n}\nbody {\n    font-family: sans-serif;\n}\n\n.overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, 0.7);\n    z-index: 1000;\n}\n\n.modal {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    z-index: 1000;\n    width: 75%;\n    overflow-y: auto;\n}\n\n.modal .modal-title {\n    display: flex;\n    justify-content: flex-end;\n    padding: 4px;\n}\n\n.modal .modal-content {\n    padding: 0px 16px 16px 16px;\n}\nform label, form input, form button {\n    display: block;\n    width: 100%;\n    margin-top: 3px;\n    margin-bottom: 3px;\n}\nspan + button {\n    margin-left: 6px;\n}\nul > li {\n    margin-bottom: 6px;\n}\n".trim(),G='\nimport React from "react";\n\nimport { useList } from "@refinedev/core";\nimport { useModalForm } from "@refinedev/react-hook-form";\n\nimport { Modal } from "../../components/modal.tsx";\n\nexport const ProductList: React.FC = () => {\n  const { data, isLoading } = useList();\n\n  const {\n    modal: { visible, close, show },\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    register,\n    saveButtonProps,\n  } = useModalForm({\n    refineCoreProps: { action: "edit" },\n    syncWithLocation: true,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <Modal isOpen={visible} onClose={close}>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div>\n            <label htmlFor="name">name</label>\n            <input {...register("name")} />\n          </div>\n          <button type="submit" {...saveButtonProps}>\n            <span>Save</span>\n          </button>\n        </form>\n      </Modal>\n      <ul>\n        {data?.data?.map((product) => (\n          <li key={product.id}>\n            <span>{product.name}</span>\n            <button\n              onClick={() => {\n                show(product.id);\n              }}\n            >\n              edit\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n'.trim();function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Z(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function H(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const Q={title:"Routing"},Y=void 0,$={unversionedId:"guides-concepts/routing/index",id:"guides-concepts/routing/index",title:"Routing",description:"Routing is essential for any CRUD application. refine's headless architecture allows you to use any router solution, without being locked into a specific router/framework.",source:"@site/docs/guides-concepts/routing/index.md",sourceDirName:"guides-concepts/routing",slug:"/guides-concepts/routing/",permalink:"/docs/guides-concepts/routing/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/guides-concepts/routing/index.md",tags:[],version:"current",lastUpdatedBy:"Necati \xd6zmen",lastUpdatedAt:1700559260,formattedLastUpdatedAt:"Nov 21, 2023",frontMatter:{title:"Routing"},sidebar:"someSidebar",previous:{title:"Forms",permalink:"/docs/guides-concepts/forms/"},next:{title:"Authentication",permalink:"/docs/guides-concepts/authentication/"}},_={},V=[{value:"Router Integrations",id:"router-integrations",level:2},{value:'Relationship Between Resources and Routes <GuideBadge id="guides-concepts/general-concepts" />',id:"relationship-between-resources-and-routes-",level:2},{value:"React Router",id:"react-router",level:4},{value:"Next.js",id:"nextjs",level:4},{value:"Remix",id:"remix",level:4},{value:"Hook Integrations",id:"hook-integrations",level:2},{value:"useForm",id:"useform",level:3},{value:"useTable",id:"usetable",level:3},{value:"React Router",id:"react-router-1",level:4},{value:"Next.js",id:"nextjs-1",level:4},{value:"Remix",id:"remix-1",level:4},{value:"useModalForm",id:"usemodalform",level:3},{value:"useOne",id:"useone",level:3},{value:"useShow",id:"useshow",level:3},{value:"useList",id:"uselist",level:3},{value:"The <code>routerProvider</code> Interface",id:"the-routerprovider-interface",level:2}],X=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},J=X("Tabs"),K=X("TabItem"),ee=X("GuideBadge"),te={toc:V};function ne(e){var{components:t}=e,n=H(e,["components"]);return(0,o.kt)("wrapper",Z(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){U(e,t,n[t])}))}return e}({},te,n),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Routing is essential for any CRUD application. ",(0,o.kt)("strong",{parentName:"p"},"refine"),"'s headless architecture allows you to use any router solution, without being locked into a specific router/framework."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," also offers built-in router integrations for the most popular frameworks such as ",(0,o.kt)("strong",{parentName:"p"},"React Router"),", ",(0,o.kt)("strong",{parentName:"p"},"Next.js")," and ",(0,o.kt)("strong",{parentName:"p"},"Remix"),"."),(0,o.kt)("p",null,"These integrations makes it easier to use ",(0,o.kt)("strong",{parentName:"p"},"refine")," with these frameworks and offers a lot of benefits such as:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Automatic parameter detection in hooks/components."),(0,o.kt)("li",{parentName:"ul"},"Automatic redirections after mutation or authentication."),(0,o.kt)("li",{parentName:"ul"},"Set of utility components & hooks which can be used to navigate between pages/routes.")),(0,o.kt)("p",null,"Since ",(0,o.kt)("strong",{parentName:"p"},"refine")," is router agnostic, you are responsible for creating your own routes."),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("strong",{parentName:"p"},"React Router"),", you'll be defining your routes under the ",(0,o.kt)("inlineCode",{parentName:"p"},"Routes")," component.",(0,o.kt)("br",null),"\nIf you are using ",(0,o.kt)("strong",{parentName:"p"},"Next.js"),", you'll be defining your routes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"pages")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"app")," directory.",(0,o.kt)("br",null),"\nIf you are using ",(0,o.kt)("strong",{parentName:"p"},"Remix"),", you'll be defining your routes in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app/routes")," directory."),(0,o.kt)("h2",{id:"router-integrations"},"Router Integrations"),(0,o.kt)("p",null,"To integrate a router provider with ",(0,o.kt)("strong",{parentName:"p"},"refine"),", all you need to do is to import the router integration of your choice and pass it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"routerProvider")," prop."),(0,o.kt)(J,{mdxType:"Tabs"},(0,o.kt)(K,{value:"react-router-v6",label:"React Router v6",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { BrowserRouter, Routes } from "react-router-dom";\n// highlight-next-line\nimport routerProvider from "@refinedev/react-router-v6";\n\nconst App = () => (\n  <BrowserRouter>\n    // highlight-next-line\n    <Refine routerProvider={routerProvider}>\n      <Routes>{/* Your route definitions */}</Routes>\n    </Refine>\n  </BrowserRouter>\n);\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/routers/react-router-v6"},"Check out React Router documentation for detailed information"))),(0,o.kt)(K,{value:"next-js",label:"Next.js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/_app.tsx"',title:'"pages/_app.tsx"'},'// highlight-next-line\nimport routerProvider from "@refinedev/nextjs-router";\n\nexport function MyApp({ Component, pageProps }) {\n  return (\n    <Refine\n      // highlight-next-line\n      routerProvider={routerProvider}\n    >\n      <Component {...pageProps} />\n    </Refine>\n  );\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"While using this integration, you won't be missing out Next.js features such as ",(0,o.kt)("strong",{parentName:"p"},"SSR")," and ",(0,o.kt)("strong",{parentName:"p"},"ISR"),".")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/routers/nextjs"},"Check out Next.js Router documentation for detailed information"))),(0,o.kt)(K,{value:"remix",label:"Remix",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/root.tsx"',title:'"app/root.tsx"'},'// highlight-next-line\nimport routerProvider from "@refinedev/remix-router";\n\nexport default function App() {\n  return (\n    <html>\n      <body>\n        <Refine\n          // highlight-next-line\n          routerProvider={routerProvider}\n        >\n          <Outlet />\n        </Refine>\n      </body>\n    </html>\n  );\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"While using this integration, you won't be missing out Remix features such as ",(0,o.kt)("strong",{parentName:"p"},"SSR")," and ",(0,o.kt)("strong",{parentName:"p"},"ISR"),".")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/routers/remix"},"Check out Remix Router documentation for detailed information"))),(0,o.kt)(K,{value:"expo-router",label:"Expo Router (React Native)",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n// highlight-next-line\nimport routerProvider from "@refinenative/expo-router";\n\nexport const App = () => (\n  <Refine\n    // highlight-next-line\n    routerProvider={routerProvider}\n  >\n    {/* ... */}\n  </Refine>\n);\n')),(0,o.kt)("p",null,"refine is able to work on React Native apps and with the help of the community package ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinenative/expo-router"),", you can use refine's routing features on React Native as well."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@refinenative/expo-router"},"Check out Expo Router (Community Package) documentation for detailed information")))),(0,o.kt)("p",null,"Once you passed router provider to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />")," component, you can use all the features of refine in a same way, regardless of your application's framework/router."),(0,o.kt)("h2",{id:"relationship-between-resources-and-routes-"},"Relationship Between Resources and Routes ",(0,o.kt)(ee,{id:"guides-concepts/general-concepts",mdxType:"GuideBadge"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"refine")," can infer current ",(0,o.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"action")," and it's ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," from the ",(0,o.kt)("strong",{parentName:"p"},"current route")," based on your ",(0,o.kt)("strong",{parentName:"p"},"resource definitions"),"."),(0,o.kt)("p",null,"This eliminates the need of passing these parameters to the components/hooks manually."),(0,o.kt)("p",null,"All you have to do is to define your resource and their routes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'<Refine\n  resources={[\n    {\n      name: "products",\n      list: "/my-products", // http://localhost:3000/my-products\n      show: "my-products/:id", // http://localhost:3000/my-products/1\n      create: "/my-products/new", // http://localhost:3000/my-products/new\n      edit: "/my-products/:id/edit", // http://localhost:3000/my-products/1/edit\n      clone: "/my-products/:id/clone", // http://localhost:3000/my-products/1/clone\n    },\n  ]}\n/>\n')),(0,o.kt)("p",null,"You can see how we omit ",(0,o.kt)("strong",{parentName:"p"},"resource")," and ",(0,o.kt)("strong",{parentName:"p"},"id")," parameters for ",(0,o.kt)("inlineCode",{parentName:"p"},"useList"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"useShow")," hooks in the examples below."),(0,o.kt)("h4",{id:"react-router"},"React Router"),(0,o.kt)(a,{mdxType:"ReactRouterResourceAndRoutesUsage"}),(0,o.kt)("h4",{id:"nextjs"},"Next.js"),(0,o.kt)(c,{mdxType:"NextJSResourceAndRoutesUsage"}),(0,o.kt)("admonition",{title:"Usage with App Router",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can see the example here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/examples/with-nextjs-appdir"},"https://github.com/refinedev/refine/tree/master/examples/with-nextjs-appdir"))),(0,o.kt)("h4",{id:"remix"},"Remix"),(0,o.kt)(h,{mdxType:"RemixResourceAndRoutesUsage"}),(0,o.kt)("h2",{id:"hook-integrations"},"Hook Integrations"),(0,o.kt)("h3",{id:"useform"},"useForm"),(0,o.kt)("p",null,"Router integration of ",(0,o.kt)("strong",{parentName:"p"},"refine")," allows you to use ",(0,o.kt)("inlineCode",{parentName:"p"},"useForm")," without passing ",(0,o.kt)("strong",{parentName:"p"},"resource"),", ",(0,o.kt)("strong",{parentName:"p"},"id")," and ",(0,o.kt)("strong",{parentName:"p"},"action")," parameters.\nIt will also redirect you to resource's action route defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect")," prop. ",(0,o.kt)("inlineCode",{parentName:"p"},"redirect")," prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"list")," by default."),(0,o.kt)(k,{mdxType:"ReactRouterUseFormUsage"}),(0,o.kt)("h3",{id:"usetable"},"useTable"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," can synchronize it's parameters (filters, pagination, sorting) with the current route."),(0,o.kt)("p",null,"To enable synchronization, you need to pass ",(0,o.kt)("inlineCode",{parentName:"p"},"syncWithLocation: true")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />")," component's ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"<Refine {...} options={{ syncWithLocation: true }}>\n\n")),(0,o.kt)("p",null,"Once you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"syncWithLocation: true")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine />")," component's ",(0,o.kt)("inlineCode",{parentName:"p"},"options")," prop, ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," will:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Read the current route and update it's parameters (filters, pagination, sorting) accordingly."),(0,o.kt)("li",{parentName:"ul"},"Update the current route when it's parameters (filters, pagination, sorting) change.")),(0,o.kt)("p",null,"Let's say we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"products")," list page with the following route:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/my-products\n")),(0,o.kt)("p",null,"And we want to filter products by ",(0,o.kt)("inlineCode",{parentName:"p"},"category.id")," and sort them by ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"asc")," order."),(0,o.kt)("p",null,"We can pass these parameters to ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," hook as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const { ... } = useTable(\n    {\n        current: 1,\n        pageSize: 2,\n        filters: { initial: [{ field: "category.id", operator: "eq", value: 1 }]},\n        sorters: { initial: [{ field: "id", direction: "asc" }] }\n    }\n);\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," will automatically update the route to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=http://localhost:3000/my-products",title:"http://localhost:3000/my-products"},"// removed-line\n/my-products\n\n// added-line\n/my-products?current=1&pageSize=2&sorters[0][field]=id&sorters[0][order]=asc&filters[0][field]=category.id&filters[0][operator]=eq&filters[0][value]=1\n")),(0,o.kt)("p",null,"And you will see a list of products, already ",(0,o.kt)("strong",{parentName:"p"},"filtered"),", ",(0,o.kt)("strong",{parentName:"p"},"sorted")," and ",(0,o.kt)("strong",{parentName:"p"},"paginated")," automatically based on the query parameters of the ",(0,o.kt)("strong",{parentName:"p"},"current route"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const { tableQueryResult, current, pageSize, filters, sorters } = useTable();\n\nconsole.log(tableQueryResult.data.data); // [{...}, {...}]\nconsole.log(tableQueryResult.data.total); // 32 - total number of unpaginated records\nconsole.log(current); // 1 - current page\nconsole.log(pageSize); // 2 - page size\nconsole.log(filters); // [{ field: "category.id", operator: "eq", value: "1" }]\nconsole.log(sorters); // [{ field: "id", order: "asc" }]\n')),(0,o.kt)("p",null,"Check the examples below to see how you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"useTable")," with router integration."),(0,o.kt)("p",null,"Notice how ",(0,o.kt)("inlineCode",{parentName:"p"},"components/products/list.tsx")," is the same, regardless of the router integration."),(0,o.kt)("h4",{id:"react-router-1"},"React Router"),(0,o.kt)(N,{mdxType:"ReactRouterUseTableUsage"}),(0,o.kt)("h4",{id:"nextjs-1"},"Next.js"),(0,o.kt)("p",null,"You can use SSR feature with Next.js to fetch initial data on the server side."),(0,o.kt)(j,{mdxType:"NextJSUseTableUsage"}),(0,o.kt)("h4",{id:"remix-1"},"Remix"),(0,o.kt)("p",null,"You can use SSR feature with Remix to fetch initial data on the server side."),(0,o.kt)(A,{mdxType:"RemixUseTableUsage"}),(0,o.kt)("h3",{id:"usemodalform"},"useModalForm"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useModalForm")," can automatically detect ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," parameter from the current route."),(0,o.kt)("p",null,"It can also sync it's parameters with the current route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const { ... } = useModalForm({ syncWithLocation: true })\n")),(0,o.kt)("p",null,"Once the modal is visible, current route will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/my-products?modal-products-edit[open]=true&modal-products-edit[id]=1\n")),(0,o.kt)("p",null,"You can see the example below for usage."),(0,o.kt)(q,{mdxType:"ReactRouterUseModalFormUsage"}),(0,o.kt)("h3",{id:"useone"},"useOne"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useOne")," can automatically detect ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," parameters from the current route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/show.tsx",title:"components/products/show.tsx"},'import { useOne } from "@refinedev/core";\n\n// removed-line\nconst { data: productResponse } = useOne({ resource: "products", id: "1" });\n\nconsole.log(productResponse.data); // { id: "1", title: "Product 1", ... }\n\n// added-line\nconst { data: productResponse } = useOne();\n\nconsole.log(productResponse.data); // { id: "1", title: "Product 1", ... }\n')),(0,o.kt)("h3",{id:"useshow"},"useShow"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useShow")," can automatically detect ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," parameters from the current route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/show.tsx",title:"components/products/show.tsx"},'import { useShow } from "@refinedev/core";\n\nconst { queryResult: showResponse } = useShow({\n  // removed-start\n  resource: "products",\n  id: "1",\n  // removed-end\n});\n\nconsole.log(showResponse.data.data); // { id: "1", title: "Product 1", ... }\n\n// added-line\nconst { queryResult: showResponse } = useShow();\n\nconsole.log(showResponse.data.data); // { id: "1", title: "Product 1", ... }\n')),(0,o.kt)("h3",{id:"uselist"},"useList"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"useList")," can automatically detect ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," parameter from the current route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=components/products/list.tsx",title:"components/products/list.tsx"},'import { useList } from "@refinedev/core";\n\n// removed-line\nconst { data: listResponse } = useList({ resource: "products" });\n\nconsole.log(listResponse.data); // [{ id: "1", title: "Product 1", ... }, { id: "2", title: "Product 2", ... }]\nconsole.log(listResponse.total); // 32 - total number of unpaginated records\n\n// added-line\nconst { data: listResponse } = useList();\n\nconsole.log(listResponse.data); // [{ id: "1", title: "Product 1", ... }, { id: "2", title: "Product 2", ... }]\nconsole.log(listResponse.total); // 32 - total number of unpaginated records\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"config.pagination"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"config.filters"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"config.sorters")," will not be automatically detected from the current route.")),(0,o.kt)("h2",{id:"the-routerprovider-interface"},"The ",(0,o.kt)("inlineCode",{parentName:"h2"},"routerProvider")," Interface"),(0,o.kt)("p",null,"A router integration of refine consists of a set of basic implementations for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ability to navigate between pages/routes"),(0,o.kt)("li",{parentName:"ul"},"An interface to interact with the parameters and query strings of the current route"),(0,o.kt)("li",{parentName:"ul"},"An utility to navigate back in the history"),(0,o.kt)("li",{parentName:"ul"},"A simple component to use for anchor tags")),(0,o.kt)("p",null,"These implementations will be provided via ",(0,o.kt)("inlineCode",{parentName:"p"},"routerProvider")," which expects an object with the following methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"go"),": A function that accepts an object and returns a function that handles the navigation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"back"),": A function that returns a function that handles the navigation back in the history."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parse"),": A function that returns a function that parses the current route and returns an object."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Link"),": A React component that accepts a ",(0,o.kt)("inlineCode",{parentName:"li"},"to")," prop and renders a component that handles the navigation to the given ",(0,o.kt)("inlineCode",{parentName:"li"},"to")," prop.")),(0,o.kt)("p",null,"While all these methods are optional, if you're working on creating a custom router integration, you'll be able to incrementally add more features and adopt more of refine's features by implementing more of these methods."),(0,o.kt)("p",null,"To learn more about the ",(0,o.kt)("inlineCode",{parentName:"p"},"routerProvider")," interface, check out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/core/providers/router-provider/index"},(0,o.kt)("inlineCode",{parentName:"a"},"Router Provider")," section of the Core API Reference"),"."))}ne.isMDXComponent=!0}}]);