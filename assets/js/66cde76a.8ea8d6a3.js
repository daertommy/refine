"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[18110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=o,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24672:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>p,toc:()=>m});n(67294);var r=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={id:"useStepsForm",title:"useStepsForm"},l=void 0,p={unversionedId:"api-reference/antd/hooks/form/useStepsForm",id:"version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm",title:"useStepsForm",description:"useStepsForm hook allows you to split your form under an Ant Design based Steps component and provides you with a few useful functionalities that will help you manage your form.",source:"@site/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useStepsForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useStepsForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/versioned_docs/version-3.xx.xx/api-reference/antd/hooks/form/useStepsForm.md",tags:[],version:"3.xx.xx",lastUpdatedBy:"\xd6mer Faruk APLAK",lastUpdatedAt:1694709258,formattedLastUpdatedAt:"Sep 14, 2023",frontMatter:{id:"useStepsForm",title:"useStepsForm"},sidebar:"someSidebar",previous:{title:"useModalForm",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/form/useModalForm"},next:{title:"useImport",permalink:"/docs/3.xx.xx/api-reference/antd/hooks/import/useImport"}},u={},m=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>defaultCurrent</code>",id:"defaultcurrent",level:3},{value:"<code>total</code>",id:"total",level:3},{value:"<code>isBackValidate</code>",id:"isbackvalidate",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>stepsProps</code>",id:"stepsprops",level:3},{value:"<code>current</code>",id:"current",level:4},{value:"<code>onChange</code>",id:"onchange",level:4},{value:"<code>current</code>",id:"current-1",level:3},{value:"<code>gotoStep</code>",id:"gotostep",level:3},{value:"<code>submit</code>",id:"submit",level:3},{value:"<code>defaultFormValuesLoading</code>",id:"defaultformvaluesloading",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Return Values",id:"return-values-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Example",id:"example",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=d("Tabs"),f=d("TabItem"),k=d("PropsTable"),g=d("CodeSandboxExample"),h={toc:m};function b(e){var{components:t}=e,n=s(e,["components"]);return(0,r.kt)("wrapper",a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){o(e,t,n[t])}))}return e}({},h,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'import { useMany } from "@pankod/refine-core";\n\nimport {\n    List,\n    Table,\n    TextField,\n    useTable,\n    Space,\n    EditButton,\n    Select as AntdSelect,\n    useStepsForm as useStepsFormAntd,\n    useSelect as useSelectAntd,\n    Input as AntdInput,\n    Form as AntdForm,\n    Steps as AntdSteps,\n    SaveButton as AntdSaveButton,\n    Edit as AntdEdit,\n    Create as AntdCreate,\n    Button as AntdButton,\n} from "@pankod/refine-antd";\n\nconst PostList = () => {\n    const { tableProps } = useTable<IPost>();\n\n    const categoryIds =\n        tableProps?.dataSource?.map((item) => item.category.id) ?? [];\n    const { data, isLoading } = useMany({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="Category"\n                    render={(value) => {\n                        if (isLoading) {\n                            return <TextField value="Loading..." />;\n                        }\n\n                        return (\n                            <TextField\n                                value={\n                                    data?.data.find((item) => item.id === value)\n                                        ?.title\n                                }\n                            />\n                        );\n                    }}\n                />\n                <Table.Column\n                    title="Actions"\n                    dataIndex="actions"\n                    render={(_, record) => (\n                        <Space>\n                            <EditButton\n                                hideText\n                                size="small"\n                                recordItemId={record.id}\n                            />\n                        </Space>\n                    )}\n                />\n            </Table>\n        </List>\n    );\n};\n\nconst PostEdit = () => {\n    const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n        useStepsFormAntd();\n\n    const { selectProps: categorySelectProps } = useSelectAntd({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <AntdForm.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdInput />\n            </AntdForm.Item>\n            <AntdForm.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdSelect {...categorySelectProps} />\n            </AntdForm.Item>\n            <AntdForm.Item\n                label="Status"\n                name="status"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdSelect\n                    options={[\n                        {\n                            label: "Published",\n                            value: "published",\n                        },\n                        {\n                            label: "Draft",\n                            value: "draft",\n                        },\n                        {\n                            label: "Rejected",\n                            value: "rejected",\n                        },\n                    ]}\n                />\n            </AntdForm.Item>\n        </>,\n        <>\n            <AntdForm.Item\n                label="Content"\n                name="content"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdInput.TextArea />\n            </AntdForm.Item>\n        </>,\n    ];\n\n    return (\n        <AntdEdit\n            footerButtons={\n                <>\n                    {current > 0 && (\n                        <AntdButton\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </AntdButton>\n                    )}\n                    {current < formList.length - 1 && (\n                        <AntdButton\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </AntdButton>\n                    )}\n                    {current === formList.length - 1 && (\n                        <AntdSaveButton {...saveButtonProps} />\n                    )}\n                </>\n            }\n        >\n            <AntdSteps {...stepsProps}>\n                <AntdSteps.Step title="About Post" />\n                <AntdSteps.Step title="Content" />\n            </AntdSteps>\n\n            <AntdForm\n                {...formProps}\n                layout="vertical"\n                style={{ marginTop: 30 }}\n            >\n                {formList[current]}\n            </AntdForm>\n        </AntdEdit>\n    );\n};\n\nconst PostCreate = () => {\n    const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n        useStepsFormAntd();\n\n    const { selectProps: categorySelectProps } = useSelectAntd({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <AntdForm.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdInput />\n            </AntdForm.Item>\n            <AntdForm.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdSelect {...categorySelectProps} />\n            </AntdForm.Item>\n            <AntdForm.Item\n                label="Status"\n                name="status"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdSelect\n                    options={[\n                        {\n                            label: "Published",\n                            value: "published",\n                        },\n                        {\n                            label: "Draft",\n                            value: "draft",\n                        },\n                        {\n                            label: "Rejected",\n                            value: "rejected",\n                        },\n                    ]}\n                />\n            </AntdForm.Item>\n        </>,\n        <>\n            <AntdForm.Item\n                label="Content"\n                name="content"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <AntdInput.TextArea />\n            </AntdForm.Item>\n        </>,\n    ];\n\n    return (\n        <AntdCreate\n            footerButtons={\n                <>\n                    {current > 0 && (\n                        <AntdButton\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </AntdButton>\n                    )}\n                    {current < formList.length - 1 && (\n                        <AntdButton\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </AntdButton>\n                    )}\n                    {current === formList.length - 1 && (\n                        <AntdSaveButton {...saveButtonProps} />\n                    )}\n                </>\n            }\n        >\n            <AntdSteps {...stepsProps}>\n                <AntdSteps.Step title="About Post" />\n                <AntdSteps.Step title="Content" />\n            </AntdSteps>\n\n            <AntdForm\n                {...formProps}\n                layout="vertical"\n                style={{ marginTop: 30 }}\n            >\n                {formList[current]}\n            </AntdForm>\n        </AntdCreate>\n    );\n};\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook allows you to split your form under an Ant Design based ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/steps/"},"Steps")," component and provides you with a few useful functionalities that will help you manage your form."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook is extended from ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," under the hood. This means that you can use all the functionalities of ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm"),".")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"We'll do two examples, one for creating and one for editing a post. Let's see how ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," is used in both."),(0,r.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"}],mdxType:"Tabs"},(0,r.kt)(f,{value:"create",mdxType:"TabItem"},(0,r.kt)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/create previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/create",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/create"]);\n\n// visible-block-start\nimport React from "react";\nimport { IResourceComponentsProps, HttpError } from "@pankod/refine-core";\n\nimport {\n    Create,\n    Form,\n    Input,\n    Select,\n    Button,\n    SaveButton,\n    useSelect,\n    useStepsForm,\n    Steps,\n} from "@pankod/refine-antd";\n\nconst { Step } = Steps;\n\nconst PostCreatePage: React.FC<IResourceComponentsProps> = () => {\n    const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n        useStepsForm<IPost, HttpError, IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<\n        ICategory,\n        HttpError\n    >({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n            <Form.Item\n                label="Status"\n                name="status"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select\n                    options={[\n                        {\n                            label: "Published",\n                            value: "published",\n                        },\n                        {\n                            label: "Draft",\n                            value: "draft",\n                        },\n                        {\n                            label: "Rejected",\n                            value: "rejected",\n                        },\n                    ]}\n                />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Content"\n                name="content"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Create\n            footerButtons={\n                <>\n                    {current > 0 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                    {current < formList.length - 1 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </Button>\n                    )}\n                    {current === formList.length - 1 && (\n                        <SaveButton {...saveButtonProps} />\n                    )}\n                </>\n            }\n        >\n            <Steps {...stepsProps}>\n                <Step title="About Post" />\n                <Step title="Content" />\n            </Steps>\n\n            <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n                {formList[current]}\n            </Form>\n        </Create>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n            create: PostCreatePage,\n            edit: PostEdit,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,r.kt)(f,{value:"edit",mdxType:"TabItem"},(0,r.kt)("p",null,"Here is the final result of the form: We will explain the code in following sections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/posts/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\n// visible-block-start\nimport React from "react";\nimport { IResourceComponentsProps, HttpError } from "@pankod/refine-core";\n\nimport {\n    Edit,\n    Form,\n    Input,\n    Select,\n    Button,\n    SaveButton,\n    useSelect,\n    useStepsForm,\n    Steps,\n} from "@pankod/refine-antd";\n\nconst { Step } = Steps;\n\nconst PostEditPage: React.FC<IResourceComponentsProps> = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n    } = useStepsForm<IPost, HttpError, IPost>();\n\n    const postData = queryResult?.data?.data;\n    const { selectProps: categorySelectProps } = useSelect<\n        ICategory,\n        HttpError\n    >({\n        resource: "categories",\n        defaultValue: postData?.category.id,\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n            <Form.Item\n                label="Status"\n                name="status"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select\n                    options={[\n                        {\n                            label: "Published",\n                            value: "published",\n                        },\n                        {\n                            label: "Draft",\n                            value: "draft",\n                        },\n                        {\n                            label: "Rejected",\n                            value: "rejected",\n                        },\n                    ]}\n                />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Content"\n                name="content"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input.TextArea />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Edit\n            footerButtons={\n                <>\n                    {current > 0 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                    {current < formList.length - 1 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </Button>\n                    )}\n                    {current === formList.length - 1 && (\n                        <SaveButton {...saveButtonProps} />\n                    )}\n                </>\n            }\n        >\n            <Steps {...stepsProps}>\n                <Step title="About Post" />\n                <Step title="Content" />\n            </Steps>\n            <Form {...formProps} layout="vertical" style={{ marginTop: 30 }}>\n                {formList[current]}\n            </Form>\n        </Edit>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n            create: PostCreate,\n            edit: PostEditPage,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))),(0,r.kt)("p",null,"For the sake of simplicity, in this example we're going to build a Post ",(0,r.kt)("inlineCode",{parentName:"p"},'"create"')," form that consists of only a ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and a relational ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," field."),(0,r.kt)("p",null,"To split your form items under a ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps>")," component, first import and use ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook in your page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport { useStepsForm } from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n    } = useStepsForm<IPost, HttpError, IPost>();\n\n    return null;\n};\n\ninterface ICategory {\n    id: number;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n    category: {\n        id: ICategory["id"];\n    };\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," is generic over the type form data to help you type check your code."),(0,r.kt)("p",null,"This hook returns a set of useful values to render steps form. Given ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," value, you should have a way to render your form items conditionally with this index value. You can use an array to achieve this."),(0,r.kt)("p",null,"Here, each item of ",(0,r.kt)("inlineCode",{parentName:"p"},"formList")," corresponds to one step in form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const { current, gotoStep, stepsProps, formProps, saveButtonProps } =\n        useStepsForm<IPost, HttpError, IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<\n        ICategory,\n        HttpError\n    >({\n        resource: "categories",\n    });\n\n    // highlight-start\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n    // highlight-end\n\n    return null;\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Since ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," is a relational data, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," to fetch its data."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/field/useSelect/"},"Refer to ",(0,r.kt)("inlineCode",{parentName:"a"},"useSelect")," documentation for detailed usage. ","\u2192"))),(0,r.kt)("br",null),(0,r.kt)("p",null,"You should use ",(0,r.kt)("inlineCode",{parentName:"p"},"stepsProps")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps>")," component, ",(0,r.kt)("inlineCode",{parentName:"p"},"formProps")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form>")," component respectively. And as the last step, you should render the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps>")," component besides the form like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n    // highlight-start\n    Create,\n    Steps,\n    // highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n    } = useStepsForm<IPost, HttpError, IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<\n        ICategory,\n        HttpError\n    >({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n            // highlight-start\n            <Steps {...stepsProps}>\n                <Step title="About Post" />\n                <Step title="Content" />\n            </Steps>\n            <Form {...formProps} layout="vertical">\n                {formList[current]}\n            </Form>\n            // highlight-end\n        </Create>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n')),(0,r.kt)("admonition",{title:"Important",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Make sure to add as much ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps.Step>")," components as the number of steps in the ",(0,r.kt)("inlineCode",{parentName:"p"},"formList")," array.")),(0,r.kt)("br",null),(0,r.kt)("p",null,"To help users navigate between steps in the form, you can use action buttons. Your navigation buttons should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"gotoStep")," function that was previously returned from the the ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/posts/create.tsx"',title:'"pages/posts/create.tsx"'},'import React from "react";\nimport { HttpError } from "@pankod/refine-core";\nimport {\n    useStepsForm,\n    useSelect,\n    Form,\n    Input,\n    Select,\n    Create,\n    Steps,\n    // highlight-start\n    Button,\n    SaveButton,\n    // highlight-end\n} from "@pankod/refine-antd";\n\nexport const PostCreate: React.FC = () => {\n    const {\n        current,\n        gotoStep,\n        stepsProps,\n        formProps,\n        saveButtonProps,\n        queryResult,\n        submit,\n    } = useStepsForm<IPost, HttpError, IPost>();\n\n    const { selectProps: categorySelectProps } = useSelect<\n        ICategory,\n        HttpError\n    >({\n        resource: "categories",\n    });\n\n    const formList = [\n        <>\n            <Form.Item\n                label="Title"\n                name="title"\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Input />\n            </Form.Item>\n        </>,\n        <>\n            <Form.Item\n                label="Category"\n                name={["category", "id"]}\n                rules={[\n                    {\n                        required: true,\n                    },\n                ]}\n            >\n                <Select {...categorySelectProps} />\n            </Form.Item>\n        </>,\n    ];\n\n    return (\n        <Create\n            // highlight-start\n            footerButtons={\n                <>\n                    {current > 0 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current - 1);\n                            }}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                    {current < formList.length - 1 && (\n                        <Button\n                            onClick={() => {\n                                gotoStep(current + 1);\n                            }}\n                        >\n                            Next\n                        </Button>\n                    )}\n                    {current === formList.length - 1 && (\n                        <SaveButton\n                            {...saveButtonProps}\n                            style={{ marginRight: 10 }}\n                            onClick={() => submit()}\n                        />\n                    )}\n                </>\n            }\n            // highlight-end\n        >\n            <Steps {...stepsProps}>\n                <Step title="About Post" />\n                <Step title="Content" />\n            </Steps>\n            <Form {...formProps} layout="vertical">\n                {formList[current]}\n            </Form>\n        </Create>\n    );\n};\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    category: { id: number };\n}\n')),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"All ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," props also available in ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,r.kt)("h3",{id:"defaultcurrent"},(0,r.kt)("inlineCode",{parentName:"h3"},"defaultCurrent")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"0"))),(0,r.kt)("p",null,"Sets the default starting step number. Counting starts from ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n    defaultCurrent: 2,\n});\n")),(0,r.kt)("h3",{id:"total"},(0,r.kt)("inlineCode",{parentName:"h3"},"total")),(0,r.kt)("p",null,"Maximum number of steps. ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps>")," cannot go beyond this number."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n    total: 3,\n});\n")),(0,r.kt)("h3",{id:"isbackvalidate"},(0,r.kt)("inlineCode",{parentName:"h3"},"isBackValidate")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"))),(0,r.kt)("p",null,"When is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", validates a form fields when the user navigates to a previous step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const stepsForm = useStepsForm({\n    isBackValidate: true,\n});\n")),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"return-values"},"Return Values"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"All ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#return-values"},(0,r.kt)("inlineCode",{parentName:"a"},"useForm"))," docs.")),(0,r.kt)("h3",{id:"stepsprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"stepsProps")),(0,r.kt)("p",null,"The props needed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Steps>")," component."),(0,r.kt)("h4",{id:"current"},(0,r.kt)("inlineCode",{parentName:"h4"},"current")),(0,r.kt)("p",null,"Current step, counting from ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h4",{id:"onchange"},(0,r.kt)("inlineCode",{parentName:"h4"},"onChange")),(0,r.kt)("p",null,"Callback function that is trigger when the current step of the form changes. The function takes in one argument, ",(0,r.kt)("inlineCode",{parentName:"p"},"currentStep"),", which is a number representing the index of the current step."),(0,r.kt)("h3",{id:"current-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"current")),(0,r.kt)("p",null,"Current step, counting from ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h3",{id:"gotostep"},(0,r.kt)("inlineCode",{parentName:"h3"},"gotoStep")),(0,r.kt)("p",null,"Is a function that allows you to programmatically change the current step of a form.\nIt takes in one argument, step, which is a number representing the index of the step you want to navigate to."),(0,r.kt)("h3",{id:"submit"},(0,r.kt)("inlineCode",{parentName:"h3"},"submit")),(0,r.kt)("p",null,"A function that can submit the form. It's useful when you want to submit the form manually."),(0,r.kt)("h3",{id:"defaultformvaluesloading"},(0,r.kt)("inlineCode",{parentName:"h3"},"defaultFormValuesLoading")),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,r.kt)("inlineCode",{parentName:"p"},'"edit"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"clone"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},"useStepsForm")," will fetch the data from the API and set it as default values. This prop is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," when the data is being fetched."),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,r.kt)("p",null,"You may need to modify the form data before it is sent to the API."),(0,r.kt)("p",null,"For example, Let's send the values we received from the user in two separate inputs, ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,r.kt)("inlineCode",{parentName:"p"},"fullName"),". We can do this by overriding the ",(0,r.kt)("inlineCode",{parentName:"p"},"submit")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},"// --\nuseStepsForm({\n    submit: (formValues) => {\n        // highlight-start\n        const data = {\n            fullName: `${formValues.name} ${formValues.surname}`,\n            age: formValues.age,\n            city: formValues.city,\n        };\n        onFinish(data as any);\n        // highlight-end\n    },\n});\n// --\n")),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(k,{module:"@pankod/refine-antd/useStepsForm",mdxType:"PropsTable"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,r.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,r.kt)("strong",{parentName:"p"},"<",(0,r.kt)("a",{parentName:"strong",href:"/docs/3.xx.xx/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,r.kt)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). if ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,r.kt)("h3",{id:"return-values-1"},"Return Values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stepsProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design steps props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/steps/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"StepsProps")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current step, counting from 0."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gotoStep"),(0,r.kt)("td",{parentName:"tr",align:null},"Go to the target step"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(step: number) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"formProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design form props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useForm/#formprops"},(0,r.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"form"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,r.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,r.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"submit"),(0,r.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"() => void"))))),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Desription"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data of the query that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/3.xx.xx/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,r.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(g,{path:"form-antd-use-steps-form",mdxType:"CodeSandboxExample"}))}b.isMDXComponent=!0}}]);