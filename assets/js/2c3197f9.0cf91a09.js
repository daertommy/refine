"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4424],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=r,m=u["".concat(p,".").concat(h)]||u[h]||c[h]||a;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},59279:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});n(67294);var o=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={id:"show",title:"Show",swizzle:!0},p=void 0,l={unversionedId:"api-reference/antd/components/basic-views/show",id:"api-reference/antd/components/basic-views/show",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page.",source:"@site/docs/api-reference/antd/components/basic-views/show.md",sourceDirName:"api-reference/antd/components/basic-views",slug:"/api-reference/antd/components/basic-views/show",permalink:"/docs/api-reference/antd/components/basic-views/show",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/components/basic-views/show.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1701071893,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{id:"show",title:"Show",swizzle:!0},sidebar:"someSidebar",previous:{title:"List",permalink:"/docs/api-reference/antd/components/basic-views/list"},next:{title:"Breadcrumb",permalink:"/docs/api-reference/antd/components/breadcrumb"}},d={},c=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>canDelete</code> and <code>canEdit</code>",id:"candelete-and-canedit",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],u=(h="PropsTable",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var h;const m={toc:c};function f(e){var{components:t}=e,n=i(e,["components"]);return(0,o.kt)("wrapper",a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),o.forEach((function(t){r(e,t,n[t])}))}return e}({},m,n),{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic but adds extra functionalities like a refresh button or giving title to the page."),(0,o.kt)("p",null,"We will show what ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/show/2",live:!0,hideCode:!0,url:"http://localhost:3000/posts/show/2"},'// visible-block-start\nimport { Show, MarkdownField } from "@refinedev/antd";\nimport { Typography } from "antd";\nimport { useShow, useOne } from "@refinedev/core";\n\nconst { Title, Text } = Typography;\n\nconst PostShow: React.FC = () => {\n  const { queryResult } = useShow<IPost>();\n  const { data, isLoading } = queryResult;\n  const record = data?.data;\n\n  const { data: categoryData, isLoading: categoryIsLoading } = useOne<ICategory>({\n    resource: "categories",\n    id: record?.category.id || "",\n    queryOptions: {\n      enabled: !!record,\n    },\n  });\n\n  return (\n    <Show isLoading={isLoading}>\n      <Title level={5}>Id</Title>\n      <Text>{record?.id}</Text>\n\n      <Title level={5}>Title</Title>\n      <Text>{record?.title}</Text>\n\n      <Title level={5}>Category</Title>\n      <Text>{categoryIsLoading ? "Loading..." : categoryData?.data.title}</Text>\n\n      <Title level={5}>Content</Title>\n      <MarkdownField value={record?.content} />\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton recordItemId="2">Edit Item 2</ShowButton>\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.kt)("p",{parentName:"admonition"},"You can swizzle this component to customize it with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,o.kt)("strong",{parentName:"a"},"refine CLI")))),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h3"},"title")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"title")," allows you to add a title inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>"),' component. If you don\'t pass title props, it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it will be "Show post".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    };\n  },\n};\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show title="Custom Title">\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton recordItemId="2">Show Item 2</ShowButton>\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("h3",{id:"resource"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," prop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom/2"},'setInitialRoutes(["/custom/2"]);\n\nimport { Refine } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst CustomPage: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show resource="posts">\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\nconst App: React.FC = () => {\n  return (\n    <RefineAntdDemo\n      legacyRouterProvider={{\n        ...routerProvider,\n        // highlight-start\n        routes: [\n          {\n            element: <CustomPage />,\n            path: "/custom/:id",\n          },\n        ],\n        // highlight-end\n      }}\n      dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n      resources={[{ name: "posts" }]}\n    />\n  );\n};\n\nrender(<App />);\n')),(0,o.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#identifier"},(0,o.kt)("inlineCode",{parentName:"a"},"identifier")," of the ",(0,o.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,o.kt)("h3",{id:"candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"canEdit")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component."),(0,o.kt)("p",null,"When clicked on, the delete button executes the ",(0,o.kt)("inlineCode",{parentName:"p"},"useDelete")," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton, Edit } = RefineAntd;\n\nconst { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n  ...dataProvider,\n  deleteOne: async ({ resource, id, variables }) => {\n    return {\n      data: {},\n    };\n  },\n};\n\nconst authProvider = {\n  login: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  register: async () => {\n    return {\n      success: true,\n    };\n  },\n  forgotPassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  updatePassword: async () => {\n    return {\n      success: true,\n    };\n  },\n  logout: async () => {\n    return {\n      success: true,\n      redirectTo: "/",\n    };\n  },\n  check: () => ({\n    authenticated: true,\n  }),\n  onError: async (error) => {\n    console.error(error);\n    return { error };\n  },\n  getPermissions: async () => ["admin"],\n  getIdentity: async () => null,\n};\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostShow: React.FC = () => {\n  const { data: permissionsData } = usePermissions();\n  return (\n    <Show\n      /* highlight-start */\n      canDelete={permissionsData?.includes("admin")}\n      canEdit={permissionsData?.includes("admin")}\n      /* highlight-end */\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    authProvider={authProvider}\n    dataProvider={customDataProvider}\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton>Show Item 2</ShowButton>\n          </div>\n        ),\n        show: PostShow,\n        edit: () => {\n          return <Edit>Edit Page</Edit>;\n        },\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/authentication/usePermissions"},(0,o.kt)("inlineCode",{parentName:"a"},"usePermission")," documentation ","\u2192"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"))," and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>"))," documentations.")),(0,o.kt)("h3",{id:"recorditemid"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,o.kt)("p",null,"The",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show, useModalForm } from "@refinedev/antd";\nimport { Modal, Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  const { modalProps, id, show } = useModalForm({\n    action: "show",\n  });\n\n  return (\n    <div>\n      <Button onClick={() => show()}>Show Button</Button>\n      <Modal {...modalProps}>\n        {/* highlight-next-line */}\n        <Show recordItemId={id}>\n          <p>Rest of your page here</p>\n        </Show>\n      </Modal>\n    </div>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton recordItemId="2">Show Item 2</ShowButton>\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information for ",(0,o.kt)("inlineCode",{parentName:"p"},"<RefreshButton>")," to work properly.")),(0,o.kt)("h3",{id:"dataprovidername"},(0,o.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,o.kt)("p",null,"If not specified, ",(0,o.kt)("strong",{parentName:"p"},"refine")," will use the default data provider. If you have multiple data providers, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property to specify which one you want to use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Show } from "@refinedev/antd";\n\n// highlight-start\nconst PostShow = () => {\n  return <Show dataProviderName="other">...</Show>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n  return (\n    <Refine\n      // highlight-start\n      dataProvider={{\n        default: dataProvider("https://api.fake-rest.refine.dev/"),\n        other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n      }}\n      // highlight-end\n    >\n      {/* ... */}\n    </Refine>\n  );\n};\n')),(0,o.kt)("h3",{id:"goback"},(0,o.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,o.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"goBack")," property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  const BackButton = () => <Button>\u2190</Button>;\n  return (\n    /* highlight-next-line */\n    <Show goBack={<div>back</div>}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts", "/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton>Show Item 2</ShowButton>\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If your route has no ",(0,o.kt)("inlineCode",{parentName:"p"},":action")," parameter or your action is ",(0,o.kt)("inlineCode",{parentName:"p"},"list"),", the back button will not be shown even if you pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"goBack")," property. You can override this behavior by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps")," property:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'/* highlight-next-line */\nimport { useBack } from "@refinedev/core";\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  /* highlight-next-line */\n  const back = useBack();\n  const BackButton = () => <Button>\u2190</Button>;\n\n  return (\n    /* highlight-next-line */\n    <Show goBack={<BackButton />} headerProps={{ onBack: back }}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n'))),(0,o.kt)("h3",{id:"isloading"},(0,o.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,o.kt)("p",null,"Since ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," uses the Ant Design ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/card/"},(0,o.kt)("inlineCode",{parentName:"a"},"<Card>"))," component, the ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," property can be set like the below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    /* highlight-next-line */\n    <Show isLoading={true}>\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("h3",{id:"breadcrumb"},(0,o.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,o.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default the ",(0,o.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/antd")," package is used for breadcrumbs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show, Breadcrumb } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      breadcrumb={\n        <div\n          style={{\n            padding: "3px 6px",\n            border: "2px dashed cornflowerblue",\n          }}\n        >\n          <Breadcrumb />\n        </div>\n      }\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/breadcrumb"},(0,o.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192"))),(0,o.kt)("h3",{id:"wrapperprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property if you want to customize the wrapper of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component. The ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/antd")," wrapper elements are simply ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>"),"s and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," and can get every attribute that ",(0,o.kt)("inlineCode",{parentName:"p"},"<div/>")," can get."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      wrapperProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("h3",{id:"headerprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps")," property to customize the header of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerProps={{\n        subTitle: "This is a subtitle",\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://procomponents.ant.design/en-US/components/page-header"},(0,o.kt)("inlineCode",{parentName:"a"},"PageHeader")," documentation ","\u2192"))),(0,o.kt)("h3",{id:"contentprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"contentProps")," property to customize the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      contentProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/card/"},(0,o.kt)("inlineCode",{parentName:"a"},"Card")," documentation ","\u2192"))),(0,o.kt)("h3",{id:"headerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component has a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/refresh-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.kt)("p",null,"You can customize the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons, listButtonProps, editButtonProps, deleteButtonProps, refreshButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},'If the "list" resource is not defined, the ',(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"a"},"canEdit"))," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"editButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("p",null,"Or, instead of using the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"createButtonProps")," to utilize the default values of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/buttons/refresh-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," components."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show, ListButton, EditButton, DeleteButton, RefreshButton } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtons={({ deleteButtonProps, editButtonProps, listButtonProps, refreshButtonProps }) => (\n        <>\n          <Button type="primary">Custom Button</Button>\n          {listButtonProps && <ListButton {...listButtonProps} meta={{ foo: "bar" }} />}\n          {editButtonProps && <EditButton {...editButtonProps} meta={{ foo: "bar" }} />}\n          {deleteButtonProps && <DeleteButton {...deleteButtonProps} meta={{ foo: "bar" }} />}\n          <RefreshButton {...refreshButtonProps} meta={{ foo: "bar" }} />\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show/2"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("h3",{id:"headerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property to customize the wrapper element of the buttons at the header:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/edit/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/edit/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      headerButtonProps={{\n        style: {\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n      headerButtons={<Button type="primary">Custom Button</Button>}\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation ","\u2192"))),(0,o.kt)("h3",{id:"footerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      // highlight-start\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("h3",{id:"footerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/2",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/2"},'const { ShowButton } = RefineAntd;\n\n// visible-block-start\nimport { Show } from "@refinedev/antd";\nimport { Button } from "antd";\n\nconst PostShow: React.FC = () => {\n  return (\n    <Show\n      footerButtons={({ defaultButtons }) => (\n        <>\n          {defaultButtons}\n          <Button type="primary">Custom Button</Button>\n        </>\n      )}\n      // highlight-start\n      footerButtonProps={{\n        style: {\n          // hide-start\n          float: "right",\n          marginRight: 24,\n          // hide-end\n          backgroundColor: "cornflowerblue",\n          padding: "16px",\n        },\n      }}\n      // highlight-end\n    >\n      <p>Rest of your page here</p>\n    </Show>\n  );\n};\n// visible-block-end\n\nrender(\n  <RefineAntdDemo\n    initialRoutes={["/posts/show"]}\n    resources={[\n      {\n        name: "posts",\n        list: () => (\n          <div>\n            <p>This page is empty.</p>\n            <ShowButton />\n          </div>\n        ),\n        show: PostShow,\n      },\n    ]}\n  />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://ant.design/components/space/"},(0,o.kt)("inlineCode",{parentName:"a"},"Space")," documentation ","\u2192"))),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties-1"},"Properties"),(0,o.kt)(u,{module:"@refinedev/antd/Show","contentProps-type":"[`CardProps`](https://ant.design/components/card/#API)","headerProps-type":"[`PageHeaderProps`](https://procomponents.ant.design/en-US/components/page-header)","headerButtons-default":"[`ListButton`](https://refine.dev/docs/api-reference/antd/components/buttons/list-button/), [`RefreshButton`](https://refine.dev/docs/api-reference/antd/components/buttons/refresh-button/), [`EditButton`](https://refine.dev/docs/api-reference/antd/components/buttons/edit-button/) and [`DeleteButton`](https://refine.dev/docs/api-reference/antd/components/buttons/delete-button/)","headerButtonProps-type":"[`SpaceProps`](https://ant.design/components/space/)","deleteButtonProps-type":"[`DeleteButtonProps`](/docs/api-reference/antd/components/buttons/delete-button/)","saveButtonProps-type":"[`SaveButtonProps`](https://refine.dev/docs/api-reference/antd/components/buttons/save-button/)","footerButtonsProps-type":"[`SpaceProps`](https://ant.design/components/space/)","breadcrumb-default":"[`<Breadcrumb>`](https://ant.design/components/breadcrumb/)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"}))}f.isMDXComponent=!0}}]);