"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[44218],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>p});t(67294);var a=t(3905);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={title:"Building React admin panel with NextUI and refine",description:"We will see how  to build a React admin panel using refine and NextUI components library",slug:"next-ui-react-admin-panel",authors:"joseph_mawa",tags:["refine","tutorial","react","tailwind"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/social.jpg",hide_table_of_contents:!1},l=void 0,d={permalink:"/blog/next-ui-react-admin-panel",source:"@site/blog/2023-09-20-next-ui-panel.md",title:"Building React admin panel with NextUI and refine",description:"We will see how  to build a React admin panel using refine and NextUI components library",date:"2023-09-20T00:00:00.000Z",formattedDate:"September 20, 2023",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"react",permalink:"/blog/tags/react"},{label:"tailwind",permalink:"/blog/tags/tailwind"}],readingTime:41.88,hasTruncateMarker:!1,authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],frontMatter:{title:"Building React admin panel with NextUI and refine",description:"We will see how  to build a React admin panel using refine and NextUI components library",slug:"next-ui-react-admin-panel",authors:"joseph_mawa",tags:["refine","tutorial","react","tailwind"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/social.jpg",hide_table_of_contents:!1},prevItem:{title:"Building a Complete React CRM App with refine, Ant Design and GraphQL",permalink:"/blog/react-crm-with-refine"},nextItem:{title:"Using Heroicons with TailwindCSS",permalink:"/blog/heroicons-with-tailwind"},relatedPosts:[{title:"A Guide on Material UI AutoComplete in React",description:"We'll discover the Material UI AutoComplete component with examples",permalink:"/blog/material-ui-autocomplete-component",formattedDate:"October 19, 2022",authors:[{name:"Doro Onome",title:"Software Developer",url:"https://github.com/Nomzy-kush",imageURL:"https://github.com/Nomzy-kush.png",key:"doro_onome"}],readingTime:14.19,date:"2022-10-19T00:00:00.000Z"},{title:"React Admin Panel Tutorial with Chakra UI and Strapi",description:"We'll build a React admin tutorial app with refine",permalink:"/blog/react-admin-tutorial",formattedDate:"March 3, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:27.17,date:"2023-03-03T00:00:00.000Z"},{title:"An Intro to server components in React",description:"We will discuss what React server components are as well as how to incorporate them into building applications.",permalink:"/blog/react-server-components",formattedDate:"July 9, 2023",authors:[{name:"Peter Osah",title:"Web Developer",imageURL:"/img/generic-profile.png",key:"peter_osah"}],readingTime:10.405,date:"2023-07-09T00:00:00.000Z"}],authorPosts:[{title:"5 Best Free Platforms for Hosting Hobby Web Projects",description:"A list of the best free platforms for hosting hobby web projects. You can host your static websites, React apps, and more for free.",permalink:"/blog/5-top-free-react-hosting-platforms",formattedDate:"November 23, 2022",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:19.08,date:"2022-11-23T00:00:00.000Z"},{title:"Comparing the best headless CMS solutions",description:"We compared best headless CMS solutions -  Strapi, Hasura, and Hygraph. We'll highlight their pros and cons.",permalink:"/blog/best-headless-cms",formattedDate:"February 8, 2023",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:9.8,date:"2023-02-08T00:00:00.000Z"},{title:"Building a React Admin Dashboard with Tremor Library",description:"We'll build a simple React admin dashboard using refine and Tremor.",permalink:"/blog/building-react-admin-dashboard-with-tremor",formattedDate:"July 2, 2023",authors:[{name:"Joseph Mawa",title:"Web Developer",url:"https://github.com/nibble0101",imageURL:"/img/generic-profile.png",key:"joseph_mawa"}],readingTime:23.55,date:"2023-07-02T00:00:00.000Z"}]},c={authorsImageUrls:[void 0]},p=[{value:"What is refine",id:"what-is-refine",level:2},{value:"How to create a refine application",id:"how-to-create-a-refine-application",level:2},{value:"Tidy things up",id:"tidy-things-up",level:3},{value:"What is NextUI",id:"what-is-nextui",level:2},{value:"How to set up NextUI in a refine application",id:"how-to-set-up-nextui-in-a-refine-application",level:2},{value:"Install NextUI and its dependencies",id:"install-nextui-and-its-dependencies",level:3},{value:"Add Tailwind CSS configuration file",id:"add-tailwind-css-configuration-file",level:3},{value:"Add Tailwind CSS directives",id:"add-tailwind-css-directives",level:3},{value:"Set up NextUI provider",id:"set-up-nextui-provider",level:3},{value:"How to build React admin dashboard with NextUI and refine",id:"how-to-build-react-admin-dashboard-with-nextui-and-refine",level:2},{value:"Create key performance indicator card",id:"create-key-performance-indicator-card",level:3},{value:"Represent the key performance indicators using charts",id:"represent-the-key-performance-indicators-using-charts",level:3},{value:"Represent the recent sales in a table",id:"represent-the-recent-sales-in-a-table",level:3},{value:"How to build product CRUD pages with NextUI and refine",id:"how-to-build-product-crud-pages-with-nextui-and-refine",level:2},{value:"Products list page",id:"products-list-page",level:3},{value:"Products create page",id:"products-create-page",level:3},{value:"Products edit page",id:"products-edit-page",level:3},{value:"Products show page",id:"products-show-page",level:3},{value:"How to build categories CRUD pages with NextUI and refine",id:"how-to-build-categories-crud-pages-with-nextui-and-refine",level:2},{value:"Categories list page",id:"categories-list-page",level:3},{value:"Categories create page",id:"categories-create-page",level:3},{value:"Categories edit page",id:"categories-edit-page",level:3},{value:"Categories show page",id:"categories-show-page",level:3},{value:"Update the layout",id:"update-the-layout",level:2},{value:"Update the navigation menu",id:"update-the-navigation-menu",level:3},{value:"Update the breadcrumb",id:"update-the-breadcrumb",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Live CodeSandbox Example",id:"live-codesandbox-example",level:2}],u=(m="CodeSandboxExample",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var m;const g={toc:p};function h(e){var{components:n}=e,t=i(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},a=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),a.forEach((function(n){r(e,n,t[n])}))}return e}({},g,t),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It's hard to build data-intensive front-end applications such as dashboards and admin panels from the ground up without feature-rich and niche frameworks such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"refine")," and ",(0,a.kt)("a",{parentName:"p",href:"https://nextui.org/"},"NextUI"),"."),(0,a.kt)("p",null,"With ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"refine"),", you can bootstrap a project instantly using the refine.dev web platform or the command line tool and customize the template to meet the requirements of your project."),(0,a.kt)("p",null,"Any refine project has built-in features for state management, routing, networking, authentication, and internationalization."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://nextui.org/"},"NextUI")," is a React library for building accessible UIs. You can use NextUI in a vanilla React project or React-based frameworks like refine and Next.js. In this article, you will learn to build a React admin panel using refine and NextUI components library."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/next-ui.gif ",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"Steps we'll cover:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#what-is-refine"},"What is refine")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#how-to-create-a-refine-application"},"How to create a refine application")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#what-is-nextui"},"What is NextUI")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#how-to-set-up-nextui-in-a-refine-application"},"How to set up NextUI in a refine application")),(0,a.kt)("li",{parentName:"ul"},"[How to build React admin dashboard with NextUI and refine]"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#how-to-build-product-crud-pages-with-nextui-and-refine"},"How to build product CRUD pages with NextUI and refine")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#how-to-build-categories-crud-pages-with-nextui-and-refine"},"How to build categories CRUD pages with NextUI and refine")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#update-the-layout"},"Update the layout")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#update-the-breadcrumb"},"Update the breadcrumb"))),(0,a.kt)("h2",{id:"what-is-refine"},"What is refine"),(0,a.kt)("p",null,"As highlighted above, refine is a React-based framework for building data-intensive front-end applications such as dashboards and admin panels. It is a feature-rich library with built-in support for routing, networking, authentication, state management, and internationalization."),(0,a.kt)("p",null,"Similarly, refine has built-in support for integrating some of the commonest UI and design systems like Material UI, Ant design, Chakra UI, and Mantine."),(0,a.kt)("p",null,"All these built-in refine features accelerate development speed, improve developer experience, and significantly reduce time to production. Check out the refine documentation for more on what else it can do."),(0,a.kt)("h2",{id:"how-to-create-a-refine-application"},"How to create a refine application"),(0,a.kt)("p",null,"You can create a refine application either using the CLI or the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/?playground=true"},"Browser-based Scaffolder"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/?playground=true"},"Browser-based Scaffolder")," is an efficient tool that allows you to create refine app seamlessly in your browser."),(0,a.kt)("p",null,"You can choose the libraries and frameworks you want to work with, and the tool will generate a boilerplate code for you."),(0,a.kt)("p",null,"For this tutorial, we'll be select the following options:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"React Platform"),": Vite",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"UI Framework"),": Headless",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Backend"),": REST API",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Authentication Provider"),": No Auth"),(0,a.kt)("div",{className:"flex justify-center"},(0,a.kt)("img",{alt:"React admin panel next ui",src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-07-25-refine-primereact/create-refine-project.gif",className:"border border-gray-200 rounded"})),(0,a.kt)("p",null,"Once you've completed the steps, you'll have the ability to download your project"),(0,a.kt)("p",null,"After creating the project, you can download it to your local machine. You may need to sign into the refine.new platform with your GitHub or Google account to build and download the project."),(0,a.kt)("p",null,"Then use the command below to install dependencies."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install\n")),(0,a.kt)("p",null,"After installing dependencies, use the command below to launch the development server on localhost. You can then view the project in a web browser."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm run dev\n")),(0,a.kt)("p",null,"Once your project is successfully run, you will see the following page:"),(0,a.kt)("div",{className:"flex justify-center"},(0,a.kt)("img",{alt:"React admin panel next ui",src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-07-25-refine-primereact/fresh-project.jpg",className:"border border-gray-200 rounded"})),(0,a.kt)("h3",{id:"tidy-things-up"},"Tidy things up"),(0,a.kt)("p",null,"The refine project we created above has a set of default styles in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.css")," file, which will interfere with the NextUI styles. Therefore, you can delete the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.css")," file."),(0,a.kt)("p",null,"Similarly, we won't use the generated ",(0,a.kt)("inlineCode",{parentName:"p"},"blog-posts")," pages. Therefore, you can delete the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/blog-posts")," directory."),(0,a.kt)("p",null,"Finally, copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show App.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { ErrorComponent, GitHubBanner, Refine } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport routerBindings, {\n  DocumentTitleHandler,\n  NavigateToResource,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { useTranslation } from "react-i18next";\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\nimport { Layout } from "./components/layout";\n\nimport { CategoryCreate, CategoryEdit, CategoryList, CategoryShow } from "./pages/categories";\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n\n  const i18nProvider = {\n    translate: (key: string, params: object) => t(key, params),\n    changeLocale: (lang: string) => i18n.changeLanguage(lang),\n    getLocale: () => i18n.language,\n  };\n\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider("https://api.finefoods.refine.dev")}\n          i18nProvider={i18nProvider}\n          routerProvider={routerBindings}\n          resources={[\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n              edit: "/categories/edit/:id",\n              show: "/categories/show/:id",\n              meta: {\n                canDelete: true,\n              },\n            },\n          ]}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n            projectId: "rhafgh-aLP9JS-0GTfcM",\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Layout>\n                  <Outlet />\n                </Layout>\n              }\n            >\n              <Route path="/categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n                <Route path="edit/:id" element={<CategoryEdit />} />\n                <Route path="show/:id" element={<CategoryShow />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.kt)("h2",{id:"what-is-nextui"},"What is NextUI"),(0,a.kt)("div",{className:"flex justify-center"},(0,a.kt)("img",{alt:"React admin panel next ui",src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/nextui%20(1).jpeg ",className:"border border-gray-200 rounded"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://nextui.org/"},"NextUI")," is a fully-featured React UI library for building accessible UI in React. It is built on top of React Aria and Tailwind CSS. It uses Framer motion internally for animating some of the built-in components."),(0,a.kt)("p",null,"You can use NextUI in a vanilla React project or React frameworks like Next.js and refine."),(0,a.kt)("h2",{id:"how-to-set-up-nextui-in-a-refine-application"},"How to set up NextUI in a refine application"),(0,a.kt)("h3",{id:"install-nextui-and-its-dependencies"},"Install NextUI and its dependencies"),(0,a.kt)("p",null,"Install NextUI and its dependencies from the NPM package registry to start using it in a refine application. Internally, NextUI uses Tailwind CSS and framer-motion for animation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm i @nextui-org/react framer-motion && npm install -D tailwindcss postcss autoprefixer\n")),(0,a.kt)("p",null,"The command above will install NextUI, framer-motion, and Tailwind CSS and its peer dependencies."),(0,a.kt)("p",null,"We will also use ",(0,a.kt)("a",{parentName:"p",href:"https://heroicons.com/"},"heroicons")," in this article. Install it using the command below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @heroicons/react\n")),(0,a.kt)("h3",{id:"add-tailwind-css-configuration-file"},"Add Tailwind CSS configuration file"),(0,a.kt)("p",null,"After successfully installing Tailwind CSS, use the command below to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," file at the root of your project directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx tailwindcss init -p\n")),(0,a.kt)("p",null,"Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"tailwind.config.js")," file you have just created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="tailwind.config.js"',title:'"tailwind.config.js"'},'const { nextui } = require("@nextui-org/react");\n\n/** @type {import(\'tailwindcss\').Config} */\nexport default {\n  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}", "./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}"],\n  theme: {\n    extend: {},\n  },\n  darkMode: "class",\n  plugins: [nextui()],\n};\n')),(0,a.kt)("h3",{id:"add-tailwind-css-directives"},"Add Tailwind CSS directives"),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.css")," file and add the following Tailwind CSS directives."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/index.css"',title:'"src/index.css"'},"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")),(0,a.kt)("p",null,"Be sure to import the file you created above into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.tsx")," file, like in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/index.tsx"',title:'"src/index.tsx"'},'import React from "react";\nimport { createRoot } from "react-dom/client";\n\nimport App from "./App";\nimport "./i18n";\n//highlight-next-line\nimport "./index.css";\n\nconst container = document.getElementById("root") as HTMLElement;\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <React.Suspense fallback="loading">\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n);\n')),(0,a.kt)("h3",{id:"set-up-nextui-provider"},"Set up NextUI provider"),(0,a.kt)("p",null,"After installing and configuring NextUI and its dependencies, set up ",(0,a.kt)("inlineCode",{parentName:"p"},"NextUIProvider")," at the root of your refine project. Apply the following changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/index.tsx"',title:'"src/index.tsx"'},'import React from "react";\nimport { createRoot } from "react-dom/client";\n\nimport App from "./App";\nimport "./i18n";\nimport "./index.css";\n// highlight-next-line\nimport { NextUIProvider } from "@nextui-org/react";\n\nconst container = document.getElementById("root") as HTMLElement;\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    // highlight-start\n    <NextUIProvider>\n      <React.Suspense fallback="loading">\n        <App />\n      </React.Suspense>\n    </NextUIProvider>\n    // highlight-end\n  </React.StrictMode>,\n);\n')),(0,a.kt)("p",null,"That is everything you need to start using NextUI in your refine application. You may need to restart the development server after making the above changes."),(0,a.kt)("h2",{id:"how-to-build-react-admin-dashboard-with-nextui-and-refine"},"How to build React admin dashboard with NextUI and refine"),(0,a.kt)("p",null,"In this section, we will use the refine app we created above as a template to build a simple React admin dashboard with NextUI and refine. This section assumes you have installed NextUI and its dependencies. We will install additional packages as we build this project."),(0,a.kt)("p",null,"The refine team has put together several APIs that you can experiment with when you're learning refine. In this article, we will create an admin panel using the ",(0,a.kt)("a",{parentName:"p",href:"https://api.finefoods.refine.dev/"},"Fine foods API"),". You can click the link to explore the API resources and endpoints available."),(0,a.kt)("p",null,"The dashboard we want to create will track the key performance indicators for a restaurant business against set targets. The key performance indicators comprise the restaurant's weekly revenue, weekly customers, and weekly orders."),(0,a.kt)("p",null,"Before we start building the dashboard, let's declare the interfaces that we will use throughout this application. They define the shape of our data. Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/interfaces/index.d.ts")," file."),(0,a.kt)("p",null,"Copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Interfaces file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces/index.d.ts"',title:'"src/interfaces/index.d.ts"'},'export interface IOrder {\n  id: number;\n  user: IUser;\n  createdAt: string;\n  status: IOrderStatus;\n  address: IAddress;\n  amount: number;\n}\n\nexport interface IUser {\n  id: number;\n  fullName: string;\n  gender: string;\n  gsm: string;\n  createdAt: string;\n  addresses: IAddress[];\n}\n\nexport interface IOrderStatus {\n  id: number;\n  text: "Pending" | "Ready" | "On The Way" | "Delivered" | "Cancelled";\n}\n\nexport interface IAddress {\n  text: string;\n  coordinate: [string, string];\n}\n\nexport interface IChartDatum {\n  date: string;\n  value: string;\n}\n\nexport interface IChart {\n  data: IChartDatum[];\n  total: number;\n  trend: number;\n}\n\nexport interface IProduct {\n  id: number;\n  name: string;\n  isActive: boolean;\n  description: string;\n  createdAt: string;\n  price: number;\n  category: ICategory;\n  stock: number;\n  images: IImage[];\n}\n\nexport interface IImage {\n  url: string;\n}\n\nexport interface ICategory {\n  id: number;\n  title: string;\n  isActive: boolean;\n  cover: string;\n}\n\nexport interface IProductCategory {\n  value: number;\n  label: string;\n}\n\nexport interface IDeleteModalProps {\n  isOpen: boolean;\n  warningMessage: string;\n  onOpenChange: () => void;\n  onDelete: () => void;\n}\n\ninterface IDisplayAreaGraphProps {\n  data: IChartDatum[];\n  stroke: string;\n  fill: string;\n}\n\ninterface IDisplayBarChartProps {\n  data: IChartDatum[];\n  fill: string;\n}\n'))),(0,a.kt)("h3",{id:"create-key-performance-indicator-card"},"Create key performance indicator card"),(0,a.kt)("p",null,"In this section, we will represent the key performance indicators(KPIs) we are tracking on a card. We will have three cards for the weekly revenue, weekly customers, and weekly orders."),(0,a.kt)("p",null,"We need to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"KpiCard")," component and reuse it for all three performance indicators. Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/kpiCard/index.tsx")," file. Copy and paste the code below into it. Be aware that the ",(0,a.kt)("inlineCode",{parentName:"p"},"kpiCard")," directory doesn't exist yet. You need to create it yourself."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show KpiCard code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/kpiCard/index.tsx"',title:'"src/components/kpiCard/index.tsx"'},'import { Progress, Card, Chip, Spinner } from "@nextui-org/react";\nimport { ArrowUpIcon, ArrowDownIcon } from "@heroicons/react/20/solid";\ntype DeltaType = "warning" | "default" | "primary" | "secondary" | "success" | "danger";\n\nconst getColor = (num: number): DeltaType => {\n  if (num < 20) return "danger";\n  if (num < 50) return "warning";\n  if (num === 50) return "default";\n  if (num < 75) return "primary";\n  if (num < 90) return "secondary";\n  return "success";\n};\n\nconst calcPercent = (num: number, den: number): number => {\n  return Math.round((num / den) * 100);\n};\n\nexport const KpiCard = ({\n  title,\n  total,\n  target,\n  trend,\n  formattedTotal,\n  formattedTarget,\n}: {\n  title: string;\n  total: number;\n  target: number;\n  trend: number;\n  formattedTotal: string;\n  formattedTarget: string;\n}) => {\n  const percent = calcPercent(trend, total);\n  const color = getColor(percent);\n  return (\n    <Card className="p-5">\n      <div>\n        <div className="flex justify-between mb-10">\n          <div>\n            <p>{title}</p>\n            <h1 className="text-lg font-bold">{formattedTotal}</h1>\n          </div>\n          {Number.isNaN(percent) ? (\n            <Spinner />\n          ) : (\n            <Chip color={color} startContent={percent < 0 ? <ArrowDownIcon width={12} /> : <ArrowUpIcon width={12} />}>\n              {`${percent}%`}\n            </Chip>\n          )}\n        </div>\n        <Progress\n          label={`${formattedTotal} (Target: ${formattedTarget})`}\n          size="sm"\n          value={total}\n          maxValue={target}\n          color={color}\n          showValueLabel={true}\n          className="max-w-md"\n        />\n      </div>\n    </Card>\n  );\n};\n'))),(0,a.kt)("p",null,"In the code above, we imported the built-in NextUI components and applied Tailwind CSS classes. For more about the components we used in the code above, check the NextUI documentation."),(0,a.kt)("p",null,"The above component will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/kpi-card.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"We will use ",(0,a.kt)("inlineCode",{parentName:"p"},"dayjs")," to query the data for the last one week from the fake REST API. Therefore, install ",(0,a.kt)("inlineCode",{parentName:"p"},"dayjs")," from the NPM package registry like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install dayjs\n")),(0,a.kt)("p",null,"We need to fetch the data for the key performance indicators from the database and pass them as props to the ",(0,a.kt)("inlineCode",{parentName:"p"},"KpiCard")," component we created above."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/dashboard/DashboardPage.tsx")," file. Copy and paste the code below into it. Be aware that the ",(0,a.kt)("inlineCode",{parentName:"p"},"dashboard")," directory doesn't exist. You need to create it yourself."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show DashboardPage code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/DashboardPage.tsx"',title:'"src/pages/dashboard/DashboardPage.tsx"'},'import React from "react";\nimport { Tabs, Tab, Card, CardBody } from "@nextui-org/react";\nimport { useApiUrl, useCustom } from "@refinedev/core";\nimport { IChart } from "../../interfaces";\n\nimport { KpiCard } from "../../components/kpiCard";\nimport dayjs from "dayjs";\n\nconst query = {\n  start: dayjs().subtract(7, "days").startOf("day"),\n  end: dayjs().startOf("day"),\n};\n\nconst currencyFormatter = Intl.NumberFormat("en", {\n  style: "currency",\n  currency: "USD",\n});\nconst numberFormatter = Intl.NumberFormat("en");\n\nexport const DashboardPage: React.FC = () => {\n  const API_URL = useApiUrl();\n\n  const { data: dailyRevenue } = useCustom<IChart>({\n    url: `${API_URL}/dailyRevenue`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  const { data: dailyOrders } = useCustom<IChart>({\n    url: `${API_URL}/dailyOrders`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  const { data: newCustomers } = useCustom<IChart>({\n    url: `${API_URL}/newCustomers`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  return (\n    <main className="flex w-full flex-col mt-5 gap-3">\n      <h1 className="font-bold">Dashboards</h1>\n      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 justify-items-stretch">\n        <KpiCard\n          title="Weekly Revenue"\n          total={dailyRevenue?.data.total ?? 0}\n          trend={dailyRevenue?.data.trend ?? 0}\n          target={10_500}\n          formattedTotal={`${currencyFormatter.format(dailyRevenue?.data.total ?? 0)}`}\n          formattedTarget={`${currencyFormatter.format(10_500)}`}\n        />\n        <KpiCard\n          title="Weekly Orders"\n          total={dailyOrders?.data.total ?? 0}\n          trend={dailyOrders?.data.trend ?? 0}\n          target={500}\n          formattedTotal={`${numberFormatter.format(dailyOrders?.data.total ?? 0)}`}\n          formattedTarget={`${numberFormatter.format(500)}`}\n        />\n        <KpiCard\n          title="New Customers"\n          total={newCustomers?.data.total ?? 0}\n          trend={newCustomers?.data.trend ?? 0}\n          target={200}\n          formattedTotal={`${numberFormatter.format(newCustomers?.data.total ?? 0)}`}\n          formattedTarget={`${numberFormatter.format(200)}`}\n        />\n      </div>\n    </main>\n  );\n};\n'))),(0,a.kt)("p",null,"You can now create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/dashboard/index.ts")," file and export the above component, like in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/dashboard/index.ts"',title:'"src/pages/dashboard/index.ts"'},'export { DashboardPage } from "./DashboardPage";\n')),(0,a.kt)("p",null,"Finally, add the ",(0,a.kt)("inlineCode",{parentName:"p"},"dashboard")," resource to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component. Add the highlighted changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show App.tsx code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n\n//highlight-next-line\nimport { DashboardPage } from "./pages/dashboard";\nimport {\n  CategoryCreate,\n  CategoryEdit,\n  CategoryList,\n  CategoryShow,\n} from "./pages/categories";\n\nfunction App() {\n\n..\n\n\n  return (\n    <BrowserRouter>\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider("https://api.finefoods.refine.dev")}\n          routerProvider={routerBindings}\n          resources={[\n            //highlight-start\n            {\n              name: "dashboard",\n              list: "/dashboard",\n            },\n            //highlight-end\n            ...\n          ]}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n            projectId: "rhafgh-aLP9JS-0GTfcM",\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Layout>\n                  <Outlet />\n                </Layout>\n              }\n            >\n              //highlight-start\n              <Route\n                index\n                element={<NavigateToResource resource="dashboard" />}\n              />\n              <Route path="/dashboard">\n                <Route index element={<DashboardPage />} />\n              </Route>\n              //highlight-end\n              ...\n            </Route>\n          </Routes>\n\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.kt)("p",null,"The three ",(0,a.kt)("inlineCode",{parentName:"p"},"KpiCard")," components we rendered in the above component will look like the image below."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/kpi-cards.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"represent-the-key-performance-indicators-using-charts"},"Represent the key performance indicators using charts"),(0,a.kt)("p",null,"Similar to the key performance indicator card we created above, we shall represent the data we fetched from the API using charts. We will use an area graph to represent the weekly sales and new customers and a bar chart to represent the weekly orders. You can use a different chart if you wish."),(0,a.kt)("p",null,"However, NextUI doesn't have a built-in charts component. We will use ",(0,a.kt)("a",{parentName:"p",href:"https://recharts.org/en-US/"},"Recharts")," instead. Recharts is a third-party package. Therefore, we need to install it from the NPM package registry using the command below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install recharts\n")),(0,a.kt)("p",null,"After successfully installing Recharts, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/charts/DisplayBarChart.tsx")," file. Copy and paste the code below into it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"charts")," directory doesn't exist yet. You need to create it yourself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/charts/DisplayBarChart.tsx"',title:'"src/components/charts/DisplayBarChart.tsx"'},'import React from "react";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";\n\nimport { IDisplayBarChartProps } from "../../interfaces";\n\nexport const formatDate = new Intl.DateTimeFormat("en-US", {\n  month: "short",\n  year: "numeric",\n  day: "numeric",\n});\n\nexport const DisplayBarChart: React.FC<IDisplayBarChartProps> = ({ data, fill }) => {\n  const transformedData = data.map(({ date, value }) => ({\n    date: formatDate.format(new Date(date)),\n    value,\n  }));\n\n  return (\n    <ResponsiveContainer aspect={3.5}>\n      <BarChart data={transformedData}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="date" />\n        <YAxis dataKey="value" />\n        <Tooltip />\n        <Bar dataKey="value" fill={fill} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,a.kt)("p",null,"Similarly, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/charts/DisplayAreaGraph.tsx")," file. Copy and paste the code below into it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayAreaGraph.tsx")," file contains the code for representing the revenue and customer data using area graphs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/charts/DisplayAreaGraph.tsx"',title:'"src/components/charts/DisplayAreaGraph.tsx"'},'import React from "react";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";\n\nimport { IDisplayAreaGraphProps } from "../../interfaces";\nimport { formatDate } from "./DisplayBarChart";\n\nexport const DisplayAreaGraph: React.FC<IDisplayAreaGraphProps> = ({ data, stroke, fill }) => {\n  const transformedData = data.map(({ date, value }) => ({\n    date: formatDate.format(new Date(date)),\n    value,\n  }));\n\n  return (\n    <ResponsiveContainer aspect={3.5}>\n      <AreaChart data={transformedData}>\n        <CartesianGrid strokeDasharray="3 3" />\n        <XAxis dataKey="date" />\n        <YAxis dataKey="value" />\n        <Tooltip label="Daily Revenue" />\n        <Area type="monotone" dataKey="value" stroke={stroke} fill={fill} />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n')),(0,a.kt)("p",null,"Finally, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/charts/index.ts")," file. Copy and paste the exports below into it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'export { DisplayAreaGraph } from "./DisplayAreaGraph";\nexport { DisplayBarChart } from "./DisplayBarChart";\n')),(0,a.kt)("p",null,"We need to import the above components and render them in the dashboard component. Add the following highlighted codes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/dashboard/DashboardPage.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show DashboardPage code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/DashboardPage.tsx"',title:'"src/pages/dashboard/DashboardPage.tsx"'},'...\n//highlight-next-line\nimport { DisplayAreaGraph, DisplayBarChart } from "../../components/charts";\nimport dayjs from "dayjs";\n\nconst query = {\n  start: dayjs().subtract(7, "days").startOf("day"),\n  end: dayjs().startOf("day"),\n};\n\nconst currencyFormatter = Intl.NumberFormat("en", {\n  style: "currency",\n  currency: "USD",\n});\nconst numberFormatter = Intl.NumberFormat("en");\n\nexport const DashboardPage: React.FC = () => {\n  const API_URL = useApiUrl();\n\n  const { data: dailyRevenue } = useCustom<IChart>({\n    url: `${API_URL}/dailyRevenue`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  const { data: dailyOrders } = useCustom<IChart>({\n    url: `${API_URL}/dailyOrders`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  const { data: newCustomers } = useCustom<IChart>({\n    url: `${API_URL}/newCustomers`,\n    method: "get",\n    config: {\n      query,\n    },\n  });\n\n  return (\n    <main className="flex w-full flex-col mt-5 gap-3">\n      <h1 className="font-bold">Dashboards</h1>\n      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 justify-items-stretch">\n      ...\n      </div>\n      //highlight-start\n      <Card className="p-5">\n        <Tabs aria-label="Options" className="gap-0">\n          <Tab key="revenue" title="Revenue">\n            <Card shadow="none" radius="none">\n              <CardBody>\n                <DisplayAreaGraph data={dailyRevenue?.data?.data ?? []} stroke="#8884d8" fill="#cfeafc" />\n              </CardBody>\n            </Card>\n          </Tab>\n          <Tab key="orders" title="Orders">\n            <Card shadow="none" radius="none">\n              <CardBody>\n                <DisplayBarChart data={dailyOrders?.data?.data ?? []} fill="#ffce90" />{" "}\n              </CardBody>\n            </Card>\n          </Tab>\n          <Tab key="customers" title="Customers">\n            <Card shadow="none" radius="none">\n              <CardBody>\n                <DisplayAreaGraph data={newCustomers?.data?.data ?? []} stroke="#00bd56" fill="#ccf3f3" />{" "}\n              </CardBody>\n            </Card>\n          </Tab>\n        </Tabs>\n      </Card>\n      //highlight-end\n    </main>\n  );\n};\n'))),(0,a.kt)("p",null,"The Revenue chart will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/revenue-area-graph.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"The Orders bar chart will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/orders-bar-chart.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"Similarly, the Customer chart will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/new-customers-area-graph.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"represent-the-recent-sales-in-a-table"},"Represent the recent sales in a table"),(0,a.kt)("p",null,"Similar to the previous section, let's represent the recent sales of the restaurant business in a table. A user can search the table using keywords and filter it in ascending or descending order."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/table/RecentSalesTable.tsx")," file. Copy and paste the code below into it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"table")," directory doesn't exist yet. You need to first create it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show RecentSalesTable Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/table/RecentSalesTable.tsx"',title:'"src/components/table/RecentSalesTable.tsx"'},'import {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Input,\n  Button,\n  Chip,\n  Pagination,\n  SortDescriptor,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n} from "@nextui-org/react";\n\nimport { useTable, getDefaultFilter, CrudSort } from "@refinedev/core";\nimport { IOrder } from "../../interfaces";\nimport { useCallback, useState } from "react";\nimport { MagnifyingGlassIcon } from "@heroicons/react/24/outline";\n\nconst columns = [\n  { header: "Id", key: "id", sortable: true },\n  { header: "Amount", key: "amount", sortable: true },\n  { header: "Ordered By", key: "user", sortable: true },\n  { header: "Gender", key: "gender", sortable: true },\n  { header: "Tel", key: "gsm", sortable: false },\n  { header: "Delivery Address", key: "address", sortable: true },\n  { header: "Delivery Status", key: "status", sortable: true },\n  { header: "Created At", key: "createdAt", sortable: false },\n];\n\nexport const formatCurrency = (value: number) => {\n  return value.toLocaleString("en-US", {\n    style: "currency",\n    currency: "USD",\n  });\n};\n\nconst formatDateTime = (value: string) => {\n  return new Date(value).toLocaleString("en-US", {\n    month: "short",\n    year: "numeric",\n    day: "numeric",\n  });\n};\n\nconst getChipColor = (status: number) => {\n  // Order is Pending\n  if (status === 1) return "default";\n  // Order is Ready\n  if (status === 2) return "secondary";\n  // Order is on its way\n  if (status === 3) return "primary";\n  // Order has been delivered\n  if (status === 4) return "success";\n  // Order has been cancelled\n  if (status === 5) return "danger";\n  // Status is unknown\n  return "warning";\n};\n\nexport const RecentSalesTable = () => {\n  const {\n    tableQueryResult,\n    pageCount,\n    current,\n    pageSize,\n    sorters,\n    filters,\n    setCurrent,\n    setPageSize,\n    setSorters,\n    setFilters,\n  } = useTable<IOrder>({\n    resource: "orders",\n    pagination: {\n      pageSize: 5,\n    },\n  });\n\n  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({\n    column: "id",\n    direction: "ascending",\n  });\n\n  const orders = tableQueryResult?.data?.data ?? [];\n\n  const getCellContents = useCallback((columnKey: string, item: IOrder) => {\n    if (columnKey === "id") return item.id;\n    if (columnKey === "amount") return formatCurrency(item.amount);\n    if (columnKey === "user") return item.user.fullName;\n    if (columnKey === "gender") return item.user.gender;\n    if (columnKey === "gsm") return item.user.gsm;\n    if (columnKey === "address") return item.address.text;\n    if (columnKey === "createdAt") return formatDateTime(item.createdAt);\n    if (columnKey === "status") return <Chip color={getChipColor(item.status.id)}>{item.status.text}</Chip>;\n    return "";\n  }, []);\n\n  return (\n    <Table\n      isStriped\n      aria-label="Oders table"\n      sortDescriptor={sortDescriptor}\n      onSortChange={(e) => {\n        const sorter: CrudSort = {\n          order: e.direction === "ascending" ? "asc" : "desc",\n          field: `${e.column}`,\n        };\n\n        switch (e.column) {\n          case "user":\n            sorter.field = "user.fullName";\n            break;\n          case "gender":\n            sorter.field = "user.gender";\n            break;\n          case "gsm":\n            sorter.field = "user.gsm";\n            break;\n          case "address":\n            sorter.field = "address.text";\n            break;\n          case "status":\n            sorter.field = "status.text";\n            break;\n          default:\n            break;\n        }\n        setSorters([sorter]);\n        setSortDescriptor(e);\n      }}\n      topContent={\n        <div className="flex justify-between gap-3">\n          <h2 className="font-bold whitespace-nowrap">Recent sales</h2>\n          <Input\n            isClearable\n            className="w-full sm:max-w-[20%]"\n            placeholder="Search"\n            startContent={<MagnifyingGlassIcon width={12} />}\n            value={getDefaultFilter("q", filters)}\n            onClear={() => {\n              setCurrent(1);\n              setFilters([], "replace");\n            }}\n            onValueChange={(value) => {\n              if (!value.trim()) {\n                setCurrent(1);\n                setFilters([], "replace");\n                return;\n              }\n\n              setCurrent(1);\n              setFilters([\n                {\n                  field: "q",\n                  value: value,\n                  operator: "contains",\n                },\n              ]);\n            }}\n          />\n        </div>\n      }\n      bottomContent={\n        <div className="flex w-full gap-2 justify-center">\n          <Pagination\n            isCompact\n            showControls\n            showShadow\n            color="primary"\n            page={current}\n            total={pageCount}\n            onChange={(page) => setCurrent(page)}\n          />\n          <Dropdown>\n            <DropdownTrigger>\n              <Button variant="bordered" className="capitalize">\n                Rows per page\n              </Button>\n            </DropdownTrigger>\n            <DropdownMenu\n              aria-label="Select number of rows per page"\n              variant="flat"\n              color="primary"\n              disallowEmptySelection\n              selectionMode="single"\n              selectedKeys={[`${pageSize}`]}\n              onSelectionChange={(rows) => {\n                setPageSize(+(rows as Set<string>).values().next().value);\n              }}\n            >\n              {[5, 10, 25, 50].map((rowsPerPage) => {\n                return <DropdownItem key={`${rowsPerPage}`}>{`${rowsPerPage}`}</DropdownItem>;\n              })}\n            </DropdownMenu>\n          </Dropdown>\n        </div>\n      }\n    >\n      <TableHeader columns={columns}>\n        {(column) => (\n          <TableColumn allowsSorting={column.sortable} key={column.key}>\n            {column.header}\n          </TableColumn>\n        )}\n      </TableHeader>\n      {orders.length ? (\n        <TableBody items={orders}>\n          {(item) => {\n            return (\n              <TableRow key={item.id}>\n                {(columnKey) => {\n                  return <TableCell>{getCellContents(columnKey as string, item)}</TableCell>;\n                }}\n              </TableRow>\n            );\n          }}\n        </TableBody>\n      ) : (\n        <TableBody emptyContent={"Loading..."}>{[]}</TableBody>\n      )}\n    </Table>\n  );\n};\n'))),(0,a.kt)("p",null,"The above component uses the built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"Table")," component to display the recent sales. The built-in NextUI ",(0,a.kt)("inlineCode",{parentName:"p"},"Table")," has out-of-the-box support for pagination, sorting, filtering, and selection."),(0,a.kt)("p",null,"Similarly, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/table/index.ts")," file. You can export the component created above from it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/components/table/index.ts"',title:'"src/components/table/index.ts"'},'export { RecentSalesTable } from "./RecentSalesTable";\n')),(0,a.kt)("p",null,"Import the ",(0,a.kt)("inlineCode",{parentName:"p"},"RecentSalesTable")," component we created above into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/dashboard/DashboardPage.tsx")," file and render it like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/DashboardPage.tsx"',title:'"src/pages/dashboard/DashboardPage.tsx"'},'...\n\n//highlight-next-line\nimport { RecentSalesTable } from "../../components/table";\n...\n\nexport const DashboardPage: React.FC = () => {\n  ...\n\n  return (\n    <main className="flex w-full flex-col mt-5 gap-3">\n      <h1 className="font-bold">Dashboards</h1>\n      ...\n      //highlight-next-line\n      <RecentSalesTable />\n    </main>\n  );\n};\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<RecentSalesTable />")," component we created above will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/recent-sales.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"how-to-build-product-crud-pages-with-nextui-and-refine"},"How to build product CRUD pages with NextUI and refine"),(0,a.kt)("p",null,"In the project template we created using refine.dev, there are CRUD pages for categories in the database. In this section, we will create similar CRUD pages for products using NextUI. Let's start by creating the list page."),(0,a.kt)("h3",{id:"products-list-page"},"Products list page"),(0,a.kt)("p",null,"The restaurant API we are sourcing data from has a list of products that we will fetch and display in a table. The table will have features for pagination, searching, and sorting products in ascending, descending, or alphabetical order. Users can create, view, delete, or modify an existing product from the same page."),(0,a.kt)("p",null,"We will render a modal if a user wants to delete a record from our products table. Let's extract the logic for our modal into a separate reusable component. We will use NextUI's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"Modal")," component."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/modal/index.tsx")," file. Copy and paste the code below into it. The ",(0,a.kt)("inlineCode",{parentName:"p"},"modal")," component doesn't exist yet. Therefore, you need to first create it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/modal/index.tsx"',title:'"src/components/modal/index.tsx"'},'import React from "react";\nimport { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button } from "@nextui-org/react";\n\nimport { IDeleteModalProps } from "../../interfaces";\n\nexport const DeleteModal: React.FC<IDeleteModalProps> = ({ isOpen, onOpenChange, onDelete, warningMessage }) => {\n  return (\n    <Modal isOpen={isOpen} backdrop="opaque" onOpenChange={onOpenChange}>\n      <ModalContent>\n        {(onClose) => (\n          <>\n            <ModalHeader className="flex flex-col gap-1">Product deletion</ModalHeader>\n            <ModalBody>\n              <p>{warningMessage}</p>\n            </ModalBody>\n            <ModalFooter>\n              <Button color="primary" variant="light" onPress={onClose}>\n                Close\n              </Button>\n              <Button\n                color="danger"\n                onPress={() => {\n                  onClose();\n                  onDelete();\n                }}\n              >\n                Delete\n              </Button>\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n};\n')),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/list.tsx")," file. Copy and paste the code below into it. Be aware that the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," directory doesn't exist yet. You need to first create it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show ProductList Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/products/list.tsx"',title:'"src/pages/products/list.tsx"'},'import {\n  IResourceComponentsProps,\n  useTable,\n  getDefaultFilter,\n  useNavigation,\n  useDelete,\n  useMany,\n  CrudSort,\n} from "@refinedev/core";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Pagination,\n  Input,\n  Button,\n  useDisclosure,\n  SortDescriptor,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n} from "@nextui-org/react";\n\nimport { TrashIcon, EyeIcon, PencilIcon, MagnifyingGlassIcon, PlusIcon } from "@heroicons/react/24/outline";\n\nimport { ICategory, IProduct } from "../../interfaces";\n\nimport { DeleteModal } from "../../components/modal";\nimport { useState, useCallback } from "react";\nimport { formatCurrency } from "../../components/table/RecentSalesTable";\n\nconst columns = [\n  { header: "Id", key: "id", sortable: true },\n  { header: "Name", key: "name", sortable: true },\n  { header: "Price", key: "price", sortable: true },\n  { header: "Category", key: "category", sortable: true },\n  { header: "Description", key: "description", sortable: true },\n  { header: "Actions", key: "actions", sortable: false },\n];\n\nexport const ProductList: React.FC<IResourceComponentsProps> = () => {\n  const { tableQueryResult, pageCount, current, pageSize, filters, setCurrent, setPageSize, setSorters, setFilters } =\n    useTable();\n  const { edit, show, create } = useNavigation();\n  const { mutate: deleteProduct } = useDelete();\n  const { isOpen, onOpen, onOpenChange } = useDisclosure();\n  const [deleteItemId, setDeleteItemId] = useState<null | number>(null);\n  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({\n    column: "id",\n    direction: "ascending",\n  });\n\n  const products = tableQueryResult?.data?.data ?? [];\n\n  const { data: categoryData } = useMany<ICategory>({\n    resource: "categories",\n    ids: products?.map((item) => item?.category?.id) ?? [],\n    queryOptions: {\n      enabled: !!products,\n    },\n  });\n\n  const renderCell = useCallback(\n    (columnKey: string, item: IProduct) => {\n      if (columnKey === "category") {\n        const category = categoryData?.data?.find((categoryObj) => {\n          return categoryObj.id === item.category.id;\n        });\n        return <TableCell>{category?.title ?? "Unknown"}</TableCell>;\n      }\n\n      if (columnKey === "price") {\n        return <TableCell>{formatCurrency(item.price)}</TableCell>;\n      }\n\n      if (columnKey === "actions") {\n        return (\n          <TableCell>\n            <div className="flex gap-4 items-center justify-end">\n              <Button\n                isIconOnly\n                size="sm"\n                variant="light"\n                color="default"\n                aria-label="Edit"\n                className="rounded-full"\n                onPress={() => {\n                  edit("products", item.id);\n                }}\n              >\n                <PencilIcon className="h-4 w-4" />\n              </Button>\n              <Button\n                isIconOnly\n                variant="light"\n                color="default"\n                size="sm"\n                aria-label="View"\n                className="rounded-full"\n                onPress={() => {\n                  show("products", item.id);\n                }}\n              >\n                <EyeIcon className="h-4 w-4" />\n              </Button>\n              <Button\n                isIconOnly\n                variant="light"\n                color="danger"\n                size="md"\n                aria-label="Delete"\n                className="rounded-full"\n                onPress={() => {\n                  setDeleteItemId(item.id);\n                  onOpen();\n                }}\n              >\n                <TrashIcon className="h-4 w-4" />\n              </Button>\n            </div>\n          </TableCell>\n        );\n      }\n\n      return <TableCell>{(item as any)[columnKey]}</TableCell>;\n    },\n    [products, categoryData],\n  );\n\n  return (\n    <>\n      <Table\n        isStriped\n        aria-label="Products table"\n        sortDescriptor={sortDescriptor}\n        onSortChange={(e) => {\n          const sorter: CrudSort = {\n            order: e.direction === "ascending" ? "asc" : "desc",\n            field: e.column as string,\n          };\n\n          if (e.column === "category") {\n            sorter.field = "category.title";\n          }\n\n          setSorters([sorter]);\n          setSortDescriptor(e);\n        }}\n        topContent={\n          <div className="flex flex-col gap-4">\n            <div className="flex justify-between gap-3">\n              <h1 className="font-bold">Products</h1>\n              <Button\n                color="primary"\n                variant="bordered"\n                startContent={<PlusIcon className="h-4 w-4" />}\n                onPress={() => {\n                  create("products");\n                }}\n              >\n                Create Product\n              </Button>\n            </div>\n            <div className="flex justify-end">\n              <Input\n                isClearable\n                className="w-full sm:max-w-[20%]"\n                placeholder="Search"\n                startContent={<MagnifyingGlassIcon width={12} />}\n                value={getDefaultFilter("q", filters)}\n                onClear={() => {\n                  setCurrent(1);\n                  setFilters([], "replace");\n                }}\n                onValueChange={(value) => {\n                  if (!value.trim()) {\n                    setCurrent(1);\n                    setFilters([], "replace");\n                    return;\n                  }\n\n                  setCurrent(1);\n                  setFilters([\n                    {\n                      field: "q",\n                      value: value,\n                      operator: "contains",\n                    },\n                  ]);\n                }}\n              />\n            </div>\n          </div>\n        }\n        bottomContent={\n          <div className="flex w-full gap-2 justify-center">\n            <Pagination\n              isCompact\n              showControls\n              showShadow\n              color="primary"\n              page={current}\n              total={pageCount}\n              onChange={(page) => setCurrent(page)}\n            />\n            <Dropdown>\n              <DropdownTrigger>\n                <Button variant="bordered" className="capitalize">\n                  Rows per page\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                aria-label="Select number of rows per page"\n                variant="flat"\n                color="primary"\n                disallowEmptySelection\n                selectionMode="single"\n                selectedKeys={[`${pageSize}`]}\n                onSelectionChange={(rows) => {\n                  setPageSize(+(rows as Set<string>).values().next().value);\n                }}\n              >\n                {[5, 10, 25, 50].map((rowsPerPage) => {\n                  return <DropdownItem key={`${rowsPerPage}`}>{`${rowsPerPage}`}</DropdownItem>;\n                })}\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        }\n      >\n        <TableHeader columns={columns}>\n          {(column) => {\n            if (column.key === "actions") {\n              return (\n                <TableColumn allowsSorting={column.sortable} key={column.key} className="text-end pr-16">\n                  {column.header}\n                </TableColumn>\n              );\n            }\n            return (\n              <TableColumn allowsSorting={column.sortable} key={column.key}>\n                {column.header}\n              </TableColumn>\n            );\n          }}\n        </TableHeader>\n        {products.length ? (\n          <TableBody items={products}>\n            {(item) => {\n              return (\n                <TableRow key={item.id}>\n                  {(columnKey) => {\n                    return renderCell(columnKey as string, item as IProduct);\n                  }}\n                </TableRow>\n              );\n            }}\n          </TableBody>\n        ) : (\n          <TableBody emptyContent={"No rows to display."}>{[]}</TableBody>\n        )}\n      </Table>\n      {isOpen ? (\n        <DeleteModal\n          isOpen={isOpen}\n          onDelete={() => deleteProduct({ resource: "products", id: deleteItemId as number })}\n          onOpenChange={onOpenChange}\n          warningMessage={`You are about to delete product with id ${deleteItemId} from the database. This action is irreversible.`}\n        />\n      ) : null}\n    </>\n  );\n};\n'))),(0,a.kt)("p",null,"The above component uses refine's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook to query the data. It returns the data in a form that can be displayed in a table."),(0,a.kt)("p",null,"We used NextUI's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"Table")," component that supports sorting, selection, and pagination out of the box. Check the ",(0,a.kt)("a",{parentName:"p",href:"https://nextui.org/docs/guide/introduction"},"NextUI documentation")," to learn more about the ",(0,a.kt)("inlineCode",{parentName:"p"},"Table")," component."),(0,a.kt)("p",null,"Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/index.ts")," file and export the above component, as in the example below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/products/index.ts"',title:'"src/pages/products/index.ts"'},'//highlight-next-line\nexport { ProductList } from "./list";\n')),(0,a.kt)("p",null,"We need to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," resource to the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine />")," component. Therefore, add the following changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show App.tsx Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { ErrorComponent, GitHubBanner, Refine } from "@refinedev/core";\nimport { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";\n\nimport routerBindings, {\n  DocumentTitleHandler,\n  NavigateToResource,\n  UnsavedChangesNotifier,\n} from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\nimport { useTranslation } from "react-i18next";\nimport { BrowserRouter, Outlet, Route, Routes } from "react-router-dom";\nimport { Layout } from "./components/layout";\nimport { DashboardPage } from "./pages/dashboard";\n//highlight-next-line\nimport { ProductList } from "./pages/products";\nimport { CategoryCreate, CategoryEdit, CategoryList, CategoryShow } from "./pages/categories";\n\nfunction App() {\n  const { t, i18n } = useTranslation();\n\n  const i18nProvider = {\n    translate: (key: string, params: object) => t(key, params),\n    changeLocale: (lang: string) => i18n.changeLanguage(lang),\n    getLocale: () => i18n.language,\n  };\n\n  return (\n    <BrowserRouter>\n      <GitHubBanner />\n      <RefineKbarProvider>\n        <Refine\n          dataProvider={dataProvider("https://api.finefoods.refine.dev")}\n          i18nProvider={i18nProvider}\n          routerProvider={routerBindings}\n          resources={[\n            {\n              name: "dashboard",\n              list: "/dashboard",\n            },\n            //highlight-start\n            {\n              name: "products",\n              list: "/products",\n              create: "/products/create",\n              edit: "/products/edit/:id",\n              show: "/products/show/:id",\n              meta: {\n                canDelete: true,\n              },\n            },\n            //highlight-end\n            {\n              name: "categories",\n              list: "/categories",\n              create: "/categories/create",\n              edit: "/categories/edit/:id",\n              show: "/categories/show/:id",\n              meta: {\n                canDelete: true,\n              },\n            },\n          ]}\n          options={{\n            syncWithLocation: true,\n            warnWhenUnsavedChanges: true,\n            projectId: "rhafgh-aLP9JS-0GTfcM",\n          }}\n        >\n          <Routes>\n            <Route\n              element={\n                <Layout>\n                  <Outlet />\n                </Layout>\n              }\n            >\n              <Route index element={<NavigateToResource resource="dashboard" />} />\n              <Route path="/dashboard">\n                <Route index element={<DashboardPage />} />\n              </Route>\n              //highlight-start\n              <Route path="/products">\n                <Route index element={<ProductList />} />\n              </Route>\n              //highlight-end\n              <Route path="/categories">\n                <Route index element={<CategoryList />} />\n                <Route path="create" element={<CategoryCreate />} />\n                <Route path="edit/:id" element={<CategoryEdit />} />\n                <Route path="show/:id" element={<CategoryShow />} />\n              </Route>\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n\n          <RefineKbar />\n          <UnsavedChangesNotifier />\n          <DocumentTitleHandler />\n        </Refine>\n      </RefineKbarProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n'))),(0,a.kt)("p",null,"The products list page should now look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/products-list.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"products-create-page"},"Products create page"),(0,a.kt)("p",null,"The list page we created in the previous sub-section has a button for creating a new product. Clicking it will navigate you to a blank page at the moment."),(0,a.kt)("p",null,"Let's create a component that will render when a user wants to create a new product. The component will render a form that a user can fill and submit to create a new product. To easily manage the forms, we will use react-hook-forms."),(0,a.kt)("p",null,"The headless refine project template we created using the refine.new platform integrates the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/react-hook-form"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/react-hook-form"))," adapter out of the box. However, we need to install ",(0,a.kt)("inlineCode",{parentName:"p"},"react-hook-form")," to use some of the features the ",(0,a.kt)("inlineCode",{parentName:"p"},"@refinedev/react-hook-form")," adapter doesn't export."),(0,a.kt)("p",null,"Use the command below to install ",(0,a.kt)("inlineCode",{parentName:"p"},"react-hook-form"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install react-hook-form\n")),(0,a.kt)("p",null,"After successfully installing ",(0,a.kt)("inlineCode",{parentName:"p"},"react-hook-form"),", create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/create.tsx")," file. Copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show ProductCreate code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/products/create.tsx"',title:'"src/pages/products/create.tsx"'},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport { HttpError, useBack, useSelect } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nimport {\n  Button,\n  Card,\n  Input,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Textarea,\n} from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nimport { IProduct, IProductCategory } from "../../interfaces";\n\nexport const ProductCreate: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const {\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<IProduct, HttpError, IProduct>({\n    defaultValues: {\n      name: "",\n      description: "",\n    },\n  });\n\n  const { options: categoryOptions } = useSelect<IProductCategory>({\n    resource: "categories",\n  });\n\n  return (\n    <div>\n      <Card className="shadow-1 p-5">\n        <div className="flex items-center">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to products page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n          <h1 className="font-bold">Create Product</h1>\n        </div>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div className="p-fluid">\n            <Controller\n              name="name"\n              control={control}\n              rules={{ required: "Name is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Name"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter product name"\n                    value={field.value ?? ""}\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    type="text"\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name="price"\n              control={control}\n              rules={{\n                required: "Price is required.",\n              }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Price"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter price"\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    type="number"\n                    min="0"\n                    value={`${field.value ?? ""}`}\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                    className="mt-5"\n                  />\n                );\n              }}\n            />\n            <Controller\n              name="category.id"\n              control={control}\n              rules={{ required: "Category is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Dropdown id="options-categories">\n                    <DropdownTrigger>\n                      <Button className="mt-5" variant="bordered">\n                        Select product category\n                      </Button>\n                    </DropdownTrigger>\n                    <DropdownMenu\n                      aria-label="Select category"\n                      selectionMode="single"\n                      selectedKeys={[field.value ?? categoryOptions[0]?.label ?? ""]}\n                      onSelectionChange={(selectedItem) => {\n                        field.onChange((selectedItem as Set<string>).values().next().value);\n                      }}\n                    >\n                      {categoryOptions.map((categoryOption) => {\n                        return <DropdownItem key={`${categoryOption.label}`}>{categoryOption.label}</DropdownItem>;\n                      })}\n                    </DropdownMenu>\n                  </Dropdown>\n                );\n              }}\n            />\n            <Controller\n              name="description"\n              control={control}\n              rules={{ required: "Description is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Textarea\n                    label="Description"\n                    placeholder="Enter product description here"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    value={field.value ?? ""}\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                    className="mt-5"\n                  />\n                );\n              }}\n            />\n          </div>\n          <div className="flex justify-content-end">\n            <Button type="submit" isLoading={formLoading} color="primary" className="mt-5">\n              Save Product\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,"Export the above component from the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/index.ts")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/products/index.ts"',title:'"src/pages/products/index.ts"'},'export { ProductList } from "./list";\n//highlight-next-line\nexport { ProductCreate } from "./create";\n')),(0,a.kt)("p",null,"Finally, render the above component in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file when a user navigates to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/create")," route. Add the highlighted changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n//highlight-next-line\nimport { ProductList, ProductCreate } from "./pages/products";\n...\n\n  return (\n        <Refine\n         ...\n        >\n          <Routes>\n          ...\n              <Route path="/products">\n                <Route index element={<ProductList />} />\n                //highlight-next-line\n                <Route path="create" element={<ProductCreate />} />\n              </Route>\n               ...\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n  );\n}\n\nexport default App;\n')),(0,a.kt)("p",null,"The above component will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/products-create.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"products-edit-page"},"Products edit page"),(0,a.kt)("p",null,"The products table we created above has an actions column that you can use to edit, show, and delete a record. Clicking the edit button takes you to a blank page at the moment."),(0,a.kt)("p",null,"Let's create a component for editing an existing record in the products table. Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/edit.tsx")," file. Copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show ProductEdit code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/products/edit.tsx"',title:'"src/pages/products/edit.tsx"'},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport { HttpError, useBack, useSelect } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nimport {\n  Button,\n  Card,\n  Input,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Textarea,\n} from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nimport { IProduct, IProductCategory } from "../../interfaces";\n\nexport const ProductEdit: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const {\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<IProduct, HttpError, IProduct>({\n    defaultValues: {\n      name: "",\n      description: "",\n    },\n  });\n\n  const { options: categoryOptions } = useSelect<IProductCategory>({\n    resource: "categories",\n  });\n\n  return (\n    <div>\n      <Card className="shadow-1 p-5">\n        <div className="flex items-center">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to products page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n          <h1 className="text-lg font-bold">Edit Product</h1>\n        </div>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div className="p-fluid">\n            <Controller\n              name="name"\n              control={control}\n              rules={{ required: "Name is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Name"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter product name"\n                    value={field.value ?? ""}\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    type="text"\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                  />\n                );\n              }}\n            />\n            <Controller\n              name="price"\n              control={control}\n              rules={{\n                required: "Price is required.",\n              }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Price"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter price"\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    type="number"\n                    min="0"\n                    value={`${field.value ?? ""}`}\n                    onChange={(ev) => field.onChange(+ev.target.value)}\n                    className="mt-5"\n                  />\n                );\n              }}\n            />\n            <Controller\n              name="category.id"\n              control={control}\n              rules={{ required: "Category is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Dropdown id="options-categories">\n                    <DropdownTrigger>\n                      <Button className="mt-5" variant="bordered">\n                        Select product category\n                      </Button>\n                    </DropdownTrigger>\n                    <DropdownMenu\n                      aria-label="Select category"\n                      selectionMode="single"\n                      selectedKeys={[`${field.value}`]}\n                      onSelectionChange={(selectedItem) => {\n                        field.onChange(+(selectedItem as Set<string>).values().next().value);\n                      }}\n                    >\n                      {categoryOptions.map((categoryOption) => {\n                        return <DropdownItem key={categoryOption.value}>{categoryOption.label}</DropdownItem>;\n                      })}\n                    </DropdownMenu>\n                  </Dropdown>\n                );\n              }}\n            />\n            <Controller\n              name="description"\n              control={control}\n              rules={{ required: "Description is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Textarea\n                    label="Description"\n                    placeholder="Enter product description here"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    errorMessage={errors[field.name]?.message ?? ""}\n                    value={field.value ?? ""}\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                    className="mt-5"\n                  />\n                );\n              }}\n            />\n          </div>\n          <div className="flex justify-content-end">\n            <Button type="submit" isLoading={formLoading} color="primary" className="mt-5">\n              Save Product\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,"Export the above component from the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/index.ts")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/products/index.ts"',title:'"src/pages/products/index.ts"'},'export { ProductList } from "./list";\nexport { ProductCreate } from "./create";\n//highlight-next-line\nexport { ProductEdit } from "./edit";\n')),(0,a.kt)("p",null,"You can import the ",(0,a.kt)("inlineCode",{parentName:"p"},"<ProductEdit />")," component into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file and render it on the ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," route. Add the following highlighted changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\n//highlight-next-line\nimport { ProductList, ProductCreate, ProductEdit } from "./pages/products";\n\nfunction App() {\n\n  ...\n\n  return (\n        <Refine\n          ...\n        >\n          <Routes>\n              ...\n              <Route path="/products">\n                <Route index element={<ProductList />} />\n                <Route path="create" element={<ProductCreate />} />\n                //highlight-next-line\n                <Route path="edit/:id" element={<ProductEdit />} />\n              </Route>\n               ...\n              <Route path="*" element={<ErrorComponent />} />\n            </Route>\n          </Routes>\n          ...\n        </Refine>\n  );\n}\n\nexport default App;\n')),(0,a.kt)("p",null,"The above component should now look like the image below after rendering. You can edit any record in the products table by clicking the edit button under the actions column. You can also do so by pointing the browser to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/products/edit")," route."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/products-edit.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"products-show-page"},"Products show page"),(0,a.kt)("p",null,"Similar to editing an existing record in the products table, we can also show the details of a record. Clicking the show button under the actions column displays a blank page at the moment."),(0,a.kt)("p",null,"Let's create a component that shows the details of a specific product. Create the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/show.tsx")," file. Copy and paste the code below into it."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show ProductShow code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/products/show.tsx"',title:'"src/pages/products/show.tsx"'},'import { useBack, useOne, useShow, IResourceComponentsProps } from "@refinedev/core";\nimport { ICategory, IProduct } from "../../interfaces";\nimport { Button, Card, CardHeader, CardBody, Image } from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nconst currencyFormatter = Intl.NumberFormat("en-US", {\n  style: "currency",\n  currency: "USD",\n});\n\nexport const ProductShow: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const { queryResult } = useShow<IProduct>();\n  const product = queryResult?.data?.data;\n\n  const { data: categoryData } = useOne<ICategory>({\n    resource: "categories",\n    id: product?.category.id,\n    queryOptions: {\n      enabled: !!product?.category.id,\n    },\n  });\n\n  return (\n    <div className="my-3">\n      <Card className="rounded-none">\n        <div className="flex items-center px-5">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to products page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n\n          <h1 className="text-lg font-bold">Show product</h1>\n        </div>\n        <CardBody>\n          <CardHeader className="text-lg font-bold p-5">\n            <h2>Product details</h2>\n          </CardHeader>\n          <CardBody>\n            {product?.images?.length ? <Image src={product.images[0].url} width={300} alt={product.name} /> : null}\n            <h2 className="text-base font-medium mt-3">Name</h2>\n            <p>{product?.name}</p>\n            <h2 className="text-base font-medium mt-3">Price</h2>\n            <p>{currencyFormatter.format(product?.price ?? 0)}</p>\n            <h2 className="text-base font-medium mt-3">Category</h2>\n            <p>{categoryData?.data.title}</p>\n            <h2 className="text-base font-medium mt-3">Description</h2>\n            <p>{product?.description}</p>\n          </CardBody>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,"Export the component we have created above from the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/products/show.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/pages/products/show.tsx"',title:'"src/pages/products/show.tsx"'},'export { ProductList } from "./list";\nexport { ProductCreate } from "./create";\nexport { ProductEdit } from "./edit";\n//highlight-next-line\nexport { ProductShow } from "./show";\n')),(0,a.kt)("p",null,"Finally, add the following highligthed changes to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/App.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show App.tsx code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'...\nimport {\n  ProductList,\n  ProductCreate,\n  ProductEdit,\n  //highlight-next-line\n  ProductShow,\n} from "./pages/products";\n...\n\nfunction App() {\n  ...\n\n  return (\n\n        <Refine\n         ...\n        >\n          <Routes>\n               ...\n              <Route path="/products">\n                <Route index element={<ProductList />} />\n                <Route path="create" element={<ProductCreate />} />\n                <Route path="edit/:id" element={<ProductEdit />} />\n                //highlight-next-line\n                <Route path="show/:id" element={<ProductShow />} />\n              </Route>\n              ...\n        </Refine>\n  );\n}\n\nexport default App;\n'))),(0,a.kt)("p",null,"The above component will look like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/products-show.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"how-to-build-categories-crud-pages-with-nextui-and-refine"},"How to build categories CRUD pages with NextUI and refine"),(0,a.kt)("p",null,"Like the product CRUD pages we created above, let's create CRUD pages for the categories in the database. The categories are sourced from the ",(0,a.kt)("a",{parentName:"p",href:"https://api.finefoods.refine.dev/categories"},"categories")," endpoint of the fake REST API. You can follow the link to explore the available resources."),(0,a.kt)("h3",{id:"categories-list-page"},"Categories list page"),(0,a.kt)("p",null,"This page will display the categories in tabular form. The table will have features for sorting and searching. We will also include features for updating and deleting items from the table."),(0,a.kt)("p",null,"Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/categories/list.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show CategoryList code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/categories/list.tsx"',title:'"src/pages/categories/list.tsx"'},'import {\n  IResourceComponentsProps,\n  useTable,\n  getDefaultFilter,\n  useNavigation,\n  useDelete,\n  CrudSort,\n} from "@refinedev/core";\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Pagination,\n  Input,\n  Button,\n  useDisclosure,\n  SortDescriptor,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n} from "@nextui-org/react";\n\nimport { TrashIcon, EyeIcon, PencilIcon, MagnifyingGlassIcon, PlusIcon } from "@heroicons/react/24/outline";\n\nimport { IProduct } from "../../interfaces";\n\nimport { DeleteModal } from "../../components/modal";\nimport { useState, useCallback } from "react";\n\nconst columns = [\n  { header: "Id", key: "id", sortable: true },\n  { header: "Name", key: "title", sortable: true },\n  { header: "Actions", key: "actions", sortable: false },\n];\n\nexport const CategoryList: React.FC<IResourceComponentsProps> = () => {\n  const { tableQueryResult, pageCount, current, pageSize, filters, setCurrent, setPageSize, setSorters, setFilters } =\n    useTable({\n      pagination: {\n        pageSize: 5,\n      },\n    });\n  const { edit, show, create } = useNavigation();\n  const { mutate: deleteCategory } = useDelete();\n  const { isOpen, onOpen, onOpenChange } = useDisclosure();\n  const [deleteItemId, setDeleteItemId] = useState<null | number>(null);\n  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({\n    column: "id",\n    direction: "ascending",\n  });\n\n  const categories = tableQueryResult?.data?.data ?? [];\n\n  const renderCell = useCallback((columnKey: string, item: IProduct) => {\n    if (columnKey === "actions") {\n      return (\n        <TableCell>\n          <div className="flex gap-4 items-center justify-end">\n            <Button\n              isIconOnly\n              size="sm"\n              variant="light"\n              color="default"\n              aria-label="Edit"\n              className="rounded-full"\n              onPress={() => {\n                edit("categories", item.id);\n              }}\n            >\n              <PencilIcon className="h-4 w-4" />\n            </Button>\n            <Button\n              isIconOnly\n              variant="light"\n              color="default"\n              size="sm"\n              aria-label="View"\n              className="rounded-full"\n              onPress={() => {\n                show("categories", item.id);\n              }}\n            >\n              <EyeIcon className="h-4 w-4" />\n            </Button>\n            <Button\n              isIconOnly\n              variant="light"\n              color="danger"\n              size="md"\n              aria-label="Delete"\n              className="rounded-full"\n              onPress={() => {\n                setDeleteItemId(item.id);\n                onOpen();\n              }}\n            >\n              <TrashIcon className="h-4 w-4" />\n            </Button>\n          </div>\n        </TableCell>\n      );\n    }\n\n    return <TableCell>{(item as any)[columnKey]}</TableCell>;\n  }, []);\n\n  return (\n    <>\n      <Table\n        isStriped\n        aria-label="Products table"\n        sortDescriptor={sortDescriptor}\n        onSortChange={(e) => {\n          const sorter: CrudSort = {\n            order: e.direction === "ascending" ? "asc" : "desc",\n            field: e.column as string,\n          };\n\n          setSorters([sorter]);\n          setSortDescriptor(e);\n        }}\n        topContent={\n          <div className="flex flex-col gap-4">\n            <div className="flex justify-between gap-3">\n              <h1 className="font-bold">Categories</h1>\n              <Button\n                color="primary"\n                variant="bordered"\n                startContent={<PlusIcon className="h-4 w-4" />}\n                onPress={() => {\n                  create("categories");\n                }}\n              >\n                Create Category\n              </Button>\n            </div>\n            <div className="flex justify-end items-center">\n              <Input\n                isClearable\n                className="w-full sm:max-w-[20%]"\n                placeholder="Search"\n                startContent={<MagnifyingGlassIcon width={12} />}\n                value={getDefaultFilter("q", filters)}\n                onClear={() => {\n                  setCurrent(1);\n                  setFilters([], "replace");\n                }}\n                onValueChange={(value) => {\n                  if (!value.trim()) {\n                    setCurrent(1);\n                    setFilters([], "replace");\n                    return;\n                  }\n\n                  setCurrent(1);\n                  setFilters([\n                    {\n                      field: "q",\n                      value: value,\n                      operator: "contains",\n                    },\n                  ]);\n                }}\n              />\n            </div>\n          </div>\n        }\n        bottomContent={\n          <div className="flex w-full gap-2 justify-center">\n            <Pagination\n              isCompact\n              showControls\n              showShadow\n              color="primary"\n              page={current}\n              total={pageCount}\n              onChange={(page) => setCurrent(page)}\n            />\n            <Dropdown>\n              <DropdownTrigger>\n                <Button variant="bordered" className="capitalize">\n                  Rows per page\n                </Button>\n              </DropdownTrigger>\n              <DropdownMenu\n                aria-label="Select number of rows per page"\n                variant="flat"\n                color="primary"\n                disallowEmptySelection\n                selectionMode="single"\n                selectedKeys={[`${pageSize}`]}\n                onSelectionChange={(rows) => {\n                  setPageSize(+(rows as Set<string>).values().next().value);\n                }}\n              >\n                {[5, 10].map((rowsPerPage) => {\n                  return <DropdownItem key={`${rowsPerPage}`}>{`${rowsPerPage}`}</DropdownItem>;\n                })}\n              </DropdownMenu>\n            </Dropdown>\n          </div>\n        }\n      >\n        <TableHeader columns={columns}>\n          {(column) => {\n            if (column.key === "actions") {\n              return (\n                <TableColumn allowsSorting={column.sortable} key={column.key} className="text-end pr-16">\n                  {column.header}\n                </TableColumn>\n              );\n            }\n            return (\n              <TableColumn allowsSorting={column.sortable} key={column.key}>\n                {column.header}\n              </TableColumn>\n            );\n          }}\n        </TableHeader>\n        {categories.length ? (\n          <TableBody items={categories}>\n            {(item) => {\n              return (\n                <TableRow key={item.id}>\n                  {(columnKey) => {\n                    return renderCell(columnKey as string, item as IProduct);\n                  }}\n                </TableRow>\n              );\n            }}\n          </TableBody>\n        ) : (\n          <TableBody emptyContent={"Loading...data"}>{[]}</TableBody>\n        )}\n      </Table>\n      {isOpen ? (\n        <DeleteModal\n          isOpen={isOpen}\n          onDelete={() =>\n            deleteCategory({\n              resource: "categories",\n              id: deleteItemId as number,\n            })\n          }\n          onOpenChange={onOpenChange}\n          warningMessage={`You are about to delete category with id ${deleteItemId} from the database. This action is irreversible.`}\n        />\n      ) : null}\n    </>\n  );\n};\n'))),(0,a.kt)("p",null,"The above component will look like the image below after rendering. You can search and sort the contents of the table."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/categories-list.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"categories-create-page"},"Categories create page"),(0,a.kt)("p",null,'You can use this page to create a new product. A user can navigate to it by clicking the "Create Category" button or pointing the browser to the ',(0,a.kt)("inlineCode",{parentName:"p"},"/categories/create")," endpoint in the browser's address bar."),(0,a.kt)("p",null,"Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/categories/create.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show CategoryCreate code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport { HttpError, useBack } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nimport { Button, Card, Input } from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nimport { ICategory } from "../../interfaces";\n\nexport const CategoryCreate: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const {\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<ICategory, HttpError>({\n    defaultValues: {\n      title: "",\n    },\n  });\n\n  return (\n    <div>\n      <Card className="shadow-1 p-5">\n        <div className="flex items-center">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to category page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n          <h1 className="font-bold">Create Category</h1>\n        </div>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div className="p-fluid">\n            <Controller\n              name="title"\n              control={control}\n              rules={{ required: "Name is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Name"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter new category name"\n                    value={field.value ?? ""}\n                    errorMessage={`${errors[field.name]?.message ?? ""}`}\n                    type="text"\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                  />\n                );\n              }}\n            />\n          </div>\n          <div className="flex justify-content-end">\n            <Button type="submit" isLoading={formLoading} color="primary" className="mt-5">\n              Save Category\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,"The above component looks like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/categories-create.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("p",null,'The "Create Category" button on the list page should now work. Clicking or pointing the browser to ',(0,a.kt)("inlineCode",{parentName:"p"},"/ctaegories/create")," will render the component above. You can use the form to create and submit a new category."),(0,a.kt)("h3",{id:"categories-edit-page"},"Categories edit page"),(0,a.kt)("p",null,'Similar to creating a new category, you can also edit an existing category. Currently, when you click the edit button under the "Actions" column in the categories table, you will navigate to a page that is not styled. Let\'s create a new component to render when editing an existing category.'),(0,a.kt)("p",null,"Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"pages/categories/edit.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show CategoryEdit code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/categories/edit.tsx"',title:'"src/pages/categories/edit.tsx"'},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport { HttpError, useBack } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Controller } from "react-hook-form";\n\nimport { Button, Card, Input } from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nimport { ICategory } from "../../interfaces";\n\nexport const CategoryEdit: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const {\n    refineCore: { onFinish, formLoading },\n    handleSubmit,\n    control,\n    formState: { errors },\n  } = useForm<ICategory, HttpError>({\n    defaultValues: {\n      title: "",\n    },\n  });\n\n  return (\n    <div>\n      <Card className="shadow-1 p-5">\n        <div className="flex items-center">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to products page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n          <h1 className="text-lg font-bold">Edit Category</h1>\n        </div>\n        <form onSubmit={handleSubmit(onFinish)}>\n          <div className="p-fluid">\n            <Controller\n              name="title"\n              control={control}\n              rules={{ required: "Name is required." }}\n              render={({ field, fieldState }) => {\n                return (\n                  <Input\n                    label="Name"\n                    variant="bordered"\n                    labelPlacement="outside"\n                    placeholder="Enter category name"\n                    value={field.value ?? ""}\n                    errorMessage={`${errors[field.name]?.message ?? ""}`}\n                    type="text"\n                    onChange={(ev) => field.onChange(ev.target.value)}\n                  />\n                );\n              }}\n            />\n          </div>\n          <div className="flex justify-content-end">\n            <Button type="submit" isLoading={formLoading} color="primary" className="mt-5">\n              Save Category\n            </Button>\n          </div>\n        </form>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,'The above component looks like the image below after rendering. You can edit a category and save the changes using the "Save Category" button.'),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/categories-edit.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"categories-show-page"},"Categories show page"),(0,a.kt)("p",null,"The categories show page displays a specific product category. At the moment when you click the show button under the actions column, you will navigate to a page that's not styled."),(0,a.kt)("p",null,"Let's create a component that displays the contents of a specific category. Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/pages/categories/show.tsx")," file."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show CategoryShow code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/categories/show.tsx"',title:'"src/pages/categories/show.tsx"'},'import { useBack, useShow, IResourceComponentsProps } from "@refinedev/core";\nimport { ICategory } from "../../interfaces";\nimport { Button, Card, CardHeader, CardBody, Image } from "@nextui-org/react";\n\nimport { ArrowLongLeftIcon } from "@heroicons/react/24/outline";\n\nexport const CategoryShow: React.FC<IResourceComponentsProps> = () => {\n  const goBack = useBack();\n\n  const { queryResult } = useShow<ICategory>();\n\n  const category = queryResult?.data?.data;\n\n  return (\n    <div className="my-3">\n      <Card className="rounded-none">\n        <div className="flex items-center px-5">\n          <Button\n            onClick={goBack}\n            className="m-1"\n            color="primary"\n            variant="light"\n            isIconOnly\n            aria-label="Go to categories page"\n          >\n            <ArrowLongLeftIcon width={16} />\n          </Button>\n\n          <h1 className="text-lg font-bold">Show Category</h1>\n        </div>\n        <CardBody>\n          <CardHeader className="text-lg font-bold p-5">\n            <h2>Category details</h2>\n          </CardHeader>\n          <CardBody>\n            {category?.cover ? <Image src={category.cover} width={300} alt={category.title} /> : null}\n            <h2 className="text-base font-medium mt-3">Id</h2>\n            <p>{category?.id ?? 0}</p>\n            <h2 className="text-base font-medium mt-3">Title</h2>\n            <p>{category?.title ?? ""}</p>\n          </CardBody>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n'))),(0,a.kt)("p",null,"The above component looks like the image below after rendering."),(0,a.kt)("div",{className:"centered-image"},(0,a.kt)("img",{style:{alignSelf:"center"},src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-09-20-next-ui-panel/categories-show.png",alt:"react admin panel next ui"})),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"update-the-layout"},"Update the layout"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<Layout />")," component defines the layout of our app. Let's update it by applying some Tailwind CSS classes to it. Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/layout/index.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/layout/index.tsx"',title:'"src/components/layout/index.tsx"'},'import { PropsWithChildren } from "react";\nimport { Breadcrumb } from "../breadcrumb";\nimport { Menu } from "../menu";\n\nexport const Layout: React.FC<PropsWithChildren> = ({ children }) => {\n  return (\n    <div className="mx-2 mb-2">\n      <Menu />\n      <div>\n        <Breadcrumb />\n        <div>{children}</div>\n      </div>\n    </div>\n  );\n};\n')),(0,a.kt)("h3",{id:"update-the-navigation-menu"},"Update the navigation menu"),(0,a.kt)("p",null,"After deleting the styles that came with our project template, the navigation menu is currently unusable. We need to create a new navigation menu with styling that matches the theme in our application."),(0,a.kt)("p",null,"Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/menu/index.tsx"),"\nfile."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/menu/index.tsx"',title:'"src/components/menu/index.tsx"'},'import { useMenu } from "@refinedev/core";\nimport { NavLink } from "react-router-dom";\n\nexport const Menu = () => {\n  const { menuItems } = useMenu();\n  return (\n    <nav className="mb-4">\n      <ul className="flex border-b-1 py-2">\n        {menuItems.map((item) => (\n          <li key={item.key} className="mr-4">\n            <NavLink\n              to={item.route ?? "/"}\n              className={({ isActive, isPending }) => {\n                if (isActive) {\n                  return "text-center block text-blue-500 rounded hover:bg-gray-200 p-2";\n                }\n                return "text-center block border-blue-500 rounded hover:bg-gray-200 p-2";\n              }}\n            >\n              {item.label}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n')),(0,a.kt)("h2",{id:"update-the-breadcrumb"},"Update the breadcrumb"),(0,a.kt)("p",null,"Like the navigation menu above, let's update the breadcrumb so that its styling matches the default NextUI theme. Copy and paste the code below into the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components/breadcrumb/index.tsx")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/breadcrumb/index.tsx"',title:'"src/components/breadcrumb/index.tsx"'},'import { useBreadcrumb } from "@refinedev/core";\nimport { Link } from "react-router-dom";\nimport { ChevronRightIcon } from "@heroicons/react/20/solid";\n\nexport const Breadcrumb = () => {\n  const { breadcrumbs } = useBreadcrumb();\n  if (breadcrumbs.length === 1) return null;\n\n  return (\n    <nav>\n      <ul className="breadcrumb flex gap-4 my-5">\n        {breadcrumbs.map((breadcrumb) => {\n          return (\n            <li key={`breadcrumb-${breadcrumb.label}`}>\n              {breadcrumb.href ? (\n                <span className="flex text-blue-500 hover:text-blue-400">\n                  {" "}\n                  <ChevronRightIcon aria-hidden width={16} /> <Link to={breadcrumb.href}>{breadcrumb.label}</Link>\n                </span>\n              ) : (\n                <span className="flex">\n                  <ChevronRightIcon aria-hidden width={16} /> {breadcrumb.label}\n                </span>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </nav>\n  );\n};\n')),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"As explained above, refine and NextUI come in handy when building data-intensive front-end applications such as dashboards and admin panels."),(0,a.kt)("p",null,"refine has the tools and packages to set up a modern front-end application within its ecosystem."),(0,a.kt)("p",null,"You can easily add design systems and UI libraries such as Chakra UI, Material UI, Ant design, NextUI, and Mantine into a refine project. It also has a variety of packages for integrating modern cloud databases and live providers."),(0,a.kt)("p",null,"NextUI is a React library for building accessible UIs fast. Internally, it uses Tailwind CSS and framer-motion. To use NextUI in a refine or any other React application, install and configure it as highlighted above."),(0,a.kt)("h2",{id:"live-codesandbox-example"},"Live CodeSandbox Example"),(0,a.kt)(u,{path:"blog-refine-nextui",mdxType:"CodeSandboxExample"}))}h.isMDXComponent=!0}}]);