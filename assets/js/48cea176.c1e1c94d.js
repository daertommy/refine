"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[80669],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>N,frontMatter:()=>i,metadata:()=>d,toc:()=>u});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const i={id:"useModalForm",title:"useModalForm",sidebar_label:"useModalForm"},s=void 0,d={unversionedId:"api-reference/mantine/hooks/form/useModalForm",id:"api-reference/mantine/hooks/form/useModalForm",title:"useModalForm",description:"useModalForm hook also allows you to manage a form inside a modal component. It provides some useful methods to handle the form modal.",source:"@site/docs/api-reference/mantine/hooks/form/useModalForm.md",sourceDirName:"api-reference/mantine/hooks/form",slug:"/api-reference/mantine/hooks/form/useModalForm",permalink:"/docs/api-reference/mantine/hooks/form/useModalForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/mantine/hooks/form/useModalForm.md",tags:[],version:"current",lastUpdatedBy:"Refine Community Bot",lastUpdatedAt:1694534991,formattedLastUpdatedAt:"Sep 12, 2023",frontMatter:{id:"useModalForm",title:"useModalForm",sidebar_label:"useModalForm"},sidebar:"someSidebar",previous:{title:"useForm",permalink:"/docs/api-reference/mantine/hooks/form/useForm"},next:{title:"useStepsForm",permalink:"/docs/api-reference/mantine/hooks/form/useStepsForm"}},p={},u=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>refineCoreProps</code>",id:"refinecoreprops",level:3},{value:"<code>initialValues</code>",id:"initialvalues",level:3},{value:"<code>defaultVisible</code>",id:"defaultvisible",level:3},{value:"<code>autoSubmitClose</code>",id:"autosubmitclose",level:3},{value:"<code>autoResetForm</code>",id:"autoresetform",level:3},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>overtimeOptions</code>",id:"overtimeoptions",level:3},{value:"<code>autoSave</code>",id:"autosave",level:3},{value:"<code>enabled</code>",id:"enabled",level:4},{value:"<code>debounce</code>",id:"debounce",level:4},{value:"Return Values",id:"return-values",level:2},{value:"<code>visible</code>",id:"visible",level:3},{value:"<code>title</code>",id:"title",level:3},{value:"<code>close</code>",id:"close",level:3},{value:"<code>submit</code>",id:"submit",level:3},{value:"<code>show</code>",id:"show",level:3},{value:"<code>saveButtonProps</code>",id:"savebuttonprops",level:3},{value:"<code>overtime</code>",id:"overtime",level:3},{value:"<code>autoSaveProps</code>",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=m("Tabs"),k=m("TabItem"),h=m("CodeSandboxExample"),f={toc:u};function N(e){var{components:t}=e,n=l(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},f,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook also allows you to manage a form inside a modal component. It provides some useful methods to handle the form modal."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/next/packages/mantine"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/mantine"))," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook.")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"We will show three examples, ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,a.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,a.kt)(k,{value:"create",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport { List, useModalForm, SaveButton } from "@refinedev/mantine";\nimport {\n    Box,\n    Group,\n    ScrollArea,\n    Table,\n    Pagination,\n    Modal,\n    Select,\n    TextInput,\n} from "@mantine/core";\n\nconst PostList: React.FC = () => {\n    // highlight-start\n    const {\n        getInputProps,\n        saveButtonProps,\n        modal: { show, close, title, visible },\n    } = useModalForm({\n        refineCoreProps: { action: "create" },\n        initialValues: {\n            title: "",\n            status: "",\n            content: "",\n        },\n        validate: {\n            title: (value) => (value.length < 2 ? "Too short title" : null),\n            status: (value) =>\n                value.length <= 0 ? "Status is required" : null,\n        },\n    });\n    // highlight-end\n\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select\n                                defaultValue="published"\n                                data={[\n                                    { label: "Published", value: "published" },\n                                    { label: "Draft", value: "draft" },\n                                    { label: "Rejected", value: "rejected" },\n                                ]}\n                                {...props}\n                            />\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    return (\n        <>\n            {/* highlight-start */}\n            <Modal opened={visible} onClose={close} title={title}>\n                <TextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n                <Select\n                    mt={8}\n                    label="Status"\n                    placeholder="Pick one"\n                    data={[\n                        { label: "Published", value: "published" },\n                        { label: "Draft", value: "draft" },\n                        { label: "Rejected", value: "rejected" },\n                    ]}\n                    {...getInputProps("status")}\n                />\n                <Box\n                    mt={8}\n                    sx={{ display: "flex", justifyContent: "flex-end" }}\n                >\n                    <SaveButton {...saveButtonProps} />\n                </Box>\n            </Modal>\n            {/* highlight-end */}\n            <ScrollArea>\n                {/* highlight-next-line */}\n                <List createButtonProps={{ onClick: () => show() }}>\n                    <Table highlightOnHover>\n                        <thead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <tr key={headerGroup.id}>\n                                    {headerGroup.headers.map((header) => {\n                                        return (\n                                            <th key={header.id}>\n                                                {!header.isPlaceholder && (\n                                                    <Group spacing="xs" noWrap>\n                                                        <Box>\n                                                            {flexRender(\n                                                                header.column\n                                                                    .columnDef\n                                                                    .header,\n                                                                header.getContext(),\n                                                            )}\n                                                        </Box>\n                                                    </Group>\n                                                )}\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            ))}\n                        </thead>\n                        <tbody>\n                            {getRowModel().rows.map((row) => {\n                                return (\n                                    <tr key={row.id}>\n                                        {row.getVisibleCells().map((cell) => {\n                                            return (\n                                                <td key={cell.id}>\n                                                    {flexRender(\n                                                        cell.column.columnDef\n                                                            .cell,\n                                                        cell.getContext(),\n                                                    )}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <br />\n                    <Pagination\n                        position="right"\n                        total={pageCount}\n                        page={current}\n                        onChange={setCurrent}\n                    />\n                </List>\n            </ScrollArea>\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineMantineDemo />);\n'))),(0,a.kt)(k,{value:"edit",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport { List, useModalForm, EditButton, SaveButton } from "@refinedev/mantine";\nimport {\n    Box,\n    Group,\n    ScrollArea,\n    Table,\n    Pagination,\n    Modal,\n    Select,\n    TextInput,\n} from "@mantine/core";\n\nconst PostList: React.FC = () => {\n    // highlight-start\n    const {\n        getInputProps,\n        saveButtonProps,\n        modal: { show, close, title, visible },\n    } = useModalForm({\n        refineCoreProps: { action: "edit" },\n        initialValues: {\n            title: "",\n            status: "",\n            content: "",\n        },\n        validate: {\n            title: (value) => (value.length < 2 ? "Too short title" : null),\n            status: (value) =>\n                value.length <= 0 ? "Status is required" : null,\n        },\n    });\n    // highlight-end\n\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select\n                                defaultValue="published"\n                                data={[\n                                    { label: "Published", value: "published" },\n                                    { label: "Draft", value: "draft" },\n                                    { label: "Rejected", value: "rejected" },\n                                ]}\n                                {...props}\n                            />\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            {/* highlight-start */}\n                            <EditButton\n                                hideText\n                                onClick={() => show(getValue() as number)}\n                            />\n                            {/* highlight-end */}\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    return (\n        <>\n            {/* highlight-start */}\n            <Modal opened={visible} onClose={close} title={title}>\n                <TextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n                <Select\n                    mt={8}\n                    label="Status"\n                    placeholder="Pick one"\n                    data={[\n                        { label: "Published", value: "published" },\n                        { label: "Draft", value: "draft" },\n                        { label: "Rejected", value: "rejected" },\n                    ]}\n                    {...getInputProps("status")}\n                />\n                <Box\n                    mt={8}\n                    sx={{ display: "flex", justifyContent: "flex-end" }}\n                >\n                    <SaveButton {...saveButtonProps} />\n                </Box>\n            </Modal>\n            {/* highlight-end */}\n            <ScrollArea>\n                <List>\n                    <Table highlightOnHover>\n                        <thead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <tr key={headerGroup.id}>\n                                    {headerGroup.headers.map((header) => {\n                                        return (\n                                            <th key={header.id}>\n                                                {!header.isPlaceholder && (\n                                                    <Group spacing="xs" noWrap>\n                                                        <Box>\n                                                            {flexRender(\n                                                                header.column\n                                                                    .columnDef\n                                                                    .header,\n                                                                header.getContext(),\n                                                            )}\n                                                        </Box>\n                                                    </Group>\n                                                )}\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            ))}\n                        </thead>\n                        <tbody>\n                            {getRowModel().rows.map((row) => {\n                                return (\n                                    <tr key={row.id}>\n                                        {row.getVisibleCells().map((cell) => {\n                                            return (\n                                                <td key={cell.id}>\n                                                    {flexRender(\n                                                        cell.column.columnDef\n                                                            .cell,\n                                                        cell.getContext(),\n                                                    )}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <br />\n                    <Pagination\n                        position="right"\n                        total={pageCount}\n                        page={current}\n                        onChange={setCurrent}\n                    />\n                </List>\n            </ScrollArea>\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineMantineDemo />);\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list for ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," to be able to fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n        // --\n        {\n            id: "actions",\n            header: "Actions",\n            accessorKey: "id",\n            enableColumnFilter: false,\n            enableSorting: false,\n            cell: function render({ getValue }) {\n                return (\n                    <Group spacing="xs" noWrap>\n                        <EditButton\n                            hideText\n                            onClick={() => show(getValue() as number)}\n                        />\n                    </Group>\n                );\n            },\n        },\n    ],\n    [],\n);\n\nconst table = useTable({\n    columns,\n});\n'))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,a.kt)(k,{value:"clone",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport React from "react";\nimport { useTable } from "@refinedev/react-table";\nimport { ColumnDef, flexRender } from "@tanstack/react-table";\nimport { GetManyResponse, useMany } from "@refinedev/core";\nimport {\n    List,\n    useModalForm,\n    CloneButton,\n    SaveButton,\n} from "@refinedev/mantine";\nimport {\n    Box,\n    Group,\n    ScrollArea,\n    Table,\n    Pagination,\n    Modal,\n    Select,\n    TextInput,\n} from "@mantine/core";\n\nconst PostList: React.FC = () => {\n    // highlight-start\n    const {\n        getInputProps,\n        saveButtonProps,\n        modal: { show, close, title, visible },\n    } = useModalForm({\n        refineCoreProps: { action: "clone" },\n        initialValues: {\n            title: "",\n            status: "",\n        },\n        validate: {\n            title: (value) => (value.length < 2 ? "Too short title" : null),\n            status: (value) =>\n                value.length <= 0 ? "Status is required" : null,\n        },\n    });\n    // highlight-end\n\n    const columns = React.useMemo<ColumnDef<IPost>[]>(\n        () => [\n            {\n                id: "id",\n                header: "ID",\n                accessorKey: "id",\n            },\n            {\n                id: "title",\n                header: "Title",\n                accessorKey: "title",\n                meta: {\n                    filterOperator: "contains",\n                },\n            },\n            {\n                id: "status",\n                header: "Status",\n                accessorKey: "status",\n                meta: {\n                    filterElement: function render(props: FilterElementProps) {\n                        return (\n                            <Select\n                                defaultValue="published"\n                                data={[\n                                    { label: "Published", value: "published" },\n                                    { label: "Draft", value: "draft" },\n                                    { label: "Rejected", value: "rejected" },\n                                ]}\n                                {...props}\n                            />\n                        );\n                    },\n                    filterOperator: "eq",\n                },\n            },\n            {\n                id: "actions",\n                header: "Actions",\n                accessorKey: "id",\n                enableColumnFilter: false,\n                enableSorting: false,\n                cell: function render({ getValue }) {\n                    return (\n                        <Group spacing="xs" noWrap>\n                            {/* highlight-start */}\n                            <CloneButton\n                                hideText\n                                onClick={() => show(getValue() as number)}\n                            />\n                            {/* highlight-end */}\n                        </Group>\n                    );\n                },\n            },\n        ],\n        [],\n    );\n\n    const {\n        getHeaderGroups,\n        getRowModel,\n        setOptions,\n        refineCore: {\n            setCurrent,\n            pageCount,\n            current,\n            tableQueryResult: { data: tableData },\n        },\n    } = useTable({\n        columns,\n    });\n\n    return (\n        <>\n            {/* highlight-start */}\n            <Modal opened={visible} onClose={close} title={title}>\n                <TextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n                <Select\n                    mt={8}\n                    label="Status"\n                    placeholder="Pick one"\n                    data={[\n                        { label: "Published", value: "published" },\n                        { label: "Draft", value: "draft" },\n                        { label: "Rejected", value: "rejected" },\n                    ]}\n                    {...getInputProps("status")}\n                />\n                <Box\n                    mt={8}\n                    sx={{ display: "flex", justifyContent: "flex-end" }}\n                >\n                    <SaveButton {...saveButtonProps} />\n                </Box>\n            </Modal>\n            {/* highlight-end */}\n            <ScrollArea>\n                <List>\n                    <Table highlightOnHover>\n                        <thead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <tr key={headerGroup.id}>\n                                    {headerGroup.headers.map((header) => {\n                                        return (\n                                            <th key={header.id}>\n                                                {!header.isPlaceholder && (\n                                                    <Group spacing="xs" noWrap>\n                                                        <Box>\n                                                            {flexRender(\n                                                                header.column\n                                                                    .columnDef\n                                                                    .header,\n                                                                header.getContext(),\n                                                            )}\n                                                        </Box>\n                                                    </Group>\n                                                )}\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            ))}\n                        </thead>\n                        <tbody>\n                            {getRowModel().rows.map((row) => {\n                                return (\n                                    <tr key={row.id}>\n                                        {row.getVisibleCells().map((cell) => {\n                                            return (\n                                                <td key={cell.id}>\n                                                    {flexRender(\n                                                        cell.column.columnDef\n                                                            .cell,\n                                                        cell.getContext(),\n                                                    )}\n                                                </td>\n                                            );\n                                        })}\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <br />\n                    <Pagination\n                        position="right"\n                        total={pageCount}\n                        page={current}\n                        onChange={setCurrent}\n                    />\n                </List>\n            </ScrollArea>\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineMantineDemo />);\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list for ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," to be able to fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const columns = React.useMemo<ColumnDef<IPost>[]>(\n    () => [\n        // --\n        {\n            id: "actions",\n            header: "Actions",\n            accessorKey: "id",\n            enableColumnFilter: false,\n            enableSorting: false,\n            cell: function render({ getValue }) {\n                return (\n                    <Group spacing="xs" noWrap>\n                        <CloneButton\n                            hideText\n                            onClick={() => show(getValue() as number)}\n                        />\n                    </Group>\n                );\n            },\n        },\n    ],\n    [],\n);\n\nconst table = useTable({\n    columns,\n});\n'))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"refinecoreprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"refineCoreProps")),(0,a.kt)("p",null,"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," properties are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useStepsForm"),". You can find descriptions on ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," documentation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n    refineCoreProps: {\n        action: "edit",\n        resource: "posts",\n        id: "1",\n    },\n});\n')),(0,a.kt)("h3",{id:"initialvalues"},(0,a.kt)("inlineCode",{parentName:"h3"},"initialValues")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Only available in ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," form.")),(0,a.kt)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n    initialValues: {\n        title: "Hello World",\n    },\n});\n')),(0,a.kt)("h3",{id:"defaultvisible"},(0,a.kt)("inlineCode",{parentName:"h3"},"defaultVisible")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", modal will be visible by default. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    modalProps: {\n        defaultVisible: true,\n    },\n});\n")),(0,a.kt)("h3",{id:"autosubmitclose"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSubmitClose")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", modal will be closed after successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    modalProps: {\n        autoSubmitClose: false,\n    },\n});\n")),(0,a.kt)("h3",{id:"autoresetform"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoResetForm")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", form will be reset after successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    modalProps: {\n        autoResetForm: false,\n    },\n});\n")),(0,a.kt)("h3",{id:"syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the modals visibility state and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"This property can also be set as an object ",(0,a.kt)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.kt)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n    syncWithLocation: { key: "my-modal", syncId: true },\n});\n')),(0,a.kt)("h3",{id:"overtimeoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtimeOptions")),(0,a.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm({\n    //...\n    overtimeOptions: {\n        interval: 1000,\n        onInterval(elapsedInterval) {\n            console.log(elapsedInterval);\n        },\n    }\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>}\n")),(0,a.kt)("h3",{id:"autosave"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSave")),(0,a.kt)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.kt)("p",null,"It also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Works only in ",(0,a.kt)("inlineCode",{parentName:"p"},'action: "edit"')," mode.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed."),(0,a.kt)("h4",{id:"enabled"},(0,a.kt)("inlineCode",{parentName:"h4"},"enabled")),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    refineCoreProps: {\n        autoSave: {\n            enabled: true,\n        },\n    }\n})\n")),(0,a.kt)("h4",{id:"debounce"},(0,a.kt)("inlineCode",{parentName:"h4"},"debounce")),(0,a.kt)("p",null,"Set the debounce time for the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," prop. Default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"1000"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    refineCoreProps: {\n        autoSave: {\n            enabled: true,\n            // highlight-next-line\n            debounce: 2000,\n        },\n    }\n})\n")),(0,a.kt)("h2",{id:"return-values"},"Return Values"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," return values also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," docs."),(0,a.kt)("p",{parentName:"admonition"},"All ",(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"mantine useForm"))," return values also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on ",(0,a.kt)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/"},(0,a.kt)("inlineCode",{parentName:"a"},"mantine"))," docs.")),(0,a.kt)("h3",{id:"visible"},(0,a.kt)("inlineCode",{parentName:"h3"},"visible")),(0,a.kt)("p",null,"Current visibility state of the modal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    defaultVisible: true,\n});\n\nconsole.log(modalForm.modal.visible); // true\n")),(0,a.kt)("h3",{id:"title"},(0,a.kt)("inlineCode",{parentName:"h3"},"title")),(0,a.kt)("p",null,"Title of the modal. Based on resource and action values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n    modal: { title },\n} = useModalForm({\n    refineCoreProps: {\n        resource: "posts",\n        action: "create",\n    },\n});\n\nconsole.log(title); // "Create Post"\n')),(0,a.kt)("h3",{id:"close"},(0,a.kt)("inlineCode",{parentName:"h3"},"close")),(0,a.kt)("p",null,"A function that can close the modal. It's useful when you want to close the modal manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n    getInputProps,\n    modal: { close, visible, title },\n} = useModalForm();\n\nreturn (\n    <Modal opened={visible} onClose={close} title={title}>\n        <TextInput\n            mt={8}\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n            <SaveButton {...saveButtonProps} />\n            <Button onClick={close}>Cancel</Button>\n        </Box>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"submit"},(0,a.kt)("inlineCode",{parentName:"h3"},"submit")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n    modal: { submit },\n} = useModalForm();\n\n// ---\n\nreturn (\n    <Modal opened={visible} onClose={close} title={title}>\n        <TextInput\n            mt={8}\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n            <Button onClick={submit}>Save</Button>\n        </Box>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"show"},(0,a.kt)("inlineCode",{parentName:"h3"},"show")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"show")," is a function that can show the modal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const {\n    getInputProps,\n    modal: { close, visible, title, show },\n} = useModalForm();\n\nconst onFinishHandler = (values) => {\n    onFinish(values);\n    show();\n};\n\nreturn (\n    <>\n        <Button onClick={}>Show Modal</Button>\n        <Modal opened={visible} onClose={close} title={title}>\n            <TextInput\n                mt={8}\n                label="Title"\n                placeholder="Title"\n                {...getInputProps("title")}\n            />\n            <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n                <SaveButton {...saveButtonProps} />\n            </Box>\n        </Modal>\n    </>\n);\n')),(0,a.kt)("h3",{id:"savebuttonprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"saveButtonProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"saveButtonProps"),' contains all the props needed by the "submit" button within the modal (disabled,loading etc.). You can manually pass these props to your custom button.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { getInputProps, modal, saveButtonProps } = useModalForm();\n\nreturn (\n    <Modal {...modal}>\n        <TextInput\n            mt={8}\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n        />\n        <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n            <Button\n                {...saveButtonProps}\n                onClick={(e) => {\n                    // -- your custom logic\n                    saveButtonProps.onClick(e);\n                }}\n            />\n        </Box>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"overtime"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtime")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"autosaveprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSaveProps")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," properties from mutation."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.kt)("p",null,"You may need to modify the form data before it is sent to the API."),(0,a.kt)("p",null,"For example, let's send the values we received from the user in two separate inputs, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import React from "react";\nimport { useModalForm } from "@refinedev/mantine";\nimport { TextInput, Modal } from "@mantine/core";\n\nconst UserCreate: React.FC = () => {\n    const {\n        getInputProps,\n        saveButtonProps,\n        modal: { show, close, title, visible },\n    } = useModalForm({\n        refineCoreProps: { action: "create" },\n        initialValues: {\n            name: "",\n            surname: "",\n        },\n        // highlight-start\n        transformValues: (values) => ({\n            fullName: `${values.name} ${values.surname}`,\n        }),\n        // highlight-end\n    });\n    \n    return (\n        <Modal opened={visible} onClose={close} title={title}>\n            <TextInput\n                mt={8}\n                label="Name"\n                placeholder="Name"\n                {...getInputProps("name")}\n            />\n            <TextInput\n                mt={8}\n                label="Surname"\n                placeholder="Surname"\n                {...getInputProps("surname")}\n            />\n            <Box mt={8} sx={{ display: "flex", justifyContent: "flex-end" }}>\n                <Button\n                    {...saveButtonProps}\n                    onClick={(e) => {\n                        // -- your custom logic\n                        saveButtonProps.onClick(e);\n                    }}\n                />\n            </Box>\n        </Drawer>\n    );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modalProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Configuration object for the modal or drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#modalpropstype"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalPropsType")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"refineCoreProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Configuration object for the core of the ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useForm#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"UseFormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.kt)("inlineCode",{parentName:"td"},"useForm")," properties"),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/mantine/hooks/form/useForm"},"useForm")," documentation"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"modalpropstype"},"ModalPropsType"))),(0,a.kt)("table",{parentName:"blockquote"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultVisible"),(0,a.kt)("td",{parentName:"tr",align:null},"Initial visibility state of the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"false"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSubmitClose"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the form should be submitted when the modal is closed"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoResetForm"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the form should be reset when the form is submitted"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")))))),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Form values for mutation function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Record<string, unknown>"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TTransformed"),(0,a.kt)("td",{parentName:"tr",align:null},"Form values after transformation for mutation function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponse"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TError"))))),(0,a.kt)("h3",{id:"return-values-1"},"Return values"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modal"),(0,a.kt)("td",{parentName:"tr",align:null},"Relevant states and methods to control the modal or drawer"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#modalreturnvalues"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalReturnValues")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"refineCore"),(0,a.kt)("td",{parentName:"tr",align:null},"The return values of the ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," in the core"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/useForm#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"UseFormReturnValues")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"@mantine/form"),"'s ",(0,a.kt)("inlineCode",{parentName:"td"},"useForm")," return values"),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/mantine/hooks/form/useForm"},"useForm")," documentation"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"success" }'))))),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h4",{parentName:"li",id:"modalreturnvalues"},"ModalReturnValues"))),(0,a.kt)("table",{parentName:"blockquote"},(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"visible"),(0,a.kt)("td",{parentName:"tr",align:null},"State of modal visibility"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"Sets the visible state to true"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Sets the visible state to false"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submits the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(values: TVariables) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"title"),(0,a.kt)("td",{parentName:"tr",align:null},"Modal title based on resource and action value"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"saveButtonProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Props for a submit button"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ disabled: boolean, onClick: (e: React.FormEvent<HTMLFormElement>) => void; }")))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(h,{path:"form-mantine-use-modal-form",mdxType:"CodeSandboxExample"}))}N.isMDXComponent=!0}}]);