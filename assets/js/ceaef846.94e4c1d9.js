"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[193,99365],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(d,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5590:(e,t,n)=>{n.d(t,{ZP:()=>d});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={toc:[]};function d(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},s,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"refine")," supports many data providers. To include them in your project, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install [packageName]")," or you can select the preferred data provider with the ",(0,r.kt)("inlineCode",{parentName:"p"},"npm create refine-app@latest projectName")," during the project creation phase with CLI. This will allow you to easily use these data providers in your project."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},"Simple REST API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/graphql"},"GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjsx-crud"},"NestJS CRUD")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/nestjs-query"},"Nestjs-Query")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/airtable"},"Airtable")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-v4"},"Strapi v4")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi-graphql"},"Strapi GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/supabase"},"Supabase")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/hasura"},"Hasura")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/appwrite"},"Appwrite")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/medusa"},"Medusa"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Community \u2764\ufe0f")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-graphql"},"Elide GraphQL")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/usegen/refine-use-generated"},"useGenerated")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/usegen"},"usegen")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hygraph.com/"},"Hygraph")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/acomagu/refine-hygraph"},"acomagu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.sanity.io"},"Sanity")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/hirenf14/refine-sanity"},"hirenf14")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.sqlite.org/index.html"},"SQLite")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mateusabelli/refine-sqlite"},"mateusabelli")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsonapi.org/"},"JSON:API")," by ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/MahirMahdi/refine-jsonapi"},"mahirmahdi"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"If you have created a custom data provider and would like to share it with the community, please don't hesitate to get in touch with us. We would be happy to include it on this page for others to use.")))}d.isMDXComponent=!0},30697:(e,t,n)=>{n.d(t,{x:()=>v});var r=n(86010),a=n(67294),o=n(73808),i=n(96319),s=n(79526);function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const p=({onClick:e})=>a.createElement(i.z,{className:(0,r.Z)(),onClick:e,title:"Report Issue"},a.createElement(l,null)),l=e=>a.createElement("svg",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}({xmlns:"http://www.w3.org/2000/svg",width:16,height:16,viewBox:"0 0 512 512"},e),a.createElement("title",null,"Report issue"),a.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M370 378c28.89 23.52 46 46.07 46 86m-274-86c-28.89 23.52-46 46.06-46 86m288-256c28.89-23.52 32-56.07 32-96m-288 94c-28.89-23.52-32-54.06-32-94m368 176.13h-80m-256 0H48M256 192v256"}),a.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M256 448h0c-70.4 0-128-57.6-128-128v-96.07c0-65.07 57.6-96 128-96h0c70.4 0 128 25.6 128 96V320c0 70.4-57.6 128-128 128z"}),a.createElement("path",{fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:32,d:"M179.43 143.52a49.08 49.08 0 0 1-3.43-15.73A80 80 0 0 1 255.79 48h.42A80 80 0 0 1 336 127.79a41.91 41.91 0 0 1-3.12 14.3"})),c=({visible:e,onClose:t})=>a.createElement("div",{className:(0,r.Z)("absolute","left-0","top-0","right-0","bottom-0",!e&&"opacity-0",e&&"opacity-100",!e&&"pointer-events-none",!e&&"w-0",!e&&"!h-0",!e&&"overflow-hidden",e&&"w-full",e&&"h-full","bg-gray-200","bg-opacity-10","backdrop-blur-sm","p-8","z-[4]")},a.createElement("div",{className:(0,r.Z)("absolute","left-1/2","top-1/2","max-w-sm","w-full","-translate-x-1/2","-translate-y-1/2","rounded","bg-gray-0","shadow-md","p-4","border","border-gray-100")},a.createElement("form",{className:(0,r.Z)("flex","flex-col","gap-4"),onSubmit:e=>{e.preventDefault();const n=new FormData(e.currentTarget).get("email");console.log(n),t()}},a.createElement("div",{className:(0,r.Z)("text-gray-500","text-xs")},"Thank you for reporting this issue! We'll fix it as soon as possible. If you want to get notified when it's fixed, let us email you!"),a.createElement("input",{name:"email",type:"email",placeholder:"Your email address",className:(0,r.Z)("placeholder:text-gray-300","text-gray-700","py-2","px-2","rounded","border","border-gray-100","focus:outline-none","focus:ring","focus:ring-gray-50")}),a.createElement("div",{className:(0,r.Z)("flex","items-center","justify-between")},a.createElement("button",{type:"button",className:(0,r.Z)("py-2","px-3","rounded","transition-all","duration-200","ease-in-out","bg-transparent","hover:bg-gray-100","focus:bg-gray-100","text-gray-500"),onClick:()=>t()},"Cancel"),a.createElement("button",{type:"submit",className:(0,r.Z)("py-2","px-3","rounded","transition-all","duration-200","ease-in-out","text-gray-0","bg-refine-blue","hover:brightness-110","focus:brightness-75")},"Get Notified!"))))),u=({horizontalSize:e,onMouseDown:t})=>a.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:t,style:{left:`calc(${e}% - 5px)`}});function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){m(e,t,n[t])}))}return e}function h(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function g(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const v=e=>{var t;return"nextjs"===(null===(t=e)||void 0===t?void 0:t.template)?a.createElement(k,e):a.createElement(y,e)},y=e=>{var t,n,d,l,m,v,y,k,b,w,N,P,O,x,C,{startRoute:E,showNavigator:j,initialPercentage:D=50,dependencies:L,options:I={showTabs:!0,initMode:"lazy",classes:{"sp-cm":"p-0 bg-transparent"}},template:R="react-ts",customSetup:S,files:A,previewOnly:q,layout:M,height:U=420,wrapperClassName:T,className:$,showFiles:F=!1,showConsole:_=!1,hidePreview:B=!1}=e,H=g(e,["startRoute","showNavigator","initialPercentage","dependencies","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const{colorMode:W}=(0,s.I)();var z,G;null!=I||(I={}),null!==(z=(x=I).resizablePanels)&&void 0!==z||(x.resizablePanels=!0),null!==(G=(C=I).editorWidthPercentage)&&void 0!==G||(C.editorWidthPercentage=null!=D?D:50);const Q={showTabs:I.showTabs,showLineNumbers:I.showLineNumbers,showInlineErrors:I.showInlineErrors,wrapContent:I.wrapContent,closableTabs:I.closableTabs,initMode:I.initMode,extensions:null===(t=I.codeEditor)||void 0===t?void 0:t.extensions,extensionsKeymap:null===(n=I.codeEditor)||void 0===n?void 0:n.extensionsKeymap,readOnly:I.readOnly,showReadOnly:I.showReadOnly,additionalLanguages:null===(d=I.codeEditor)||void 0===d?void 0:d.additionalLanguages},K={activeFile:I.activeFile,visibleFiles:I.visibleFiles,recompileMode:I.recompileMode,recompileDelay:I.recompileDelay,autorun:I.autorun,autoReload:I.autoReload,bundlerURL:I.bundlerURL,startRoute:I.startRoute,skipEval:I.skipEval,fileResolver:I.fileResolver,initMode:I.initMode,initModeObserverOptions:I.initModeObserverOptions,externalResources:I.externalResources,logLevel:I.logLevel,classes:I.classes},[Z,X]=a.useState(!1),{onHandleMouseDown:J,horizontalSize:Y}=(({initialSize:e=50})=>{const[t,n]=a.useState(e),r=a.useRef(null),o=e=>{if(!r.current)return;const t=r.current.parentElement;if(!t)return;const{left:a,width:o}=t.getBoundingClientRect(),i=(e.clientX-a)/o*100,s=Math.min(Math.max(i,25),75);n(s),t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},i=()=>{var e;const t=null===(e=r.current)||void 0===e?void 0:e.parentElement;t&&(t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return a.useEffect((()=>(document.body.addEventListener("mousemove",o),document.body.addEventListener("mouseup",i),()=>{document.body.removeEventListener("mousemove",o),document.body.removeEventListener("mouseup",i)})),[]),{horizontalSize:t,onHandleMouseDown:a.useCallback((e=>{r.current=e.target}),[])}})({initialSize:I.editorWidthPercentage}),V=!q&&!(null===(m=M)||void 0===m||null===(l=m.includes)||void 0===l?void 0:l.call(m,"col"));var ee,te,ne,re,ae,oe;return a.createElement(a.Fragment,null,a.createElement("div",{className:(0,r.Z)("pb-6",T)},a.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",$)},a.createElement(i.oT,f({key:R,customSetup:f({dependencies:L},S),files:A,options:K,template:R,theme:"light"===W?h(f({},i.dN),{colors:h(f({},i.dN.colors),{surface1:"#F4F8FB",surface2:"rgb(222, 229, 237)",surface3:"rgb(222, 229, 237)"})}):h(f({},o.I2),{colors:h(f({},o.I2.colors),{surface1:"#1D1E30",surface2:"#303450",surface3:"#303450"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl")},H),a.createElement(i.sp,{className:(0,r.Z)("col"===M&&"!flex-col","col-reverse"===M&&"!flex-col-reverse")},F&&a.createElement(i.Lj,{autoHiddenFiles:!0,style:{height:null!==(ee=I.editorHeight)&&void 0!==ee?ee:U}}),!q&&a.createElement(i._V,h(f({},Q),{initMode:"lazy",style:h(f({height:null!==(te=I.editorHeight)&&void 0!==te?te:U},(null===(y=M)||void 0===y||null===(v=y.includes)||void 0===v?void 0:v.call(y,"col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})})),_?a.createElement(i.Tq,{style:h(f({height:null!==(ne=I.editorHeight)&&void 0!==ne?ne:U},(null===(b=M)||void 0===b||null===(k=b.includes)||void 0===k?void 0:k.call(b,"col"))?{flex:"initial"}:{flexGrow:Y,flexShrink:Y,flexBasis:0}),{overflow:"hidden"})}):null,V?a.createElement(u,{onMouseDown:J,horizontalSize:Y}):null,a.createElement(i.Gj,{actionsChildren:a.createElement(p,{onClick:()=>X(!0)}),startRoute:E,showNavigator:null!=j?j:I.showNavigator,showRefreshButton:I.showRefreshButton,style:h(f({display:B?"none":"flex"},(null===(N=M)||void 0===N||null===(w=N.includes)||void 0===w?void 0:w.call(N,"col"))?{flex:"initial",width:"100%"}:{flexGrow:100-Y,flexShrink:100-Y,flexBasis:0,width:q?"100%":100-Y+"%"}),{gap:0,height:null!==(re=I.editorHeight)&&void 0!==re?re:U})},a.createElement("div",{className:"sp-custom-loading"},a.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))),a.createElement(c,{visible:Z,onClose:()=>X(!1)})))),a.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(ae=I.editorHeight)&&void 0!==ae?ae:U)+2}}),a.createElement("div",{className:(0,r.Z)((null===(O=M)||void 0===O||null===(P=O.includes)||void 0===P?void 0:P.call(O,"col"))?"block":"block md:hidden"),style:{height:Number(null!==(oe=I.editorHeight)&&void 0!==oe?oe:U)+2}})),a.createElement("section",{className:"hidden max-w-0 max-h-0"},a.createElement("p",null,`Dependencies: ${Object.keys(null!=L?L:{}).map((e=>`${e}@${L[e]}`))}`),a.createElement("h3",null,"Code Files"),Object.keys(null!=A?A:{}).map((e=>a.createElement("div",{key:e},a.createElement("div",null,`File: ${e}`),a.createElement("div",null,`Content: ${"code"in A[e]?A[e].code:A[e]}`))))))},k=e=>{const t={hidePreview:!0};return a.createElement(y,h(f({},e,t),{template:"react-ts"}))};'\nimport { NavigateToResource } from "@refinedev/nextjs-router";\n\nconst Home = () => {\n    return <NavigateToResource resource="products" />;\n};\n\nexport default Home;\n'.trim()},1220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={},d=void 0,p={unversionedId:"guides-concepts/data-fetching/data-provider-interface",id:"guides-concepts/data-fetching/data-provider-interface",title:"data-provider-interface",description:"",source:"@site/docs/guides-concepts/data-fetching/data-provider-interface.md",sourceDirName:"guides-concepts/data-fetching",slug:"/guides-concepts/data-fetching/data-provider-interface",permalink:"/docs/guides-concepts/data-fetching/data-provider-interface",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/guides-concepts/data-fetching/data-provider-interface.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1700823463,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{}},l={},c=[],u={toc:c};function m(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { DataProvider, HttpError, Pagination, CrudSorting, CrudFilters, CrudOperators } from "@refinedev/core";\nimport { stringify } from "query-string";\nimport axios, { AxiosInstance } from "axios";\n\ntype MethodTypes = "get" | "delete" | "head" | "options";\ntype MethodTypesWithBody = "post" | "put" | "patch";\n\nconst axiosInstance = axios.create();\n\nexport const dataProvider = (\n  apiUrl: string,\n  // get axios instance from user or use default one.\n  httpClient: AxiosInstance = axiosInstance,\n): DataProvider => ({\n  getOne: async ({ resource, id, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypes) ?? "get";\n\n    const { data } = await httpClient[requestMethod](url, { headers });\n\n    return {\n      data,\n    };\n  },\n\n  update: async ({ resource, id, variables, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? "patch";\n\n    const { data } = await httpClient[requestMethod](url, variables, {\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  create: async ({ resource, variables, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? "post";\n\n    const { data } = await httpClient[requestMethod](url, variables, {\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  deleteOne: async ({ resource, id, variables, meta }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { headers, method } = meta ?? {};\n    const requestMethod = (method as MethodTypesWithBody) ?? "delete";\n\n    const { data } = await httpClient[requestMethod](url, {\n      data: variables,\n      headers,\n    });\n\n    return {\n      data,\n    };\n  },\n\n  getList: async ({ resource, pagination, sorters, filters, meta }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { headers: headersFromMeta, method } = meta ?? {};\n    const requestMethod = (method as MethodTypes) ?? "get";\n\n    // init query object for pagination and sorting\n    const query: {\n      _start?: number;\n      _end?: number;\n      _sort?: string;\n      _order?: string;\n    } = {};\n\n    const generatedPagination = generatePagination(pagination);\n    if (generatedPagination) {\n      const { _start, _end } = generatedPagination;\n      query._start = _start;\n      query._end = _end;\n    }\n\n    const generatedSort = generateSort(sorters);\n    if (generatedSort) {\n      const { _sort, _order } = generatedSort;\n      query._sort = _sort.join(",");\n      query._order = _order.join(",");\n    }\n\n    const queryFilters = generateFilter(filters);\n\n    const { data, headers } = await httpClient[requestMethod](`${url}?${stringify(query)}&${stringify(queryFilters)}`, {\n      headers: headersFromMeta,\n    });\n\n    const total = +headers["x-total-count"];\n\n    return {\n      data,\n      total: total || data.length,\n    };\n  },\n\n  getApiUrl: () => apiUrl,\n});\n\n// Convert axios errors to HttpError on every response.\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  },\n);\n\n// convert refine CrudOperators to the format that API accepts.\nconst mapOperator = (operator: CrudOperators): string => {\n  switch (operator) {\n    case "ne":\n    case "gte":\n    case "lte":\n      return `_${operator}`;\n    case "contains":\n      return "_like";\n    case "eq":\n    default:\n      return "";\n  }\n};\n\n// generate query string from refine CrudFilters to the format that API accepts.\nconst generateFilter = (filters?: CrudFilters) => {\n  const queryFilters: { [key: string]: string } = {};\n\n  if (filters) {\n    filters.map((filter) => {\n      if (filter.operator === "or" || filter.operator === "and") {\n        throw new Error(\n          `[@refinedev/simple-rest]: \\`operator: ${filter.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`,\n        );\n      }\n\n      if ("field" in filter) {\n        const { field, operator, value } = filter;\n\n        if (field === "q") {\n          queryFilters[field] = value;\n          return;\n        }\n\n        const mappedOperator = mapOperator(operator);\n        queryFilters[`${field}${mappedOperator}`] = value;\n      }\n    });\n  }\n\n  return queryFilters;\n};\n\n// generate query string from refine CrudSorting to the format that API accepts.\nconst generateSort = (sorters?: CrudSorting) => {\n  if (sorters && sorters.length > 0) {\n    const _sort: string[] = [];\n    const _order: string[] = [];\n\n    sorters.map((item) => {\n      _sort.push(item.field);\n      _order.push(item.order);\n    });\n\n    return {\n      _sort,\n      _order,\n    };\n  }\n\n  return;\n};\n\n// generate query string from refine Pagination to the format that API accepts.\nconst generatePagination = (pagination?: Pagination) => {\n  // pagination is optional on data hooks, so we need to set default values.\n  const { current = 1, pageSize = 10, mode = "server" } = pagination ?? {};\n\n  const query: {\n    _start?: number;\n    _end?: number;\n  } = {};\n\n  if (mode === "server") {\n    query._start = (current - 1) * pageSize;\n    query._end = current * pageSize;\n  }\n\n  return query;\n};\n')))}m.isMDXComponent=!0},28998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>ne,contentTitle:()=>ee,default:()=>se,frontMatter:()=>V,metadata:()=>te,toc:()=>re});var r=n(67294),a=n(3905),o=n(30697);function i(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:s,hidden:!1},"/product.tsx":{code:p,hidden:!1,active:!0},"/data-provider.ts":{code:d,hidden:!1}}})}const s='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { Product } from "./product.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\n\nexport default function App() {\n    return (\n            <Refine\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            >\n                <Product />\n            </Refine>\n    );\n}\n'.trim(),d='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n  getOne: async ({ id, resource }) => {\n    const response = await fetch(`${url}/${resource}/${id}`);\n      const data = await response.json();\n\n      return {\n          data,\n      };\n  },\n\n  create: async () => {\n      throw new Error("Not implemented");\n  },\n  update: async () => {\n      throw new Error("Not implemented");\n  },\n  deleteOne: async () => {\n      throw new Error("Not implemented");\n  },\n  getList: async () => {\n      throw new Error("Not implemented");\n  },\n  getApiUrl: () => url,\n});\n'.trim(),p='\nimport React from "react";\nimport { useOne, BaseKey } from "@refinedev/core";\n\nexport const Product: React.FC = () => {\n    const { data, error, isError, isLoading } = useOne<IProduct>({\n        resource: "products",\n        id: 123,\n    });\n\n    if (isError) <div>{error?.message}</div>;\n\n    if (isLoading) <div>Loading...</div>;\n\n    const product = data?.data;\n\n    return (\n        <div>\n            <h4>{product?.name}</h4>\n            <p>Material: {product?.material}</p>\n            <p>Price {product?.price}</p>\n        </div>\n    );\n};\n\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n'.trim();function l(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:c,hidden:!1},"/product.tsx":{code:m,hidden:!1,active:!0},"/data-provider.ts":{code:u,hidden:!1}}})}const c='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { Product } from "./product.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\n\nexport default function App() {\n    return (\n            <Refine\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            >\n                <Product />\n            </Refine>\n    );\n}\n'.trim(),u='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n    getOne: async ({ id, resource }) => {\n        const response = await fetch(`${url}/${resource}/${id}`);\n        const data = await response.json();\n  \n        return {\n            data,\n        };\n    },\n\n    update: async ({ resource, id, variables }) => {      \n        console.log(variables, JSON.stringify(variables))\n        const response = await fetch(`${url}/${resource}/${id}`, {\n            method: "PATCH",\n            body: JSON.stringify(variables),\n            headers: {\n                "Content-Type": "application/json",\n            },\n        });\n        const data = await response.json();\n\n        return {\n            data,\n        };\n    },\n\n    create: async () => {\n        throw new Error("Not implemented");\n    },\n\n    deleteOne: async () => {\n        throw new Error("Not implemented");\n    },\n    getList: async () => {\n        throw new Error("Not implemented");\n    },\n    getApiUrl: () => url,\n});\n'.trim(),m='\nimport React from "react";\nimport { useOne, BaseKey, useUpdate } from "@refinedev/core";\n\nexport const Product: React.FC = () => {\n    const { data, error, isError, isLoading, isFetching } = useOne<IProduct>({\n        resource: "products",\n        id: 124,\n    });\n\n    const { mutate, isLoading: isUpdating } = useUpdate();\n\n    if (isError) {\n        return (\n            <div>\n                <h1>Error</h1>\n                <pre>{JSON.stringify(error)}</pre>\n            </div>\n        );\n    }\n\n    if (isLoading)  return <div>Loading...</div>;\n\n    const incrementPrice = async () => {\n        await mutate({\n            resource: "products",\n            id: 124,\n            values: {\n                price: Math.random() * 100,\n            },\n        });\n    };\n\n    const product = data?.data;\n\n    return (\n        <div>\n            <h4>{product?.name}</h4>\n            <p>Material: {product?.material}</p>\n            <p>Price {product?.price}</p>\n            <button onClick={incrementPrice} disabled={isUpdating || isFetching}>Update Price</button>\n        </div>\n    );\n};\n\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n'.trim();function f(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:h,hidden:!1},"/home-page.tsx":{code:v,hidden:!1,active:!0},"/data-provider.ts":{code:g,hidden:!1}}})}const h='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { HomePage } from "./home-page.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <HomePage />\n        </Refine>\n    );\n}\n'.trim(),g='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n    getList: async ({ resource }) => {\n        const response = await fetch(`${url}/${resource}`);\n        const data = await response.json();\n\n        return {\n            data,\n            total: data.length,\n        };\n    },\n\n    getOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    getMany: async () => {\n        throw new Error("Not implemented");\n    },\n\n    create: async () => {\n        throw new Error("Not implemented");\n    },\n    update: async () => {\n        throw new Error("Not implemented");\n    },\n    deleteOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    getApiUrl: () => url,\n});\n'.trim(),v='\nimport { useList } from "@refinedev/core";\n\nexport const HomePage = () => {\n    const { data: products } = useList({\n        resource: "products",\n    });\n\n    return (\n        <div>\n            <h2>Products</h2>\n            <p> Showing {products?.total} records in total. </p>\n            <ul>\n                {products?.data?.map((product) => (\n                    <li key={product.id}>\n                        <p>\n                            {product.name}\n                            <br />\n                            Price: {product.price}\n                            <br />\n                            Material: {product.material}\n                        </p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\n\ninterface IProducts {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n'.trim();function y(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:k,hidden:!1},"/home-page.tsx":{code:w,hidden:!1,active:!0},"/data-provider.ts":{code:b,hidden:!1}}})}const k='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { HomePage } from "./home-page.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <HomePage />\n        </Refine>\n    );\n}\n'.trim(),b='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n    getList: async ({ resource, filters, pagination, sorters }) => {\n        // We simplified query string generation to keep the example application short and straightforward.\n        // For more detailed and complex implementation examples, you can refer to the source code of the data provider packages.\n        // https://github.com/refinedev/refine/blob/next/packages/simple-rest/src/provider.ts\n\n        // we know that we only have one filter and one sorter in this example.\n        const filter = filters?.[0];\n        const sorter = sorters?.[0];\n\n        const params = [];\n\n        if (filter && "field" in filter) {\n            params.push(`${filter.field}=${filter.value}`);\n        }\n\n        if (sorter && "field" in sorter) {\n            params.push(`_sort=${sorter.field}`);\n            params.push(`_order=${sorter.order}`);\n        }\n\n        // pagination is optional, so we need give default values if it is undefined.\n        const { current = 1, pageSize = 10 } = pagination ?? {};\n        params.push(`_start=${(current - 1) * pageSize}`);\n        params.push(`_end=${current * pageSize}`);\n\n        // combine all params with "&" character to create query string.\n        const query = params.join("&");\n\n        const response = await fetch(`${url}/${resource}?${query}`);\n        const data = await response.json();\n\n        return {\n            data,\n            total: data.length,\n        };\n    },\n\n    getOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    getMany: async () => {\n        throw new Error("Not implemented");\n    },\n\n    create: async () => {\n        throw new Error("Not implemented");\n    },\n    update: async () => {\n        throw new Error("Not implemented");\n    },\n    deleteOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    getApiUrl: () => url,\n});\n'.trim(),w='\nimport { useList } from "@refinedev/core";\n\nexport const HomePage = () => {\n    const { data: products } = useList({\n        resource: "products",\n        pagination: { current: 1, pageSize: 5 },\n        sorters: [{ field: "id", order: "DESC" }],\n        filters: [{ field: "material", operator: "eq", value: "Wooden" }],\n    });\n\n    return (\n        <div>\n            <h2>Wooden Products</h2>\n            <ul>\n                {products?.data?.map((product) => (\n                    <li key={product.id}>\n                       <p>\n                            {product.id}\n                            <br />\n                            {product.name}\n                            <br />\n                            Price: {product.price}\n                            <br />\n                            Material: {product.material}\n                       </p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\n\ninterface IProducts {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n'.trim();function N(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:P,hidden:!1},"/home-page.tsx":{code:x,hidden:!1,active:!0},"/data-provider.ts":{code:O,hidden:!1}}})}const P='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { HomePage } from "./home-page.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst FINE_FOODS_API_URL = "https://api.finefoods.refine.dev";\n\n\nexport default function App() {\n    return (\n        <Refine\n            dataProvider={{\n                default: dataProvider(API_URL),\n                fineFoods: dataProvider(FINE_FOODS_API_URL),\n            }}\n        >\n            <HomePage />\n        </Refine>\n    );\n}\n'.trim(),O='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n  getOne: async ({ id, resource }) => {\n    const response = await fetch(`${url}/${resource}/${id}`);\n      const data = await response.json();\n\n      return {\n          data,\n      };\n  },\n\n  create: async () => {\n      throw new Error("Not implemented");\n  },\n  update: async () => {\n      throw new Error("Not implemented");\n  },\n  deleteOne: async () => {\n      throw new Error("Not implemented");\n  },\n  getList: async () => {\n      throw new Error("Not implemented");\n  },\n  getApiUrl: () => url,\n});\n'.trim(),x='\nimport { useOne } from "@refinedev/core";\n\nexport const HomePage = () => {\n    const { data: product, isLoading: isLoadingProduct } = useOne<IProduct>({\n        resource: "products",\n        id: 123,\n        dataProviderName: "default",\n    });\n\n    const { data: user, isLoading: isLoadingUser } = useOne<IUser>({\n        resource: "users",\n        id: 123,\n        dataProviderName: "fineFoods",\n    });\n\n    if (isLoadingProduct || isLoadingUser) return <div>Loading...</div>;\n\n    return (\n        <div>\n            <h2>Product</h2>\n            <h4>{product?.data?.name}</h4>\n            <p>Material: {product?.data?.material}</p>\n            <p>Price {product?.data?.price}</p>\n\n            <br />\n\n            <h2>User</h2>\n            <h4>\n                {user?.data?.firstName} {user?.data?.lastName}\n            </h4>\n            <p>Phone: {user?.data?.gsm}</p>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n\ninterface IUser {\n    id: BaseKey;\n    firstName: string;\n    lastName: string;\n    gsm: string;\n}\n'.trim();function C(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest",axios:"^0.26.1"},startRoute:"/",files:{"/App.tsx":{code:E,hidden:!1},"/home-page.tsx":{code:L,hidden:!1,active:!0},"/data-provider.ts":{code:D,hidden:!1},"/auth-provider.ts":{code:j,hidden:!1}}})}const E='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { HomePage } from "./home-page.tsx";\nimport { dataProvider } from "./data-provider.ts";\nimport { authProvider } from "./auth-provider.ts";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\n\nexport default function App() {\n    return (\n        <Refine\n            dataProvider={dataProvider(API_URL)}\n            authProvider={authProvider(API_URL)}\n        >\n            <HomePage />\n        </Refine>\n    );\n}\n\n'.trim(),j='\nimport React from "react";\nimport { AuthBindings } from "@refinedev/core";\n\nexport const authProvider = (url: string): AuthBindings => ({\n    login: async ({ email, password }) => {\n        // To keep the example short and simple, \n        // we didn\'t send a request, and we save the token in localStorage.\n        localStorage.setItem("token", JSON.stringify({ email, password }));\n\n        return {\n            success: true,\n        };\n    },\n\n    check: async () => {\n        const token = localStorage.getItem("token");\n        return {\n            authenticated: !!token,\n            error: new Error("Unauthorized"),\n        };\n    },\n\n    logout: async () => {\n        localStorage.removeItem("token");\n        return {\n            success: true,\n        };\n    },\n\n    onError: async () => {\n        throw new Error("Not implemented");\n    },\n});\n'.trim(),D='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\nimport axios from "axios";\n\nconst axiosInstance = axios.create();\n\n// add token to every request\naxiosInstance.interceptors.request.use(\n    async (config) => {\n        const token = localStorage.getItem("token");\n        if (token && config?.headers) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    },\n);\n\nexport const dataProvider = (url: string): DataProvider => ({\n    getList: async ({ resource }) => {\n        const response = await axiosInstance.get(`${url}/${resource}`);\n        const data = response.data;\n\n        return {\n            data,\n            total: data.length,\n        };\n    },\n\n    getOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    create: async () => {\n        throw new Error("Not implemented");\n    },\n    update: async () => {\n        throw new Error("Not implemented");\n    },\n    deleteOne: async () => {\n        throw new Error("Not implemented");\n    },\n\n    getApiUrl: () => url,\n});\n\n'.trim(),L='\nimport React from "react";\nimport {\n    BaseKey,\n    Authenticated,\n    useList,\n    useLogin,\n    useLogout,\n} from "@refinedev/core";\n\nexport const HomePage = () => {\n    const { data: animalsData, isLoading: isLoadingAnimals } =\n        useList<IAnimals>({\n            resource: "animals",\n        });\n    const animals = animalsData?.data;\n\n    const { mutate: login, isLoading: isLoadingLogin } = useLogin();\n    const { mutate: logout } = useLogout();\n\n    const loading = isLoadingAnimals || isLoadingLogin;\n\n    return (\n        <Authenticated\n            loading={loading}\n            fallback={\n                <div>\n                    <h4>You are not authenticated</h4>\n                    <button\n                        disabled={isLoadingLogin}\n                        onClick={() =>\n                            login({\n                                email: "refine@demo.com",\n                                password: "refine",\n                            })\n                        }\n                    >\n                        Login\n                    </button>\n                </div>\n            }\n        >\n            <div>\n                <button onClick={() => logout()}>Logout</button>\n                <h4>Animals</h4>\n                <ul>\n                    {animals?.map((animal) => (\n                        <li key={animal.id}>\n                            <p>Name: {animal.name}</p>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Authenticated>\n    );\n};\n\ninterface IAnimals {\n    id: BaseKey;\n    name: string;\n    type: string;\n}\n'.trim();function I(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:R,hidden:!1},"/product.tsx":{code:A,hidden:!1,active:!0},"/data-provider.ts":{code:S,hidden:!1}}})}const R='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { Product } from "./product.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\n\nexport default function App() {\n    return (\n            <Refine\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            >\n                <Product />\n            </Refine>\n    );\n}\n'.trim(),S='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n  getOne: async ({ id, resource }) => {\n    const response = await fetch(`${url}/${resource}/${id}`);\n      const data = await response.json();\n\n      return {\n          data,\n      };\n  },\n\n  create: async () => {\n      throw new Error("Not implemented");\n  },\n  update: async () => {\n      throw new Error("Not implemented");\n  },\n  deleteOne: async () => {\n      throw new Error("Not implemented");\n  },\n  getList: async () => {\n      throw new Error("Not implemented");\n  },\n  getApiUrl: () => url,\n});\n'.trim(),A='\nimport React from "react";\nimport { useOne, BaseKey } from "@refinedev/core";\n\nexport const Product: React.FC = () => {\n    const { data: productData, isLoading: productLoading } = useOne<IProduct>({\n        resource: "products",\n        id: 123,\n    });\n    const product = productData?.data;\n\n    const { data: productDetailData, isLoading: productDetailLoading }  = useOne<IProductDetail>({\n        resource: "product-detail",\n        id: product?.id,\n        queryOptions: {\n            enabled: !!product,\n        },\n    });\n    const productDetail = productDetailData?.data;\n\n    loading = productLoading || productDetailLoading;\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h4>{product?.name}</h4>\n            <p>Material: {product?.material}</p>\n            <p>Price {product?.price}</p>\n            <p>Weight: {productDetail?.weight}</p>\n            <p>Dimensions: {productDetail?.dimensions?.width} x {productDetail?.dimensions?.height} x {productDetail?.dimensions?.depth}</p>\n        </div>\n    );\n};\n\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n    description: string;\n}\n\ninterface IProductDetail {\n    id: BaseKey;\n    weight: number;\n    dimensions: {\n        width: number;\n        height: number;\n        depth: number;\n    };\n}\n'.trim();function q(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:M,hidden:!1},"/product.tsx":{code:T,hidden:!1,active:!0},"/data-provider.ts":{code:U,hidden:!1}}})}const M='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { Product } from "./product.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\n\nexport default function App() {\n    return (\n            <Refine\n                   dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            >\n                <Product />\n            </Refine>\n    );\n}\n'.trim(),U='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n  getOne: async ({ id, resource }) => {\n    const response = await fetch(`${url}/${resource}/${id}`);\n      const data = await response.json();\n\n      return {\n          data,\n      };\n  },\n\n  getList: async ({ resource, filters }) => {\n    // We simplified query string generation to keep the example application short and straightforward.\n    // For more detailed and complex implementation examples, you can refer to the source code of the data provider packages.\n    // https://github.com/refinedev/refine/blob/next/packages/simple-rest/src/provider.ts\n\n    // we know that we only have one filter in this example.\n    const filter = filters?.[0];\n\n    const params = [];\n\n    if (filter && "field" in filter) {\n        params.push(`${filter.field}=${filter.value}`);\n    }\n\n    // combine all params with "&" character to create query string.\n    const query = params.join("&");\n\n    const response = await fetch(`${url}/${resource}?${query}`);\n    const data = await response.json();\n\n    return {\n        data,\n        total: data.length,\n    };\n  },\n\n  \n\n  getMany: async ({ ids, resource }) => {\n    throw new Error("Not implemented");\n  },\n  create: async () => {\n      throw new Error("Not implemented");\n  },\n  update: async () => {\n      throw new Error("Not implemented");\n  },\n  deleteOne: async () => {\n      throw new Error("Not implemented");\n  },\n  getApiUrl: () => url,\n});\n'.trim(),T='\nimport React from "react";\nimport { useOne, useList, BaseKey } from "@refinedev/core";\n\nexport const Product: React.FC = () => {\n    const { data: productData, isLoading: productLoading } = useOne<IProduct>({\n        resource: "products",\n        id: 123,\n    });\n    const product = productData?.data;\n\n    const { data: reviewsData, isLoading: reviewsLoading } =\n        useList<IProductReview>({\n            resource: "product-reviews",\n            filters: [{ field: "product.id", operator: "eq", value: product?.id }],\n            queryOptions: {\n                enabled: !!product,\n            },\n        });\n    const rewiews = reviewsData?.data;\n\n    const loading = productLoading || reviewsLoading;\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h4>{product?.name}</h4>\n            <p>Material: {product?.material}</p>\n            <p>Price {product?.price}</p>\n\n            <h5>Reviews</h5>\n            <ul>\n                {rewiews?.map((review) => (\n                    <li key={review.id}>\n                        <p>Rating: {review.rating}</p>\n                        <p>{review.comment}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n    description: string;\n}\n\ninterface IProductReview {\n    id: BaseKey;\n    rating: number;\n    comment: string;\n    product: {\n        id: BaseKey;\n    }\n    user: {\n        id: BaseKey;\n    }\n}\n'.trim();function $(){return r.createElement(o.x,{dependencies:{"@refinedev/core":"latest"},startRoute:"/",files:{"/App.tsx":{code:F,hidden:!1},"/product.tsx":{code:B,hidden:!1,active:!0},"/data-provider.ts":{code:_,hidden:!1}}})}const F='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\n\nimport { Product } from "./product.tsx";\nimport { dataProvider } from "./data-provider.ts";\n\n\nexport default function App() {\n    return (\n            <Refine\n                dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            >\n                <Product />\n            </Refine>\n    );\n}\n'.trim(),_='\nimport React from "react";\nimport { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (url: string): DataProvider => ({\n  getOne: async ({ id, resource }) => {\n    const response = await fetch(`${url}/${resource}/${id}`);\n      const data = await response.json();\n\n      if (!response.ok || !data) {\n        const error: HttpError = {\n            message: "Something went wrong while fetching data",\n            statusCode: 404,\n        };\n        return Promise.reject(error);\n      }\n\n      return {\n          data,\n      };\n  },\n\n  create: async () => {\n      throw new Error("Not implemented");\n  },\n  update: async () => {\n      throw new Error("Not implemented");\n  },\n  deleteOne: async () => {\n      throw new Error("Not implemented");\n  },\n  getList: async () => {\n      throw new Error("Not implemented");\n  },\n  getApiUrl: () => url,\n});\n'.trim(),B='\nimport React from "react";\nimport { useOne, BaseKey } from "@refinedev/core";\n\nexport const Product: React.FC = () => {\n    const { data, error, isError, isLoading } = useOne<IProduct>({\n        resource: "products",\n        id: "non-existing-id", \n        queryOptions: {\n            retry: 0,\n        },\n    });\n\n    if (isError) {\n        return (\n            <div>\n                <h1>Error</h1>\n                <p>{error.message}</p>\n            </div>\n        );\n    }\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    const product = data?.data;\n\n    return (\n        <div>\n            <h4>{product?.name}</h4>\n            <p>Material: {product?.material}</p>\n            <p>Price {product?.price}</p>\n        </div>\n    );\n};\n\n\ninterface IProduct {\n    id: BaseKey;\n    name: string;\n    material: string;\n    price: string;\n}\n'.trim();var H=n(5590);function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function z(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function G(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const Q={toc:[]};function K(e){var{components:t}=e,n=G(e,["components"]);return(0,a.kt)("wrapper",z(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){W(e,t,n[t])}))}return e}({},Q,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Hook"),(0,a.kt)("th",{parentName:"tr",align:null},"Method"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useOne/"},"useOne")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#getone-"},"getOne")),(0,a.kt)("td",{parentName:"tr",align:null},"get a single record.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useUpdate/"},"useUpdate")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#update-"},"update")),(0,a.kt)("td",{parentName:"tr",align:null},"update an existing record.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCreate/"},"useCreate")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#create-"},"create")),(0,a.kt)("td",{parentName:"tr",align:null},"create a new record.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useDelete/"},"useDelete")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#deleteone-"},"deleteOne")),(0,a.kt)("td",{parentName:"tr",align:null},"delete a single record.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useList/"},"useList")," or ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useInfiniteList/"},"useInfiniteList")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#getlist-"},"getList")),(0,a.kt)("td",{parentName:"tr",align:null},"get a list of records.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useApiUrl/"},"useApiUrl")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#getapiurl-"},"getApiUrl")),(0,a.kt)("td",{parentName:"tr",align:null},"get the API URL.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCustom/"},"useCustom")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#custom"},"custom")),(0,a.kt)("td",{parentName:"tr",align:null},"making custom API requests.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useMany/"},"useMany")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#getmany"},"getMany")),(0,a.kt)("td",{parentName:"tr",align:null},"get multiple records.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},"useCreateMany")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#createmany"},"createMany")),(0,a.kt)("td",{parentName:"tr",align:null},"create multiple records.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},"useDeleteMany")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#deletemany"},"deleteMany")),(0,a.kt)("td",{parentName:"tr",align:null},"delete multiple records.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},"useUpdateMany")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#updatemany"},"updateMany")),(0,a.kt)("td",{parentName:"tr",align:null},"update multiple records.")))))}K.isMDXComponent=!0;var Z=n(1220);function X(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function J(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function Y(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const V={title:"Data Fetching"},ee=void 0,te={unversionedId:"guides-concepts/data-fetching/index",id:"guides-concepts/data-fetching/index",title:"Data Fetching",description:"Data is essential for any UI Application and these applications are a bridge between users and the underlying data source(s), making it possible for users to interact with data in a meaningful way.",source:"@site/docs/guides-concepts/data-fetching/index.md",sourceDirName:"guides-concepts/data-fetching",slug:"/guides-concepts/data-fetching/",permalink:"/docs/guides-concepts/data-fetching/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/guides-concepts/data-fetching/index.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1700823463,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{title:"Data Fetching"},sidebar:"someSidebar",previous:{title:"General Concepts",permalink:"/docs/guides-concepts/general-concepts/"},next:{title:"Forms",permalink:"/docs/guides-concepts/forms/"}},ne={},re=[{value:"Fetching Data",id:"fetching-data",level:2},{value:"Updating Data",id:"updating-data",level:2},{value:"How refine treats data and state?",id:"how-refine-treats-data-and-state",level:2},{value:'Meta usage <GuideBadge id="guides-concepts/general-concepts#meta" />',id:"meta-usage-",level:2},{value:"GraphQL",id:"graphql",level:2},{value:"Multiple Data Providers",id:"multiple-data-providers",level:2},{value:"Handling errors",id:"handling-errors",level:2},{value:"Listing Data",id:"listing-data",level:2},{value:"Filters, Sorters and Pagination",id:"filters-sorters-and-pagination",level:3},{value:"Relationships",id:"relationships",level:2},{value:"One-to-One",id:"one-to-one",level:3},{value:"One-to-Many",id:"one-to-many",level:3},{value:"Many-to-Many",id:"many-to-many",level:3},{value:'Authentication <GuideBadge id="guides-concepts/authentication/" />',id:"authentication-",level:2},{value:"TanStack Query <code>QueryClient</code>",id:"tanstack-query-queryclient",level:2},{value:"<code>dataProvider</code> interface",id:"dataprovider-interface",level:2},{value:"Supported data providers",id:"supported-data-providers",level:2},{value:"Data hooks",id:"data-hooks",level:2}],ae=(oe="GuideBadge",function(e){return console.warn("Component "+oe+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var oe;const ie={toc:re};function se(e){var{components:t}=e,n=Y(e,["components"]);return(0,a.kt)("wrapper",J(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){X(e,t,n[t])}))}return e}({},ie,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Data is essential for any UI Application and these applications are a bridge between users and the underlying data source(s), making it possible for users to interact with data in a meaningful way."),(0,a.kt)("p",null,"To manage data, ",(0,a.kt)("strong",{parentName:"p"},"refine")," needs a ",(0,a.kt)("inlineCode",{parentName:"p"},"data provider"),", which is a function that implements the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#dataprovider"},(0,a.kt)("inlineCode",{parentName:"a"},"DataProvider"))," interface. It is responsible for communicating with your API and making data available to ",(0,a.kt)("strong",{parentName:"p"},"refine")," applications. While you can use one of our built-in data providers, you can also easily create your own data provider matching your API."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," passes relevant parameters like ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," name, or the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record to your data provider, so data provider can make API calls to appropriate endpoints."),(0,a.kt)("p",null,"Once you provide ",(0,a.kt)("inlineCode",{parentName:"p"},"data provider")," to ",(0,a.kt)("strong",{parentName:"p"},"refine"),", you can utilize our data hooks (",(0,a.kt)("inlineCode",{parentName:"p"},"useOne"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useList"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdate"),") to easily manage your data from various sources, including REST, GraphQL, RPC, and SOAP."),(0,a.kt)("p",null,"Moreover, refine offers support for multiple data providers, allowing you to use different data providers for different resources. For instance, you can use ",(0,a.kt)("strong",{parentName:"p"},"REST")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"posts")," endpoint and ",(0,a.kt)("strong",{parentName:"p"},"GraphQL")," for the ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," query."),(0,a.kt)("div",null,(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/providers/data-provider/api-consuming-flow.png"})),(0,a.kt)("h2",{id:"fetching-data"},"Fetching Data"),(0,a.kt)("p",null,"Imagine we want to fetch a record with the ID ",(0,a.kt)("inlineCode",{parentName:"p"},"123")," from the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," endpoint. For this, we will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne")," hook. Under the hood, it calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider.getOne")," method from your data provider."),(0,a.kt)(i,{mdxType:"UseOne"}),(0,a.kt)("h2",{id:"updating-data"},"Updating Data"),(0,a.kt)("p",null,"Now, let's update the record with the ID ",(0,a.kt)("inlineCode",{parentName:"p"},"124")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," endpoint. To do this, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdate")," hook, which calls ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider.update")," method under the hood."),(0,a.kt)("p",null,"In this example, we are updating product's price with a random value."),(0,a.kt)(l,{mdxType:"UseUpdate"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," offers various data hooks for CRUD operations, you can see the list of these hooks below:"),(0,a.kt)(K,{mdxType:"DataHooks"}),(0,a.kt)("h2",{id:"how-refine-treats-data-and-state"},"How refine treats data and state?"),(0,a.kt)("p",null,"Data hooks uses ",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/query"},"TanStack Query")," under the hood. It takes care of managing the state for you. It provides ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoading"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," states to help you handle loading, success, and error scenarios gracefully."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," treats data and state in a structured and efficient manner, providing developers with powerful tools to manage data seamlessly within their applications. Here are some key aspects of how ",(0,a.kt)("strong",{parentName:"p"},"refine")," treats data and state:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Resource-Based Approach:")," Organizes data around resources, which are essentially models representing different data entities or API endpoints. These resources help structure your application's data management.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Invalidation:")," Automatically invalidates data after a successful mutation (e.g., creating, updating, or deleting a resource), ensuring that the UI is updated with the latest data.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Caching:")," Caches data to improve performance and deduplicates API calls.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Optimistic Updates:")," Supports optimistic updates, which means it will update the UI optimistically before the actual API call is complete. This enhances the user experience by reducing perceived latency.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Hooks for CRUD Operations:")," Offers a collection of hooks that align with common data operations like listing, creating, updating, and deleting data (",(0,a.kt)("inlineCode",{parentName:"p"},"useList"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useCreate"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdate"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useDelete"),"). In addition to these basic hooks, ",(0,a.kt)("strong",{parentName:"p"},"refine")," provides advanced hooks that are a composition of these fundamental ones for handling more complex tasks (",(0,a.kt)("inlineCode",{parentName:"p"},"useForm"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelect"),").")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Integration with UI Libraries:")," Works seamlessly with popular UI libraries. It provides a structured approach to represent data within these libraries.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Realtime Updates"),": Allowing your application to reflect changes in data as they occur."))),(0,a.kt)("h2",{id:"meta-usage-"},"Meta usage ",(0,a.kt)(ae,{id:"guides-concepts/general-concepts#meta",mdxType:"GuideBadge"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#metadataquery"},(0,a.kt)("inlineCode",{parentName:"a"},"meta"))," is a special property that can be used to pass additional information to your data provider methods through data hooks like ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useList"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," from anywhere across your application."),(0,a.kt)("p",null,"The capabilities of ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," properties depend on your data provider's implementation. While some may use additional features through ",(0,a.kt)("inlineCode",{parentName:"p"},"meta"),", others may not use them or follow a different approach."),(0,a.kt)("p",null,"Here are some examples of ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," usage:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Passing additional headers or parameters to the request."),(0,a.kt)("li",{parentName:"ul"},"Generate GraphQL queries."),(0,a.kt)("li",{parentName:"ul"},"Multi-tenancy support (passing the tenant id to the request).")),(0,a.kt)("p",null,"In the example below, we are passing ",(0,a.kt)("inlineCode",{parentName:"p"},"meta.foo")," property to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne")," hook. Then, we are using this property to pass additional headers to the request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider, useOne } from "@refinedev/core";\n\nuseOne({\n    resource: "products",\n    id: 1,\n    meta: {\n        foo: "bar",\n    },\n});\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    getOne: async ({ resource, id, meta }) => {\n        const response = await fetch(`${apiUrl}/${resource}/${id}`, {\n            headers: {\n                "x-foo": meta.foo,\n            },\n        });\n\n        const data = await response.json();\n\n        return {\n            data,\n        };\n    },\n    ...\n});\n')),(0,a.kt)("h2",{id:"graphql"},"GraphQL"),(0,a.kt)("p",null,"As mentioned above, ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," property can also be used to generate GraphQL queries."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"meta.fields"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"meta.variables"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"meta.operation")," fields implements ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/atulmy/gql-query-builder"},"gql-query-builder")," interface, so this interface can be used to easily generate GraphQL queries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider, useOne } from "@refinedev/core";\nimport * as gql from "gql-query-builder";\nimport { GraphQLClient } from "graphql-request";\n\nuseOne({\n    resource: "products",\n    id: 1,\n    meta: {\n        fields: [\n            "id",\n            "title",\n            {\n                category: ["title"],\n            },\n        ],\n    },\n});\n\nconst dataProvider = (client: GraphQLClient): DataProvider => {\n    getOne: async ({ resource, id, meta }) => {\n        const operation = meta?.operation || resource;\n\n        const { query, variables } = gql.query({\n            operation,\n            variables: {\n                id: { value: id, type: "ID", required: true },\n            },\n            fields: meta?.fields,\n            variables: meta?.variables,\n        });\n\n        console.log(query);\n        // "query ($id: ID!) { products (id: $id) { id, title, category { title } } }"\n\n        const response = await client.request(query, variables);\n\n        return {\n            data: response[resource],\n        };\n    };\n    ...\n};\n')),(0,a.kt)("p",null,"Also, you can check ",(0,a.kt)("strong",{parentName:"p"},"refine"),"'s built-in ",(0,a.kt)("a",{parentName:"p",href:"#supported-data-providers"},"GraphQL data providers")," to handle communication with your GraphQL APIs or use them as a starting point."),(0,a.kt)("h2",{id:"multiple-data-providers"},"Multiple Data Providers"),(0,a.kt)("p",null,"Using multiple data providers in ",(0,a.kt)("strong",{parentName:"p"},"refine")," allows you to work with various APIs or data sources in a single application. You might use different data providers for different parts of your app."),(0,a.kt)("p",null,"Each data provider can have its own configuration, making it easier to manage complex data scenarios within a single application.\nThis flexibility is handy when dealing with various data structures and APIs."),(0,a.kt)("p",null,"For example, we want to fetch:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"products")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"https://api.finefoods.refine.dev")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"user")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"https://api.fake-rest.refine.dev"),".")),(0,a.kt)("p",null,"As you can see the example below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We are defining multiple data providers in ",(0,a.kt)("inlineCode",{parentName:"li"},"App.tsx"),"."),(0,a.kt)("li",{parentName:"ul"},"Using ",(0,a.kt)("inlineCode",{parentName:"li"},"dataProviderName")," field to specify which data provider to use in data hooks in ",(0,a.kt)("inlineCode",{parentName:"li"},"home-page.tsx"),".")),(0,a.kt)(N,{mdxType:"MultipleDataProvider"}),(0,a.kt)("h2",{id:"handling-errors"},"Handling errors"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," expects errors to be extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},"HttpError"),". We believe that having consistent error interface makes it easier to handle errors coming from your API."),(0,a.kt)("p",null,"When implemented correctly, ",(0,a.kt)("strong",{parentName:"p"},"refine")," offers several advantages in error handling:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Notification"),": If you have ",(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/core/providers/notification-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"notificationProvider")," "),", ",(0,a.kt)("strong",{parentName:"li"},"refine")," will automatically show a notification when an error occurs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Server-Side Validation"),": Shows ",(0,a.kt)("a",{parentName:"li",href:"/docs/advanced-tutorials/forms/server-side-form-validation/"},"errors coming from the API")," on the corresponding form fields."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Optimistic Updates"),": Instantly update UI when you send a mutation and automatically revert the changes if an error occurs during the mutation.")),(0,a.kt)($,{mdxType:"ErrorHandling"}),(0,a.kt)("h2",{id:"listing-data"},"Listing Data"),(0,a.kt)("p",null,"Imagine we need to fetch a list of records from the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," endpoint. For this, we can use ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," or ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useInfiniteList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useInfiniteList"))," hooks. It calls ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider.getList")," method from your data provider, returns ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"total")," fields from the response."),(0,a.kt)(f,{mdxType:"UseList"}),(0,a.kt)("h3",{id:"filters-sorters-and-pagination"},"Filters, Sorters and Pagination"),(0,a.kt)("p",null,"We fetched all the products from the ",(0,a.kt)("inlineCode",{parentName:"p"},"products")," endpoint in the previous example. But in real world, we usually need to fetch a subset of the data."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," provides a unified ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"filters")),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"sorters")),", and ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#pagination"},(0,a.kt)("inlineCode",{parentName:"a"},"pagination"))," parameters in data hooks to pass your ",(0,a.kt)("inlineCode",{parentName:"p"},"data provider")," methods, making it possible to fetch the data you need with any complexity. It's data provider's responsibility to handle these parameters and modify the request sent to your API."),(0,a.kt)("p",null,"Now let's make it more realistic example by adding filters, sorters, and pagination."),(0,a.kt)("p",null,"We want to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Fetch 5 products"),(0,a.kt)("li",{parentName:"ul"},"With ",(0,a.kt)("inlineCode",{parentName:"li"},"material")," field equals to ",(0,a.kt)("inlineCode",{parentName:"li"},"wooden")),(0,a.kt)("li",{parentName:"ul"},"Sorted by ",(0,a.kt)("inlineCode",{parentName:"li"},"ID")," field in ",(0,a.kt)("inlineCode",{parentName:"li"},"descending")," order")),(0,a.kt)("p",null,"For this purpose, we can pass additional parameters to ",(0,a.kt)("inlineCode",{parentName:"p"},"useList")," hook like ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"filters")),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"sorters")),", and ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#pagination"},(0,a.kt)("inlineCode",{parentName:"a"},"pagination")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useList")," calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider.getList")," method under the hood with the given parameters. We will use these parameters modify our request sent to our API."),(0,a.kt)(y,{mdxType:"UseListWithFilters"}),(0,a.kt)("p",null,"While the example above is simple, it's also possible to build more complex queries with ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"filters"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"sorters")),"."),(0,a.kt)("p",null,"For instance, we can fetch products:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With wooden material"),(0,a.kt)("li",{parentName:"ul"},"Belongs to category ID 45"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"OR")," have a price between 1000 and 2000.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider, useList } from "@refinedev/core";\n\nuseList({\n  resource: "products",\n  pagination: {\n    current: 1,\n    pageSize: 10,\n  },\n  filters: [\n    {\n      operator: "and",\n      value: [\n        { field: "material", operator: "eq", value: "wooden" },\n        { field: "category.id", operator: "eq", value: 45 },\n      ],\n    },\n    {\n      operator: "or",\n      value: [\n        { field: "price", operator: "gte", value: 1000 },\n        { field: "price", operator: "lte", value: 2000 },\n      ],\n    },\n  ],\n});\n')),(0,a.kt)("h2",{id:"relationships"},"Relationships"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," handles data relations with data hooks(eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany"),", etc.). This compositional design allows you to flexibly and efficiently manage data relationships to suit your specific requirements."),(0,a.kt)("h3",{id:"one-to-one"},"One-to-One"),(0,a.kt)("p",null,"In a one-to-one relationship, each thing matches with just one other thing. It's like a unique partnership."),(0,a.kt)("p",null,"For instance, a product can have only one product detail."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Products     \u2502       \u2502 ProductDetail  \u2502\n\u2502--------------\u2502       \u2502----------------\u2502\n\u2502 id           \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 id             \u2502\n\u2502 name         \u2502       \u2502 weight         \u2502\n\u2502 price        \u2502       \u2502 dimensions     \u2502\n\u2502 description  \u2502       \u2502 productId      \u2502\n\u2502 detail       \u2502       \u2502                \u2502\n\u2502              \u2502       \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne")," hook to fetch the detail of a product."),(0,a.kt)(I,{mdxType:"OneToOne"}),(0,a.kt)("h3",{id:"one-to-many"},"One-to-Many"),(0,a.kt)("p",null,"In a one-to-many relationship, each resource matches with many other resource. It's like a parent with many children."),(0,a.kt)("p",null,"For instance, a products can have many reviews."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Products     \u2502       \u2502 Reviews        \u2502\n\u2502--------------\u2502       \u2502----------------\u2502\n\u2502 id           \u2502\u2500\u2500\u2500\u2510   \u2502 id             \u2502\n\u2502 name         \u2502   \u2502   \u2502 rating         \u2502\n\u2502 price        \u2502   \u2502   \u2502 comment        \u2502\n\u2502 description  \u2502   \u2502   \u2502 user           \u2502\n\u2502 detail       \u2502   \u2514\u2500\u2500\u2500\u2502 product        \u2502\n\u2502              \u2502       \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useList")," hook and filter by the product ID to fetch the reviews of a product."),(0,a.kt)(q,{mdxType:"OneToMany"}),(0,a.kt)("h3",{id:"many-to-many"},"Many-to-Many"),(0,a.kt)("p",null,"In a many-to-many relationship, each resource matches with many other resources, and each of those resources matches with many other resources."),(0,a.kt)("p",null,"For instance, products can have many categories, and categories can have many products."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-md"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Products     \u2502       \u2502 ProductCategories \u2502       \u2502 Categories   \u2502\n\u2502--------------\u2502       \u2502----------------\u2500\u2500\u2500\u2502       \u2502--------------\u2502\n\u2502 id           \u2502\u2500\u2500\u2500\u2510   \u2502 id                \u2502   \u250c\u2500\u2500\u2500\u2502 id           \u2502\n\u2502 name         \u2502   \u2514\u2500\u2500\u2500\u2502 productId         \u2502   \u2502   \u2502 name         \u2502\n\u2502 price        \u2502       \u2502 categoryId        \u2502\u2500\u2500\u2500\u2518   \u2502 description  \u2502\n\u2502 description  \u2502       \u2502                   \u2502       \u2502              \u2502\n\u2502 detail       \u2502       \u2502                   \u2502       \u2502              \u2502\n\u2502              \u2502       \u2502                   \u2502       \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n")),(0,a.kt)("p",null,"In this case, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany")," hook to fetch the categories of a product and the ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany")," hook to fetch the products of a category."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider, useMany } from "@refinedev/core";\n\nconst { data: productCategories } = useList({\n  resource: "productCategories",\n});\n\nconst { data: products } = useMany({\n  resource: "products",\n  ids: productCategories.map((productCategory) => productCategory.productId),\n  queryOptions: {\n    enabled: productCategories.length > 0,\n  },\n});\n\nconst { data: categories } = useMany({\n  resource: "categories",\n  ids: productCategories.map((productCategory) => productCategory.categoryId),\n  queryOptions: {\n    enabled: productCategories.length > 0,\n  },\n});\n')),(0,a.kt)("h2",{id:"authentication-"},"Authentication ",(0,a.kt)(ae,{id:"guides-concepts/authentication/",mdxType:"GuideBadge"})),(0,a.kt)("p",null,"Imagine you want to fetch a data from a protected API. To do this, you will first need to obtain your authentication token and you will need to send this token with every request."),(0,a.kt)("p",null,"In ",(0,a.kt)("strong",{parentName:"p"},"refine")," we handle ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides-concepts/authentication/"},"authentication")," with ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/providers/auth-provider/"},"Auth Provider"),". To get token from the API, we will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"authProvider.login")," method. Then, we will use ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/auth/authenticated/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Authenticated />"))," component to to render the appropriate components."),(0,a.kt)("p",null,"After obtaining the token, we'll use Axios interceptors to include the token in the headers of all requests."),(0,a.kt)(C,{mdxType:"Authentication"}),(0,a.kt)("h2",{id:"tanstack-query-queryclient"},"TanStack Query ",(0,a.kt)("inlineCode",{parentName:"h2"},"QueryClient")),(0,a.kt)("p",null,"To modify the ",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/query/latest/docs/react/reference/QueryClient"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryClient"))," instance, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"reactQuery")," prop of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine />"))," component."),(0,a.kt)("h2",{id:"dataprovider-interface"},(0,a.kt)("inlineCode",{parentName:"h2"},"dataProvider")," interface"),(0,a.kt)("p",null,"To better understand the data provider interface, we have created an example that demonstrates how the required methods are implemented. For more comprehensive and diverse examples, you can refer to the ",(0,a.kt)("a",{parentName:"p",href:"#supported-data-providers"},"supported data providers")," section."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In this example, we implemented data provider to support ",(0,a.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/"},"JSON placeholder API"),".")),(0,a.kt)(Z.default,{mdxType:"DataProviderInterface"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider/"},"To learn more about the ",(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider")," interface, check out the reference page.")),(0,a.kt)("h2",{id:"supported-data-providers"},"Supported data providers"),(0,a.kt)(H.ZP,{mdxType:"SupportedDataProviders"}),(0,a.kt)("h2",{id:"data-hooks"},"Data hooks"),(0,a.kt)(K,{mdxType:"DataHooks"}))}se.isMDXComponent=!0}}]);