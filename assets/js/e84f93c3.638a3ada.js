"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[16191],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},45273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={id:"create-dataprovider",title:"3. Create a data provider from scratch",tutorial:{prev:"tutorial/understanding-dataprovider/swizzle",next:"tutorial/understanding-resources/index"}},s=void 0,p={unversionedId:"tutorial/understanding-dataprovider/create-dataprovider",id:"tutorial/understanding-dataprovider/create-dataprovider",title:"3. Create a data provider from scratch",description:"Introduction",source:"@site/docs/tutorial/2-understanding-dataprovider/2-create-dataprovider.md",sourceDirName:"tutorial/2-understanding-dataprovider",slug:"/tutorial/understanding-dataprovider/create-dataprovider",permalink:"/docs/tutorial/understanding-dataprovider/create-dataprovider",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/tutorial/2-understanding-dataprovider/2-create-dataprovider.md",tags:[],version:"current",lastUpdatedBy:"Ali Emir \u015een",lastUpdatedAt:1700518945,formattedLastUpdatedAt:"Nov 20, 2023",sidebarPosition:2,frontMatter:{id:"create-dataprovider",title:"3. Create a data provider from scratch",tutorial:{prev:"tutorial/understanding-dataprovider/swizzle",next:"tutorial/understanding-resources/index"}}},d={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Methods",id:"methods",level:2},{value:"getList",id:"getlist",level:3},{value:"create",id:"create",level:3},{value:"update",id:"update",level:3},{value:"deleteOne",id:"deleteone",level:3},{value:"getOne",id:"getone",level:3},{value:"getApiUrl",id:"getapiurl",level:3},{value:"custom",id:"custom",level:3},{value:"Bulk Actions",id:"bulk-actions",level:2},{value:"getMany",id:"getmany",level:3},{value:"createMany",id:"createmany",level:3},{value:"deleteMany",id:"deletemany",level:3},{value:"updateMany",id:"updatemany",level:3},{value:"meta usage",id:"meta-usage",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=m("Checklist"),k=m("ChecklistItem"),g={toc:u};function h(e){var{components:t}=e,n=i(e,["components"]);return(0,a.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The standards and usage of APIs can vary significantly, so it is possible that ",(0,a.kt)("strong",{parentName:"p"},"refine's")," built-in data providers may not be suitable for your needs. If that is the case, you will need to develop your own data provider."),(0,a.kt)("p",null,"Data providers function like an adapter system infrastructure, communicating with the ",(0,a.kt)("inlineCode",{parentName:"p"},"REST"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"RPC")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"SOAP")," based APIs. Libraries like ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Apollo-Client")," can be used for this communication."),(0,a.kt)("p",null,"We will begin developing our data provider by creating a file and adding additional methods to it as we proceed. We will use ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," as our HTTP client in this tutorial. It will allow us to make efficient and reliable HTTP requests to our server."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"axios")," also provides interceptors, which are methods that trigger before the main method. They also provide benefits such as centralized error handling, modifying request or response data and showing global loading indicators.")),(0,a.kt)("p",null,"To get started, install ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," in your project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install axios@0.26\n")),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"stringify")," library will allow us to convert the query parameters into a string format. This can be useful when we need to pass query parameters as part of an HTTP request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install query-string@7\n")),(0,a.kt)("p",null,"After that, create the following file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\nimport { stringify } from "query-string";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    // Methods\n});\n')),(0,a.kt)("h2",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"When the API returns an error, you need to extend ",(0,a.kt)("strong",{parentName:"p"},"refine")," from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},"HttpError")," to handle it. To transform the error from the response before ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," returns the response to your code, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," interceptor."),(0,a.kt)("p",null,"To do this, create an ",(0,a.kt)("inlineCode",{parentName:"p"},"axiosInstance")," in a ",(0,a.kt)("inlineCode",{parentName:"p"},"utility")," file, define an ",(0,a.kt)("inlineCode",{parentName:"p"},"interceptor")," to handle errors, and then export it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'// highlight-start\nimport axios from "axios";\nimport { DataProvider, HttpError } from "@refinedev/core";\n// highlight-end\nimport { stringify } from "query-string";\n\n// highlight-start\n// Error handling with axios interceptors\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    },\n);\n// highlight-end\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    // Methods\n});\n')),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("p",null,"We will now add the methods the data provider needs to implement, which are:"),(0,a.kt)("h3",{id:"getlist"},"getList"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getList")," method is used to get a list of resources with sorting, filtering and pagination features.\nIt takes ",(0,a.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"filters")," as parameters and returns ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"total"),"."),(0,a.kt)("p",null,"Let's assume the API we want to implement is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'[GET] https://api.fake-rest.refine.dev/posts\n\nHTTP/2 200\nContent-Type: application/json\nx-total-count: 1000\naccess-control-expose-headers: X-Total-Count\n\n[\n  {\n    "id": 930,\n    "title": "Rerum id laborum architecto et rerum earum.",\n    "slug": "et-voluptas-corporis",\n    "category": {\n      "id": 4\n    }\n    "status": "draft",\n  },\n  {\n    "id": 892,\n    "title": "Architecto officiis sint voluptatem modi.",\n    "slug": "iusto-est-corrupti",\n    "category": {\n      "id": 1\n    },\n    "status": "rejected",\n  }\n  ...\n]\n')),(0,a.kt)("p",null,"First, we need to return the data and the total number of records using the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," parameter."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," parameter is the name of the resource that we want to get the data from. It passes by the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," parameter in hooks. In our case, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"posts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    getList: async ({ resource }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { data, headers } = await axiosInstance.get(url);\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n    // ...\n});\n')),(0,a.kt)("p",null,"We can then add the pagination feature. For this, the API takes the following parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"[GET] https://api.fake-rest.refine.dev/posts?_limit=10&_page=2\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination")," parameter for pagination. For this parameter, ",(0,a.kt)("inlineCode",{parentName:"p"},"current")," refers to the page number, and ",(0,a.kt)("inlineCode",{parentName:"p"},"pageSize")," refers to the number of records on each page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"{\n    current: 1,\n    pageSize: 10,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    getList: async ({ resource, pagination }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        // highlight-start\n        const { current = 1, pageSize = 10 } = pagination ?? {};\n\n        const query: {\n            _start?: number;\n            _end?: number;\n        } = {\n            _start: (current - 1) * pageSize,\n            _end: current * pageSize,\n        };\n\n        const { data, headers } = await axiosInstance.get(\n            `${url}?${stringify(query)}`,\n        );\n        // highlight-end\n\n        const total = +headers["x-total-count"];\n\n        return {\n            data,\n            total,\n        };\n    },\n    // ...\n});\n')),(0,a.kt)("p",null,"Now let's add the sorting feature. The API expects the following parameters for sorting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"[GET] https://api.fake-rest.refine.dev/posts?_limit=10&_page=2&_sort=id&_order=desc\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters")," parameter for sorting. This parameter includes the ",(0,a.kt)("inlineCode",{parentName:"p"},"field")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"order")," values.\nSupports multiple field sorting. ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"CrudSort[]")," type, it comes in the data provider as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'[\n    {\n    field: "id",\n    order: "desc",\n    },\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'getList: async ({ resource, pagination, sorters }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { current = 1, pageSize = 10 } = pagination ?? {};\n\n    const query: {\n    _start?: number;\n    _end?: number;\n    // highlight-start\n    _sort?: string;\n    _order?: string;\n    // highlight-end\n    } = {\n    _start: (current - 1) * pageSize,\n    _end: current * pageSize,\n    };\n\n    // highlight-start\n    if (sorters && sorters.length > 0) {\n    query._sort = sorters[0].field;\n    query._order = sorters[0].order;\n    }\n    // highlight-end\n\n    // highlight-next-line\n    const { data, headers } = await axiosInstance.get(\n    `${url}?${stringify(query)}`,\n    );\n\n    const total = +headers["x-total-count"];\n\n    return {\n    data,\n    total,\n    };\n},\n')),(0,a.kt)("p",null,"Now let's add the filtering feature. The API expects the following parameters for filtering:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\n[GET] https://api.fake-rest.refine.dev/posts?_limit=10&_page=2&_sort=id&_order=desc&title_like\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"filters")," parameter for filtering. This parameter contains the ",(0,a.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"operator")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," values with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"CrudFilters []")," type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'[\n    {\n    field: "status"\n    operator: "eq"\n    value: "published"\n    },\n    {\n    field: "title"\n    operator: "contains"\n    value: "Hello"\n    },\n]\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"operator")," data comes with the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudoperators"},"CrudOperators")," type and needs to be mapped to the API. For this, the following ",(0,a.kt)("inlineCode",{parentName:"p"},"mapOperator")," function needs to be written:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// Map refine operators to API operators\nconst mapOperator = (operator: CrudOperators): string => {\n    switch (operator) {\n        case "ne":\n        case "gte":\n        case "lte":\n            return `_${operator}`;\n        case "contains":\n            return "_like";\n        case "eq":\n        default:\n            return "";\n    }\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'// highlight-start\nconst generateFilters = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: string } = {};\n\n    filters?.map((filter): void => {\n    if ("field" in filter) {\n        const { field, operator, value } = filter;\n        const mappedOperator = mapOperator(operator);\n        queryFilters[`${field}${mappedOperator}`] = value;\n    }\n    });\n\n    return queryFilters;\n};\n// highlight-end\n\ngetList: async ({ resource, pagination, sorters, filters }) => {\n    const url = `${apiUrl}/${resource}`;\n\n    const { current = 1, pageSize = 10 } = pagination ?? {};\n\n    const query: {\n    _start?: number;\n    _end?: number;\n    _sort?: string;\n    _order?: string;\n    } = {\n    _start: (current - 1) * pageSize,\n    _end: current * pageSize,\n    };\n\n    if (sorters && sorters.length > 0) {\n    query._sort = sorters[0].field;\n    query._order = sorters[0].order;\n    }\n\n    // highlight-next-line\n    const queryFilters = generateFilters(filters);\n\n    const { data, headers } = await axiosInstance.get(\n    // highlight-next-line\n    `${url}?${stringify(query)}&${stringify(queryFilters)}`\n    );\n\n    const total = +headers["x-total-count"];\n\n    return {\n    data,\n    total,\n    };\n},\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The conditional filters can also be made using ",(0,a.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"or"),". For example:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'[\n    {\n    operator: "or",\n    value: [\n        {\n        operator: "and"\n        value: [\n            {\n            field: "title"\n            operator: "contain"\n            value: "Hello"\n            },\n            {\n            field: "age"\n            operator: "gte"\n            value: "18"\n            },\n        ]\n        },\n        {\n        operator: "and"\n        value: [\n            {\n            field: "title"\n            operator: "contain"\n            value: "Hello"\n            },\n            {\n            field: "age"\n            operator: "lte"\n            value: "18"\n            },\n        ]\n        }\n    ]\n    }\n]\n'))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pagination?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#pagination"},(0,a.kt)("inlineCode",{parentName:"a"},"Pagination")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filters?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters")))))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"getList")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useList")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"useInfiniteList")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useList } from "@refinedev/core";\n\nconst { data } = useList({\n    resource: "posts",\n    sorters: [\n        {\n            field: "id",\n            order: "desc",\n        },\n    ],\n    filters: [\n        {\n            field: "title",\n            operator: "contains",\n            value: "hello",\n        },\n    ],\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList"},"Refer to the useList documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"create"},"create"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," method creates a new record with the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    create: async ({ resource, variables }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { data } = await axiosInstance.post(url, variables);\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"variables"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreate#type-parameters"},(0,a.kt)("inlineCode",{parentName:"a"},"useCreate"))," to type ",(0,a.kt)("inlineCode",{parentName:"p"},"variables"))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCreate")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCreate } from "@refinedev/core";\n\nconst { mutate } = useCreate();\n\nmutate({\n    resource: "posts",\n    values: {\n        title: "New Post",\n    },\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreate/"},"Refer to the useCreate documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"update"},"update"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," method updates the record with the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    update: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await axiosInstance.patch(url, variables);\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},"BaseKey")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"variables"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdate#type-parameters"},(0,a.kt)("inlineCode",{parentName:"a"},"useUpdate"))," to type ",(0,a.kt)("inlineCode",{parentName:"p"},"variables"))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdate")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useUpdate } from "@refinedev/core";\n\nconst { mutate } = useUpdate();\n\nmutate({\n    resource: "posts",\n    id: 2,\n    values: { title: "New Post Title" },\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdate/"},"Refer to the useUpdate documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"deleteone"},"deleteOne"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteOne")," method delete the record with the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    deleteOne: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await axiosInstance.delete(url, {\n            data: variables,\n        });\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},"BaseKey")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"variables"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,a.kt)("inlineCode",{parentName:"a"},"useDelete"))," to type ",(0,a.kt)("inlineCode",{parentName:"p"},"variables"))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteOne")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useDelete")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useDelete } from "@refinedev/core";\n\nconst { mutate } = useDelete();\n\nmutate({ resource: "posts", id: 2 });\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},"Refer to the useDelete documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"getone"},"getOne"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getOne")," method gets the record with the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    getOne: async ({ resource, id }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await axiosInstance.get(url);\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},"BaseKey")),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"getOne")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useOne } from "@refinedev/core";\n\nconst { data } = useOne({ resource: "posts", id: 1 });\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useOne/"},"Refer to the useOne documentation for more information. ","\u2192"))),(0,a.kt)("br",null),(0,a.kt)("h3",{id:"getapiurl"},"getApiUrl"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getApiUrl")," method returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"apiUrl")," value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    // highlight-next-line\n    getApiUrl: () => apiUrl,\n    // ...\n});\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"getApiUrl")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useApiUrl")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useApiUrl } from "@refinedev/core";\n\nconst { data } = useApiUrl();\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useApiUrl"},"Refer to the useApiUrl documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"custom"},"custom"),(0,a.kt)("p",null,"An optional method named ",(0,a.kt)("inlineCode",{parentName:"p"},"custom")," can be added to handle requests with custom parameters like the URL or CRUD methods and configurations.\nIt's useful if you have non-standard ",(0,a.kt)("inlineCode",{parentName:"p"},"REST")," API endpoints or want to make a connection with external resources."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="dataProvider.ts"',title:'"dataProvider.ts"'},'export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    custom: async ({\n        url,\n        method,\n        filters,\n        sorters,\n        payload,\n        query,\n        headers,\n    }) => {\n        let requestUrl = `${url}?`;\n\n        if (sorters && sorters.length > 0) {\n            const sortQuery = {\n                _sort: sorters[0].field,\n                _order: sorters[0].order,\n            };\n            requestUrl = `${requestUrl}&${stringify(sortQuery)}`;\n        }\n\n        if (filters) {\n            const filterQuery = generateFilters(filters);\n            requestUrl = `${requestUrl}&${stringify(filterQuery)}`;\n        }\n\n        if (query) {\n            requestUrl = `${requestUrl}&${stringify(query)}`;\n        }\n\n        let axiosResponse;\n        switch (method) {\n            case "put":\n            case "post":\n            case "patch":\n                axiosResponse = await axiosInstance[method](url, payload, {\n                    headers,\n                });\n                break;\n            case "delete":\n                axiosResponse = await axiosInstance.delete(url, {\n                    data: payload,\n                    headers: headers,\n                });\n                break;\n            default:\n                axiosResponse = await axiosInstance.get(requestUrl, {\n                    headers,\n                });\n                break;\n        }\n\n        const { data } = axiosResponse;\n\n        return { data };\n    },\n    // ...\n});\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"url"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"method"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"delete"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"head"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"options"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"put"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"patch"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")),";")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filters?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters")),";")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"payload?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"query?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"headers?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"custom")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCustom")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCustom, useApiUrl } from "@refinedev/core";\n\nconst { data, isLoading } = useCustom({\n    url: `${apiURL}/posts-unique-check`,\n    method: "get",\n    config: {\n        query: {\n            title: "Foo bar",\n        },\n    },\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCustom/"},"Refer to the useCustom documentation for more information. ","\u2192"))),(0,a.kt)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,a.kt)("p",null,"Bulk actions are actions that can be performed on multiple items at once to improve speed and efficiency. They are commonly used in admin panels. They can be used for data ",(0,a.kt)("a",{parentName:"p",href:"/docs/examples/core/useImport"},(0,a.kt)("inlineCode",{parentName:"a"},"import"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/import-export/useExport"},(0,a.kt)("inlineCode",{parentName:"a"},"export")),", and are also atomic, meaning that they are treated as a single unit."),(0,a.kt)("p",null,"If your API supports bulk actions, you can implement them in your data provider."),(0,a.kt)("h3",{id:"getmany"},"getMany"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getMany")," method gets the records with the ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ids")," parameters. This method is optional, and refine will use the ",(0,a.kt)("a",{parentName:"p",href:"#getone"},(0,a.kt)("inlineCode",{parentName:"a"},"getOne"))," method to handle multiple requests if you don't implement it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    getMany: async ({ resource, ids }) => {\n        const { data } = await axiosInstance.get(\n            `${apiUrl}/${resource}?${stringify({ id: ids })}`,\n        );\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ids"),(0,a.kt)("td",{parentName:"tr",align:null},"[",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},"BaseKey"),"]"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"getMany")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useMany } from "@refinedev/core";\n\nconst { data } = useMany({ resource: "posts", ids: [1, 2] });\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},"Refer to the useMany documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"createmany"},"createMany"),(0,a.kt)("p",null,"This method allows us to create multiple items in a resource. This method is optional, and refine will use the ",(0,a.kt)("a",{parentName:"p",href:"#create"},(0,a.kt)("inlineCode",{parentName:"a"},"create"))," method to handle multiple requests if you don't implement it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    createMany: async ({ resource, variables }) => {\n        const url = `${apiUrl}/${resource}/bulk`;\n        const { data } = await axiosInstance.post(url, { values: variables });\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"variables"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},(0,a.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," to type ",(0,a.kt)("inlineCode",{parentName:"p"},"variables"))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"createMany")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCreateMany")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useCreateMany } from "@refinedev/core";\n\nconst { mutate } = useCreateMany();\n\nmutate({\n    resource: "posts",\n    values: [\n        {\n            title: "New Post",\n        },\n        {\n            title: "Another New Post",\n        },\n    ],\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useCreateMany/"},"Refer to the useCreateMany documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"deletemany"},"deleteMany"),(0,a.kt)("p",null,"This method allows us to delete multiple items in a resource. This method is optional, and refine will use the ",(0,a.kt)("a",{parentName:"p",href:"#deleteone"},(0,a.kt)("inlineCode",{parentName:"a"},"deleteOne"))," method to handle multiple requests if you don't implement it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    deleteMany: async ({ resource, ids }) => {\n        const url = `${apiUrl}/${resource}/bulk?ids=${ids.join(",")}`;\n        const { data } = await axiosInstance.delete(url);\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resource"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ids"),(0,a.kt)("td",{parentName:"tr",align:null},"[",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},"BaseKey"),"]"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"variables"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},(0,a.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," to type ",(0,a.kt)("inlineCode",{parentName:"p"},"variables"))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"deleteMany")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useDeleteMany")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useDeleteMany } from "@refinedev/core";\n\nconst { mutate } = useDeleteMany();\n\nmutate({\n    resource: "posts",\n    ids: [2, 3],\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDeleteMany/"},"Refer to the useDeleteMany documentation for more information. ","\u2192"))),(0,a.kt)("h3",{id:"updatemany"},"updateMany"),(0,a.kt)("p",null,"This method allows us to update multiple items in a resource. This method is optional, and refine will use the ",(0,a.kt)("a",{parentName:"p",href:"#update"},(0,a.kt)("inlineCode",{parentName:"a"},"update"))," method to handle multiple requests if you don't implement it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},"export const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    updateMany: async ({ resource, ids, variables }) => {\n        const url = `${apiUrl}/${resource}/bulk`;\n        const { data } = await axiosInstance.patch(url, { ids, variables });\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"refine")," will consume the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateMany")," method using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useUpdateMany")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { useUpdateMany } from "@refinedev/core";\n\nconst { mutate } = useUpdateMany();\n\nmutate({\n    resource: "posts",\n    ids: [1, 2],\n    values: { status: "draft" },\n});\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useUpdateMany/"},"Refer to the useUpdateMany documentation for more information. ","\u2192"))),(0,a.kt)("h2",{id:"meta-usage"},"meta usage"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,a.kt)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#meta"},"Refer to the ",(0,a.kt)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation for more information ","\u2192")),(0,a.kt)("p",null,"For example, let's say that we want to pass a custom header to the ",(0,a.kt)("inlineCode",{parentName:"p"},"getOne")," method. We can do this by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," parameter to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne")," data hook."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="post/edit.tsx"',title:'"post/edit.tsx"'},'import { useOne } from "@refinedev/core";\n\nuseOne({\n    resource: "post",\n    id: "1",\n    meta: {\n        headers: {\n            "x-custom-header": "hello world",\n        },\n    },\n});\n')),(0,a.kt)("p",null,"Now, we can access the ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," parameter in the ",(0,a.kt)("inlineCode",{parentName:"p"},"getOne")," method of the data provider."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n    // ...\n    getOne: async ({ resource, id, variables, meta }) => {\n        // highlight-next-line\n        const { headers } = meta;\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        // highlight-start\n        axiosInstance.defaults.headers = {\n            ...headers,\n        };\n        // highlight-end\n\n        const { data } = await axiosInstance.get(url, variables);\n\n        return {\n            data,\n        };\n    },\n    // ...\n});\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," parameter can be used in all data, form, and table hooks.")),(0,a.kt)("br",null),(0,a.kt)(c,{mdxType:"Checklist"},(0,a.kt)(k,{id:"data-provider-create-your-data-provider",mdxType:"ChecklistItem"},"I understood how to create a data provider."),(0,a.kt)(k,{id:"data-provider-create-your-data-provider-2",mdxType:"ChecklistItem"},"I have learned how to handle errors."),(0,a.kt)(k,{id:"data-provider-create-your-data-provider-3",mdxType:"ChecklistItem"},"I understood how to use the `meta` parameter.")))}h.isMDXComponent=!0}}]);