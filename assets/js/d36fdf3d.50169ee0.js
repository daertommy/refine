"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[25331],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>u});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},m=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,f=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return t?n.createElement(f,a(a({ref:r},m),{},{components:t})):n.createElement(f,a({ref:r},m))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9124:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>I,contentTitle:()=>x,default:()=>D,frontMatter:()=>F,metadata:()=>S,toc:()=>E});t(67294);var n=t(3905);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}const s={toc:[]};function l(e){var{components:r}=e,t=a(e,["components"]);return(0,n.kt)("wrapper",i(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){o(e,r,t[r])}))}return e}({},s,t),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\nimport React from "react";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Edit as MantineEdit, useForm } from "@refinedev/mantine";\nimport {\n    Input as MantineInput,\n    TextInput as MantineTextInput,\n    Textarea as MantineTextarea,\n} from "@mantine/core";\n\ninterface IPost {\n    title: string;\n    content: string;\n}\n\nconst PostEdit: React.FC = () => {\n    const { saveButtonProps, getInputProps, errors } = useForm<\n        IPost,\n        HttpError,\n        IPost\n    >({\n        initialValues: {\n            title: "",\n            content: "",\n        },\n    });\n\n    return (\n        <MantineEdit saveButtonProps={saveButtonProps}>\n            <form>\n                <MantineTextInput\n                    mt={8}\n                    label="Title"\n                    placeholder="Title"\n                    {...getInputProps("title")}\n                />\n\n                <MantineTextarea\n                    label="Content"\n                    placeholder="Content"\n                    minRows={4}\n                    maxRows={4}\n                    {...getInputProps("content")}\n                />\n            </form>\n        </MantineEdit>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    dataProvider: {\n        ...dataProvider("https://api.fake-rest.refine.dev"),\n        update: async (resource: string, params: any) => {\n            return Promise.reject({\n                message: "An error occurred while updating the record.",\n                statusCode: 400,\n                errors: {\n                    title: ["Title is required"],\n                    content: {\n                        key: "form.error.content",\n                        message: "Content is required.",\n                    },\n                },\n            });\n        },\n    },\n    resources: [\n        {\n            name: "posts",\n            edit: PostEdit,\n        },\n    ],\n});\n\nrender(<RefineMantineDemo />);\n')))}function p(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function m(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}l.isMDXComponent=!0;const d={toc:[]};function u(e){var{components:r}=e,t=c(e,["components"]);return(0,n.kt)("wrapper",m(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){p(e,r,t[r])}))}return e}({},d,t),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/edit/123 previewHeight=520px hideCode",live:!0,url:"http://localhost:3000/edit/123",previewHeight:"520px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\nimport React from "react";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Edit } from "@refinedev/mui";\nimport Box from "@mui/material/Box";\nimport TextField from "@mui/material/TextField";\nimport { useForm } from "@refinedev/react-hook-form";\n\ninterface IPost {\n    title: string;\n    content: string;\n}\n\nconst PostEdit: React.FC = () => {\n    const {\n        saveButtonProps,\n        refineCore: { queryResult },\n        register,\n        control,\n        formState: { errors },\n    } = useForm<IPost, HttpError, Nullable<IPost>>();\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Box\n                component="form"\n                sx={{ display: "flex", flexDirection: "column" }}\n                autoComplete="off"\n            >\n                <TextField\n                    id="title"\n                    {...register("title")}\n                    error={!!errors.title}\n                    helperText={errors.title?.message}\n                    margin="normal"\n                    fullWidth\n                    label="Title"\n                    name="title"\n                    autoFocus\n                />\n\n                <TextField\n                    id="content"\n                    {...register("content")}\n                    error={!!errors.content}\n                    helperText={errors.content?.message}\n                    margin="normal"\n                    label="Content"\n                    multiline\n                    rows={4}\n                />\n            </Box>\n        </Edit>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    dataProvider: {\n        ...dataProvider("https://api.fake-rest.refine.dev"),\n        update: async (resource: string, params: any) => {\n            return Promise.reject({\n                message: "An error occurred while updating the record.",\n                statusCode: 400,\n                errors: {\n                    title: ["Title is required"],\n                    content: {\n                        key: "form.error.content",\n                        message: "Content is required.",\n                    },\n                },\n            });\n        },\n    },\n    resources: [\n        {\n            name: "posts",\n            edit: PostEdit,\n        },\n    ],\n});\n\nrender(<RefineMuiDemo />);\n')))}function f(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function h(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function k(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}u.isMDXComponent=!0;const v={toc:[]};function g(e){var{components:r}=e,t=k(e,["components"]);return(0,n.kt)("wrapper",h(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){f(e,r,t[r])}))}return e}({},v,t),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\nimport React from "react";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\nimport { useForm } from "@refinedev/react-hook-form";\nimport { Edit } from "@refinedev/chakra-ui";\nimport {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n    Textarea,\n} from "@chakra-ui/react";\n\ninterface IPost {\n    title: string;\n    content: string;\n}\n\nconst PostEdit: React.FC = () => {\n    const {\n        refineCore: { formLoading, queryResult },\n        saveButtonProps,\n        register,\n        formState: { errors },\n        setValue,\n    } = useForm<IPost, HttpError, IPost>();\n\n    return (\n        <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>\n            <FormControl mb="3" isInvalid={!!errors?.title}>\n                <FormLabel>Title</FormLabel>\n                <Input id="title" type="text" {...register("title")} />\n                <FormErrorMessage>\n                    {`${errors.title?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n\n            <FormControl mb="3" isInvalid={!!errors?.content}>\n                <FormLabel>Content</FormLabel>\n                <Textarea id="content" {...register("content")} />\n                <FormErrorMessage>\n                    {`${errors.content?.message}`}\n                </FormErrorMessage>\n            </FormControl>\n        </Edit>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    dataProvider: {\n        ...dataProvider("https://api.fake-rest.refine.dev"),\n        update: async (resource: string, params: any) => {\n            return Promise.reject({\n                message: "An error occurred while updating the record.",\n                statusCode: 400,\n                errors: {\n                    title: ["Title is required"],\n                    content: {\n                        key: "form.error.content",\n                        message: "Content is required.",\n                    },\n                },\n            });\n        },\n    },\n    resources: [\n        {\n            name: "posts",\n            edit: PostEdit,\n        },\n    ],\n});\n\nrender(<RefineChakraDemo />);\n')))}function b(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function y(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function w(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}g.isMDXComponent=!0;const O={toc:[]};function P(e){var{components:r}=e,t=w(e,["components"]);return(0,n.kt)("wrapper",y(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){b(e,r,t[r])}))}return e}({},O,t),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/edit/123 previewHeight=420px hideCode",live:!0,url:"http://localhost:3000/edit/123",previewHeight:"420px",hideCode:!0},'setInitialRoutes(["/posts/edit/123"]);\n\nimport React from "react";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport React from "react";\nimport { HttpError, IResourceComponentsProps } from "@refinedev/core";\nimport { Edit, useForm } from "@refinedev/antd";\n\nimport { Form, Input } from "antd";\n\nimport { IPost, ICategory } from "../../interfaces";\n\nconst PostEdit: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm();\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} layout="vertical">\n                <Form.Item label="Title" name="title">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Content" name="content">\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    dataProvider: {\n        ...dataProvider("https://api.fake-rest.refine.dev"),\n        update: async (resource: string, params: any) => {\n            return Promise.reject({\n                message: "An error occurred while updating the record.",\n                statusCode: 400,\n                errors: {\n                    title: ["Title is required"],\n                    content: {\n                        key: "form.error.content",\n                        message: "Content is required.",\n                    },\n                },\n            });\n        },\n    },\n    resources: [\n        {\n            name: "posts",\n            edit: PostEdit,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}function N(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function C(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function j(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}P.isMDXComponent=!0;const F={id:"server-side-form-validation",title:"Server-Side Form Validation"},x=void 0,S={unversionedId:"advanced-tutorials/forms/server-side-form-validation",id:"advanced-tutorials/forms/server-side-form-validation",title:"Server-Side Form Validation",description:"Server-side form validation is a technique used to validate form data on the server before processing it. Unlike client-side validation, which is performed in the user's browser using JavaScript, server-side validation occurs on the server-side code, typically in the backend of the application.",source:"@site/docs/advanced-tutorials/forms/server-side-form-validation.md",sourceDirName:"advanced-tutorials/forms",slug:"/advanced-tutorials/forms/server-side-form-validation",permalink:"/docs/advanced-tutorials/forms/server-side-form-validation",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/advanced-tutorials/forms/server-side-form-validation.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1701071893,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{id:"server-side-form-validation",title:"Server-Side Form Validation"},sidebar:"someSidebar",previous:{title:"Custom Form Validation",permalink:"/docs/advanced-tutorials/forms/custom-form-validation"},next:{title:"Save and Continue",permalink:"/docs/advanced-tutorials/forms/save-and-continue"}},I={},E=[{value:"Why Server-Side Validation?",id:"why-server-side-validation",level:2},{value:"Server-Side Validation with <strong>refine</strong>",id:"server-side-validation-with-refine",level:2},{value:"How does it work?",id:"how-does-it-work",level:3},{value:"How to disable it?",id:"how-to-disable-it",level:3},{value:"Examples",id:"examples",level:2},{value:"with Core useForm",id:"with-core-useform",level:3},{value:"with React Hook Form",id:"with-react-hook-form",level:3},{value:"with Ant Design",id:"with-ant-design",level:3},{value:"with Mantine",id:"with-mantine",level:3},{value:"with Material UI",id:"with-material-ui",level:3},{value:"with Chakra UI",id:"with-chakra-ui",level:3}],T={toc:E};function D(e){var{components:r}=e,t=j(e,["components"]);return(0,n.kt)("wrapper",C(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},n=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),n.forEach((function(r){N(e,r,t[r])}))}return e}({},T,t),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Server-side form validation is a technique used to validate form data on the server before processing it. Unlike client-side validation, which is performed in the user's browser using JavaScript, server-side validation occurs on the server-side code, typically in the backend of the application."),(0,n.kt)("h2",{id:"why-server-side-validation"},"Why Server-Side Validation?"),(0,n.kt)("p",null,"Client-side validation offers a responsive user experience by providing immediate feedback without server round trips. However, it should not be considered a substitute for server-side validation due to its vulnerability to bypassing. Server-side form validation is essential for ensuring data integrity, security, and consistency. It acts as an additional layer that complements client-side validation, preventing malicious or incorrect data from being processed. While client-side validation is valuable, it should not be relied upon exclusively, as server-side validation provides a more robust and reliable validation mechanism."),(0,n.kt)("h2",{id:"server-side-validation-with-refine"},"Server-Side Validation with ",(0,n.kt)("strong",{parentName:"h2"},"refine")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"refine")," supports server-side validation out-of-the-box for all supported UI frameworks (Ant Design, Material UI, Mantine, Chakra UI)."),(0,n.kt)("p",null,"To handle server-side validation ",(0,n.kt)("inlineCode",{parentName:"p"},"errors"),", you need to return a rejected promise with the following shape from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { HttpError } from "@refinedev/core";\n\nconst error: HttpError = {\n    message: "An error occurred while updating the record.",\n    statusCode: 400,\n    // the errors field is required for server-side validation.\n    // when the errors field is set, useForm will automatically display the error messages in the form with the corresponding fields.\n    errors: {\n        title: ["Title is required"],\n        content: {\n            key: "form.error.content",\n            message: "Content is required.",\n        },\n        tags: true,\n    },\n};\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Refer to the ",(0,n.kt)("inlineCode",{parentName:"p"},"HttpError")," type ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},"here"),".")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"errors")," fields can be ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"string[]")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"{ key: string; message: string }")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"string")," or ",(0,n.kt)("inlineCode",{parentName:"li"},"string[]"),": If the field is an array, multiple error messages will be displayed. If the field is a string, only one error message will be displayed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"boolean"),": If the field is ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),', "This field is required." message will be displayed. If the field is ',(0,n.kt)("inlineCode",{parentName:"li"},"false"),", no error message will be displayed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"{ key: string; message: string }"),": If the field is an object, the ",(0,n.kt)("inlineCode",{parentName:"li"},"key")," field will be used as a translation key. If the ",(0,n.kt)("inlineCode",{parentName:"li"},"key")," is not found in the translation, the ",(0,n.kt)("inlineCode",{parentName:"li"},"message")," field will be displayed.")),(0,n.kt)("h3",{id:"how-does-it-work"},"How does it work?"),(0,n.kt)("p",null,"When the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns a rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook will assign ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," to the respective form fields."),(0,n.kt)("h3",{id:"how-to-disable-it"},"How to disable it?"),(0,n.kt)("p",null,"To disable server-side validation, you have two options:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"disable it globally from the ",(0,n.kt)("a",{parentName:"li",href:"/docs/api-reference/core/components/refine-config/#disableserversidevalidation"},(0,n.kt)("strong",{parentName:"a"},"refine")," options."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            // ...\n            // highlight-start\n            options={{\n                disableServerSideValidation: true,\n            }}\n            // highlight-end\n        >\n            // ...\n        </Refine>\n    );\n};\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"disable it for a specific form from the ",(0,n.kt)("inlineCode",{parentName:"li"},"useForm")," hook.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/mantine";\nOR;\nimport { useForm } from "@refinedev/react-hook-form";\nOR;\nimport { useForm } from "@refinedev/antd";\n\nuseForm({\n    // highlight-start\n    disableServerSideValidation: true,\n    // highlight-end\n});\n')),(0,n.kt)("h2",{id:"examples"},"Examples"),(0,n.kt)("p",null,"In the following examples, we will use this mock ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," to demonstrate how to handle server-side validation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { HttpError, Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nconst App = () => {\n    return (\n        // ---\n        <Refine\n            // ---\n            dataProvider={{\n                ...dataProvider("https://api.fake-rest.refine.dev"),\n                // highlight-start\n                // this is demonstration of how you can handle errors from API\n                update: async () => {\n                    const error: HttpError = {\n                        message: "An error occurred while updating the record.",\n                        statusCode: 400,\n                        errors: {\n                            title: ["Title is required."],\n                            "category.id": ["Category is required."],\n                            status: ["Status is required."],\n                            content: {\n                                key: "form.error.content",\n                                message: "Content is required.",\n                            },\n                            tags: ["Tags is required."],\n                        },\n                    };\n\n                    return Promise.reject(error);\n                },\n                create: async () => {\n                    // this is demonstration of how you can handle errors from API\n                    const error: HttpError = {\n                        message: "An error occurred while creating the record.",\n                        statusCode: 400,\n                        errors: {\n                            title: ["Title is required."],\n                            "category.id": ["Category is required."],\n                            status: ["Status is required."],\n                            content: {\n                                key: "form.error.content",\n                                message: "Content is required.",\n                            },\n                            tags: ["Tags is required."],\n                        },\n                    };\n                    return Promise.reject(error);\n                },\n                // highlight-end\n            }}\n            // ---\n        >\n            // ---\n        </Refine>\n    );\n};\n')),(0,n.kt)("h3",{id:"with-core-useform"},"with Core useForm"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm/"},"here"),".")),(0,n.kt)("p",null,"Due to the fact that ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," hook is framework agnostic, you need to render the ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," manually."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," hook will return ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," state, which is an object with the following shape:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { useForm } from "@refinedev/core";\n\nconst form = useForm({\n    // ...\n});\n\n// you can access the errors state from the useForm hook\nconsole.log(form.mutationResult.error?.errors);\n')),(0,n.kt)("h3",{id:"with-react-hook-form"},"with React Hook Form"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},"here"),".")),(0,n.kt)("p",null,"Due to the fact that ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," hook is framework agnostic, you need to render the ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," manually."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," hook will return ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," state, which is an object with the following shape:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'import { useForm } from "@refinedev/core";\n\nconst form = useForm({\n    // ...\n});\n\n// you can access the errors state from the useForm hook\nconsole.log(form.formState.errors);\n')),(0,n.kt)("h3",{id:"with-ant-design"},"with Ant Design"),(0,n.kt)(P,{mdxType:"AntdLivePreview"}),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/"},"here"),".")),(0,n.kt)("p",null,"For this example, we mock data provider to return rejected promise with ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," field.\nYou can see full example ",(0,n.kt)("a",{parentName:"p",href:"/docs/examples/form/antd/serverSideFormValidation/"},"here")),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," automatically set the ",(0,n.kt)("inlineCode",{parentName:"p"},"form.errors")," state with the error messages returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,n.kt)("p",null,"You can pass ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#formprops"},(0,n.kt)("inlineCode",{parentName:"a"},"formProps"))," to the ",(0,n.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,n.kt)("inlineCode",{parentName:"a"},"<Form>"))," component to display the error messages. ",(0,n.kt)("inlineCode",{parentName:"p"},"<Form>")," component will automatically display the error messages for the corresponding fields."),(0,n.kt)("p",null,"Here is an code of how you can display the error messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/antd";\nimport { Form } from "antd";\n\nconst Page = () => {\n    const { formProps } = useForm();\n\n    // ...\n\n    return (\n        // ...\n        <Form {...formProps}>\n            <Form.Item label="Title" name="title">\n                <Input />\n            </Form.Item>\n        </Form>\n    );\n};\n')),(0,n.kt)("h3",{id:"with-mantine"},"with Mantine"),(0,n.kt)(l,{mdxType:"MantineLivePreview"}),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/hooks/form/useForm/"},"here"),".")),(0,n.kt)("p",null,"For this example, we mock data provider to return rejected promise with ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," field.\nYou can see full example ",(0,n.kt)("a",{parentName:"p",href:"/docs/examples/form/mantine/serverSideFormValidation/"},"here")),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/mantine/hooks/form/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," automatically set the ",(0,n.kt)("inlineCode",{parentName:"p"},"form.errors")," state with the error messages returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,n.kt)("p",null,"You can pass ",(0,n.kt)("a",{parentName:"p",href:"https://mantine.dev/form/use-form/#getinputprops"},(0,n.kt)("inlineCode",{parentName:"a"},"getInputProps(<field-name>)"))," to the input component to display the error messages."),(0,n.kt)("p",null,"Here is an code of how you can display the error messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useForm } from "@refinedev/mantine";\nimport { TextInput } from "@mantine/core";\n\nconst Page = () => {\n    const { errors, getInputProps } = useForm();\n\n    // ...\n\n    return (\n        // ...\n        <TextInput\n            id="title"\n            label="Title"\n            placeholder="Title"\n            {...getInputProps("title")}\n        />\n    );\n};\n')),(0,n.kt)("h3",{id:"with-material-ui"},"with Material UI"),(0,n.kt)(u,{mdxType:"MaterialUILivePreview"}),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},"here"),".")),(0,n.kt)("p",null,"For this example, we mock data provider to return rejected promise with ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," field.\nYou can see full example ",(0,n.kt)("a",{parentName:"p",href:"/docs/examples/form/mui/serverSideFormValidation/"},"here")),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," automatically set the ",(0,n.kt)("inlineCode",{parentName:"p"},"formState.errors")," state with the error messages returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider"),". You can pass ",(0,n.kt)("a",{parentName:"p",href:"https://react-hook-form.com/docs/useform/formstate"},(0,n.kt)("inlineCode",{parentName:"a"},"formState.errors.status.message"))," to the input component to display the error messages."),(0,n.kt)("p",null,"Here is an code of how you can display the error messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import TextField from "@mui/material/TextField";\nimport { useForm } from "@refinedev/react-hook-form";\n\nconst Page = () => {\n    const {\n        register,\n        formState: { errors },\n    } = useForm();\n\n    // ...\n\n    return (\n        // ...\n        <TextField\n            {...register("title")}\n            error={!!errors.status}\n            helperText={errors.status?.message}\n        />\n    );\n};\n')),(0,n.kt)("h3",{id:"with-chakra-ui"},"with Chakra UI"),(0,n.kt)(g,{mdxType:"ChakraUILivePreview"}),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"You can find more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"useForm")," hook ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},"here"),".")),(0,n.kt)("p",null,"For this example, we mock data provider to return rejected promise with ",(0,n.kt)("inlineCode",{parentName:"p"},"errors")," field.\nYou can see full example ",(0,n.kt)("a",{parentName:"p",href:"/docs/examples/form/chakra-ui/serverSideFormValidation/"},"here")),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," returns rejected promise with ",(0,n.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences/#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"errors"))," field, ",(0,n.kt)("a",{parentName:"p",href:"/docs/packages/documentation/react-hook-form/useForm/"},(0,n.kt)("inlineCode",{parentName:"a"},"useForm"))," automatically set the ",(0,n.kt)("inlineCode",{parentName:"p"},"formState.errors")," state with the error messages returned from the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider"),". You can pass ",(0,n.kt)("a",{parentName:"p",href:"https://react-hook-form.com/docs/useform/formstate"},(0,n.kt)("inlineCode",{parentName:"a"},"formState.errors.status.message"))," to the input component to display the error messages."),(0,n.kt)("p",null,"Here is an code of how you can display the error messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    FormControl,\n    FormErrorMessage,\n    FormLabel,\n    Input,\n} from "@chakra-ui/react";\nimport { useForm } from "@refinedev/react-hook-form";\n\nconst Page = () => {\n    const {\n        register,\n        formState: { errors },\n    } = useForm();\n\n    // ...\n\n    return (\n        // ...\n        <FormControl isInvalid={!!errors?.title}>\n            <FormLabel>Title</FormLabel>\n            <Input id="title" type="text" {...register("title")} />\n            <FormErrorMessage>{`${errors.title?.message}`}</FormErrorMessage>\n        </FormControl>\n    );\n};\n')))}D.isMDXComponent=!0}}]);