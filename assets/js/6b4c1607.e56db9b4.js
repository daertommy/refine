"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[29621],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return t?o.createElement(h,i(i({ref:n},d),{},{components:t})):o.createElement(h,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=c;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},33419:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>u});t(67294);var o=t(3905);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const s={id:"show",title:"Show",swizzle:!0},p=void 0,l={unversionedId:"api-reference/mui/components/basic-views/show",id:"api-reference/mui/components/basic-views/show",title:"Show",description:"`` provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page.",source:"@site/docs/api-reference/mui/components/basic-views/show.md",sourceDirName:"api-reference/mui/components/basic-views",slug:"/api-reference/mui/components/basic-views/show",permalink:"/docs/api-reference/mui/components/basic-views/show",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/mui/components/basic-views/show.md",tags:[],version:"current",lastUpdatedBy:"Necati \xd6zmen",lastUpdatedAt:1694427741,formattedLastUpdatedAt:"Sep 11, 2023",frontMatter:{id:"show",title:"Show",swizzle:!0},sidebar:"someSidebar",previous:{title:"List",permalink:"/docs/api-reference/mui/components/basic-views/list"},next:{title:"Breadcrumb",permalink:"/docs/api-reference/mui/components/mui-breadcrumb"}},d={},u=[{value:"Properties",id:"properties",level:2},{value:"<code>title</code>",id:"title",level:3},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>canDelete</code> and <code>canEdit</code>",id:"candelete-and-canedit",level:3},{value:"<code>recordItemId</code>",id:"recorditemid",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>goBack</code>",id:"goback",level:3},{value:"<code>isLoading</code>",id:"isloading",level:3},{value:"<code>breadcrumb</code>",id:"breadcrumb",level:3},{value:"<code>wrapperProps</code>",id:"wrapperprops",level:3},{value:"<code>headerProps</code>",id:"headerprops",level:3},{value:"<code>contentProps</code>",id:"contentprops",level:3},{value:"<code>headerButtons</code>",id:"headerbuttons",level:3},{value:"<code>headerButtonProps</code>",id:"headerbuttonprops",level:3},{value:"<code>footerButtons</code>",id:"footerbuttons",level:3},{value:"<code>footerButtonProps</code>",id:"footerbuttonprops",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3}],c=(m="PropsTable",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var m;const h={toc:u};function f(e){var{components:n}=e,t=i(e,["components"]);return(0,o.kt)("wrapper",a(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(n){r(e,n,t[n])}))}return e}({},h,t),{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," provides us a layout for displaying the page. It does not contain any logic and just adds extra functionalities like a refresh button or giving title to the page."),(0,o.kt)("p",null,"We will show what ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," does using properties with examples."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts/show/123",live:!0,hideCode:!0,url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport React from "react";\nimport { useShow, useOne } from "@refinedev/core";\nimport {\n    Show,\n    NumberField,\n    TextFieldComponent as TextField,\n    MarkdownField,\n    DateField,\n} from "@refinedev/mui";\nimport { Stack, Typography } from "@mui/material";\n\nconst SampleShow = () => {\n    const { queryResult } = useShow();\n    const { data, isLoading } = queryResult;\n\n    const record = data?.data;\n\n    const { data: categoryData, isLoading: categoryIsLoading } = useOne({\n        resource: "categories",\n        id: record?.category?.id || "",\n        queryOptions: {\n            enabled: !!record,\n        },\n    });\n\n    return (\n        <Show isLoading={isLoading}>\n            <Stack gap={1}>\n                <Typography variant="body1" fontWeight="bold">\n                    Id\n                </Typography>\n                <NumberField value={record?.id ?? ""} />\n                <Typography variant="body1" fontWeight="bold">\n                    Title\n                </Typography>\n                <TextField value={record?.title} />\n                <Typography variant="body1" fontWeight="bold">\n                    Content\n                </Typography>\n                <MarkdownField value={record?.content} />\n                <Typography variant="body1" fontWeight="bold">\n                    Category\n                </Typography>\n                {categoryIsLoading ? (\n                    <>Loading...</>\n                ) : (\n                    <>{categoryData?.data?.title}</>\n                )}\n                <Typography variant="body1" fontWeight="bold">\n                    Created At\n                </Typography>\n                <DateField value={record?.createdAt} />\n            </Stack>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/samples/show/123"]}\n        resources={[{ name: "samples", show: SampleShow, list: SampleList }]}\n    />,\n);\n')),(0,o.kt)("admonition",{title:"Swizzle",type:"info-tip"},(0,o.kt)("p",{parentName:"admonition"},"You can swizzle this component with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/packages/documentation/cli"},(0,o.kt)("strong",{parentName:"a"},"refine CLI"))," to customize it.")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"title"},(0,o.kt)("inlineCode",{parentName:"h3"},"title")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"title")," allows the addition of titles inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>"),' component. if you don\'t pass title props it uses the "Show" prefix and the singular resource name by default. For example, for the "posts" resource, it would be "Show post".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/create",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/create"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Typography } from "@mui/material";\n\nconst ShowPage: React.FC = () => {\n    return (\n        <Show\n            // highlight-next-line\n            title={<Typography variant="h5">Custom Title</Typography>}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId="123" />\n                    </div>\n                ),\n                show: ShowPage,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"resource"},(0,o.kt)("inlineCode",{parentName:"h3"},"resource")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," information from the route by default. If you want to use a custom resource for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},'// handle initial routes in new way\nsetInitialRoutes(["/custom"]);\n\nimport { Refine } from "@refinedev/core";\nimport { Layout } from "@refinedev/mui";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Show resource="posts" recordItemId={123}>\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\nconst App: React.FC = () => {\n    return (\n        <Refine\n            legacyRouterProvider={{\n                ...routerProvider,\n                // highlight-start\n                routes: [\n                    {\n                        element: <CustomPage />,\n                        path: "/custom",\n                    },\n                ],\n                // highlight-end\n            }}\n            Layout={Layout}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,o.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#identifier"},(0,o.kt)("inlineCode",{parentName:"a"},"identifier")," of the ",(0,o.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,o.kt)("h3",{id:"candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"h3"},"canDelete")," and ",(0,o.kt)("inlineCode",{parentName:"h3"},"canEdit")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"canEdit")," allows us to add the delete and edit buttons inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component. If the resource has ",(0,o.kt)("inlineCode",{parentName:"p"},"canDelete")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"canEdit")," property refine adds the buttons by default."),(0,o.kt)("p",null,"When clicked on, delete button executes the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useDelete/"},(0,o.kt)("inlineCode",{parentName:"a"},"useDelete"))," method provided by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider"},(0,o.kt)("inlineCode",{parentName:"a"},"dataProvider"))," and the edit button redirects the user to the record edit page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'const { default: simpleRest } = RefineSimpleRest;\n\nconst dataProvider = simpleRest("https://api.fake-rest.refine.dev");\n\nconst customDataProvider = {\n    ...dataProvider,\n    deleteOne: async ({ resource, id, variables }) => {\n        return {\n            data: {},\n        };\n    },\n};\n\nconst authProvider = {\n    login: async () => {\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    register: async () => {\n        return {\n            success: true,\n        };\n    },\n    forgotPassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    updatePassword: async () => {\n        return {\n            success: true,\n        };\n    },\n    logout: async () => {\n        return {\n            success: true,\n            redirectTo: "/",\n        };\n    },\n    check: async () => ({\n        authenticated: true,\n    }),\n    onError: async (error) => {\n        console.error(error);\n        return { error };\n    },\n    getPermissions: async () => ["admin"],\n    getIdentity: async () => null,\n};\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { usePermissions } from "@refinedev/core";\n\nconst PostShow: React.FC = () => {\n    const { data: permissionsData } = usePermissions();\n    return (\n        <Show\n            /* highlight-start */\n            canDelete={permissionsData?.includes("admin")}\n            canEdit={\n                permissionsData?.includes("editor") ||\n                permissionsData?.includes("admin")\n            }\n            /* highlight-end */\n        >\n            <p>Rest of your page here</p>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        authProvider={authProvider}\n        dataProvider={customDataProvider}\n        initialRoutes={["/posts/show/123"]}\n        Layout={RefineMui.Layout}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId="123" />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"),"  ","\u2192"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>"),"  ","\u2192")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/authentication/usePermissions"},(0,o.kt)("inlineCode",{parentName:"a"},"usePermission")," ","\u2192")," documentations.")),(0,o.kt)("h3",{id:"recorditemid"},(0,o.kt)("inlineCode",{parentName:"h3"},"recordItemId")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component reads the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information from the route by default. ",(0,o.kt)("inlineCode",{parentName:"p"},"recordItemId")," is used when it cannot read from the URL (when used on a custom page, modal or drawer)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/custom",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/custom"},'// handle initial routes in new way\nsetInitialRoutes(["/custom"]);\n\nimport { Refine } from "@refinedev/core";\nimport { Layout } from "@refinedev/mui";\nimport routerProvider from "@refinedev/react-router-v6/legacy";\nimport dataProvider from "@refinedev/simple-rest";\n// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst CustomPage: React.FC = () => {\n    return (\n        /* highlight-next-line */\n        <Show resource="posts" recordItemId={123}>\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nconst App: React.FC = () => {\n    return (\n        <Refine\n            legacyRouterProvider={{\n                ...routerProvider,\n                routes: [\n                    {\n                        element: <CustomPage />,\n                        path: "/custom",\n                    },\n                ],\n            }}\n            Layout={Layout}\n            dataProvider={dataProvider("https://api.fake-rest.refine.dev")}\n            resources={[{ name: "posts" }]}\n        />\n    );\n};\n\nrender(\n    <Wrapper>\n        <App />\n    </Wrapper>,\n);\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information for ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/refresh-button"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," to work properly.")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," information for work properly, so if you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show>")," component in custom pages, you should pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"recordItemId")," property.")),(0,o.kt)("h3",{id:"dataprovidername"},(0,o.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,o.kt)("p",null,"If not specified, ",(0,o.kt)("strong",{parentName:"p"},"refine")," will use the default data provider. If you have multiple data providers and want to use a different one, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"dataProviderName")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { Show } from "@refinedev/mui";\n\n// highlight-start\nconst PostShow = () => {\n    return <Show dataProviderName="other">...</Show>;\n};\n// highlight-end\n\nexport const App: React.FC = () => {\n    return (\n        <Refine\n            // highlight-start\n            dataProvider={{\n                default: dataProvider("https://api.fake-rest.refine.dev/"),\n                other: dataProvider("https://other-api.fake-rest.refine.dev/"),\n            }}\n            // highlight-end\n        >\n            {/* ... */}\n        </Refine>\n    );\n};\n')),(0,o.kt)("h3",{id:"goback"},(0,o.kt)("inlineCode",{parentName:"h3"},"goBack")),(0,o.kt)("p",null,"To customize the back button or to disable it, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"goBack")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'import { useNavigation } from "@refinedev/core";\n\nconst RealBackButton = () => {\n    const { goBack } = useNavigation();\n\n    return <Button onClick={goBack}>BACK!</Button>;\n};\n\nconst RealPostShow: React.FC = () => {\n    return (\n        <Show\n            // highlight-next-line\n            goBack={<RealBackButton />}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n\n\n// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\nimport { useBack } from "@refinedev/core";\n\nconst BackButton = () => {\n    const goBack = useBack();\n\n    return <Button onClick={goBack}>BACK!</Button>;\n};\n\nconst PostShow: React.FC = () => {\n    return (\n        <Show\n            // highlight-next-line\n            goBack={<BackButton />}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: RealPostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"isloading"},(0,o.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,o.kt)("p",null,"To toggle the loading state of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-next-line\n            isLoading={loading}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"breadcrumb"},(0,o.kt)("inlineCode",{parentName:"h3"},"breadcrumb")),(0,o.kt)("p",null,"To customize or disable the breadcrumb, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"breadcrumb")," property. By default it uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"Breadcrumb")," component from ",(0,o.kt)("inlineCode",{parentName:"p"},"@refinedev/mui")," package."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This feature can be managed globally via the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Refine>")," component's ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#breadcrumb"},"options"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show, Breadcrumb } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n    return (\n        <Show\n            // highlight-start\n            breadcrumb={\n                <div\n                    style={{\n                        padding: "3px 6px",\n                        border: "2px dashed cornflowerblue",\n                    }}\n                >\n                    <Breadcrumb />\n                </div>\n            }\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/mui-breadcrumb"},(0,o.kt)("inlineCode",{parentName:"a"},"Breadcrumb")," documentation ","\u2192"))),(0,o.kt)("h3",{id:"wrapperprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"wrapperProps")),(0,o.kt)("p",null,"If you want to customize the wrapper of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"wrapperProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            wrapperProps={{\n                sx: {\n                    backgroundColor: "lightsteelblue",\n                },\n            }}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card/"},(0,o.kt)("inlineCode",{parentName:"a"},"Card")," documentation from Material UI ","\u2192"))),(0,o.kt)("h3",{id:"headerprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerProps")),(0,o.kt)("p",null,"If you want to customize the header of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            headerProps={{\n                sx: {\n                    backgroundColor: "lightsteelblue",\n                },\n            }}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-header/"},(0,o.kt)("inlineCode",{parentName:"a"},"CardHeader")," documentation from Material UI ","\u2192"))),(0,o.kt)("h3",{id:"contentprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"contentProps")),(0,o.kt)("p",null,"If you want to customize the content of the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"contentProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            contentProps={{\n                sx: {\n                    backgroundColor: "lightsteelblue",\n                },\n            }}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-content/"},(0,o.kt)("inlineCode",{parentName:"a"},"CardContent")," documentation from Material UI ","\u2192"))),(0,o.kt)("h3",{id:"headerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtons")),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Show/>")," component has a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and, ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/refresh-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," at the header."),(0,o.kt)("p",null,"You can customize the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons, deleteButtonProps, editButtonProps, listButtonProps, refreshButtonProps }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},'If "list" resource is not defined, the ',(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"listButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"a"},"canDelete"))," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("a",{parentName:"p",href:"#candelete-and-canedit"},(0,o.kt)("inlineCode",{parentName:"a"},"canEdit"))," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>"))," will not render and ",(0,o.kt)("inlineCode",{parentName:"p"},"editButtonProps")," will be ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            headerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("p",null,"Or, instead of using the ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultButtons"),", you can create your own buttons. If you want, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"createButtonProps")," to utilize the default values of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/list-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<ListButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/edit-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<EditButton>")),", ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/delete-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<DeleteButton>")),", and, ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/mui/components/buttons/refresh-button/"},(0,o.kt)("inlineCode",{parentName:"a"},"<RefreshButton>"))," components."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport {\n    Show,\n    ListButton,\n    EditButton,\n    DeleteButton,\n    RefreshButton,\n} from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            headerButtons={({\n                deleteButtonProps,\n                editButtonProps,\n                listButtonProps,\n                refreshButtonProps,\n            }) => (\n                <>\n                    <Button type="primary">Custom Button</Button>\n                    {listButtonProps && (\n                        <ListButton\n                            {...listButtonProps}\n                            meta={{ foo: "bar" }}\n                        />\n                    )}\n                    {editButtonProps && (\n                        <EditButton\n                            {...editButtonProps}\n                            meta={{ foo: "bar" }}\n                        />\n                    )}\n                    {deleteButtonProps && (\n                        <DeleteButton\n                            {...deleteButtonProps}\n                            meta={{ foo: "bar" }}\n                        />\n                    )}\n                    <RefreshButton\n                        {...refreshButtonProps}\n                        meta={{ foo: "bar" }}\n                    />\n                </>\n            )}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"headerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"headerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the header by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"headerButtonProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            headerButtonProps={{\n                sx: {\n                    backgroundColor: "lightsteelblue",\n                },\n            }}\n            // highlight-end\n            headerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/box/"},(0,o.kt)("inlineCode",{parentName:"a"},"Box")," documentation from Material UI ","\u2192"))),(0,o.kt)("h3",{id:"footerbuttons"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtons")),(0,o.kt)("p",null,"You can customize the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtons")," property. It accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"React.ReactNode")," or a render function ",(0,o.kt)("inlineCode",{parentName:"p"},"({ defaultButtons }) => React.ReactNode")," which you can use to keep the existing buttons and add your own."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            footerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n            // highlight-end\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("h3",{id:"footerbuttonprops"},(0,o.kt)("inlineCode",{parentName:"h3"},"footerButtonProps")),(0,o.kt)("p",null,"You can customize the wrapper element of the buttons at the footer by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"footerButtonProps")," property."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live disableScroll previewHeight=280px url=http://localhost:3000/posts/show/123",live:!0,disableScroll:!0,previewHeight:"280px",url:"http://localhost:3000/posts/show/123"},'// visible-block-start\nimport { Show } from "@refinedev/mui";\nimport { Button } from "@mui/material";\n\nconst PostShow: React.FC = () => {\n    const [loading, setLoading] = React.useState(true);\n\n    return (\n        <Show\n            // highlight-start\n            footerButtonProps={{\n                sx: {\n                    backgroundColor: "lightsteelblue",\n                },\n            }}\n            // highlight-end\n            footerButtons={({ defaultButtons }) => (\n                <>\n                    {defaultButtons}\n                    <Button type="primary">Custom Button</Button>\n                </>\n            )}\n        >\n            <span>Rest of your page here</span>\n        </Show>\n    );\n};\n// visible-block-end\n\nrender(\n    <RefineMuiDemo\n        initialRoutes={["/posts", "/posts/show/123"]}\n        resources={[\n            {\n                name: "posts",\n                list: () => (\n                    <div>\n                        <p>This page is empty.</p>\n                        <RefineMui.ShowButton recordItemId={123} />\n                    </div>\n                ),\n                show: PostShow,\n            },\n        ]}\n    />,\n);\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://mui.com/material-ui/api/card-actions/"},(0,o.kt)("inlineCode",{parentName:"a"},"CardActions")," documentation from Material UI ","\u2192"))),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("h3",{id:"properties-1"},"Properties"),(0,o.kt)(c,{module:"@refinedev/mui/Show","wrapperProps-type":"[`CardProps`](https://mui.com/material-ui/api/card/#props)","contentProps-type":"[`CardContentProps`](https://mui.com/material-ui/api/card-content/#props)","headerProps-type":"[`CardHeaderProps`](https://mui.com/material-ui/api/card-header/#props)","headerButtonProps-type":"[`BoxProps`](https://mui.com/material-ui/api/box/#props)","headerButtons-default":"[`ListButton`](https://refine.dev/docs/api-reference/mui/components/buttons/list-button/), [`EditButton`](https://refine.dev/docs/api-reference/mui/components/buttons/edit-button/), [`DeleteButton`](https://refine.dev/docs/api-reference/mui/components/buttons/delete-button/), [`RefreshButton`](https://refine.dev/docs/api-reference/mui/components/buttons/refresh-button/)","footerButtonProps-type":"[`CardActionsProps`](https://mui.com/material-ui/api/card-actions/#props)","breadcrumb-default":"[`<Breadcrumb/>`](/docs/api-reference/mui/components/mui-breadcrumb/)","goBack-default":"`<ArrowLeft />`","goBack-type":"`ReactNode`",mdxType:"PropsTable"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live shared",live:!0,shared:!0},'const SampleList = () => {\n    const { dataGridProps } = RefineMui.useDataGrid();\n\n    const { data: categoryData, isLoading: categoryIsLoading } =\n        RefineCore.useMany({\n            resource: "categories",\n            ids:\n                dataGridProps?.rows?.map((item: any) => item?.category?.id) ??\n                [],\n            queryOptions: {\n                enabled: !!dataGridProps?.rows,\n            },\n        });\n\n    const columns = React.useMemo<GridColDef<any>[]>(\n        () => [\n            {\n                field: "id",\n                headerName: "Id",\n                type: "number",\n                minWidth: 50,\n            },\n            {\n                field: "title",\n                headerName: "Title",\n                minWidth: 200,\n            },\n            {\n                field: "category",\n                headerName: "Category",\n                valueGetter: ({ row }) => {\n                    const value = row?.category?.id;\n\n                    return value;\n                },\n                minWidth: 300,\n                renderCell: function render({ value }) {\n                    return categoryIsLoading ? (\n                        <>Loading...</>\n                    ) : (\n                        categoryData?.data?.find((item) => item.id === value)\n                            ?.title\n                    );\n                },\n            },\n            {\n                field: "createdAt",\n                headerName: "Created At",\n                minWidth: 250,\n                renderCell: function render({ value }) {\n                    return <RefineMui.DateField value={value} />;\n                },\n            },\n            {\n                field: "actions",\n                headerName: "Actions",\n                renderCell: function render({ row }) {\n                    return (\n                        <>\n                            <RefineMui.ShowButton\n                                hideText\n                                recordItemId={row.id}\n                            />\n                        </>\n                    );\n                },\n                align: "center",\n                headerAlign: "center",\n                minWidth: 80,\n            },\n        ],\n        [categoryData?.data],\n    );\n\n    return (\n        <RefineMui.List>\n            <MuiXDataGrid.DataGrid\n                {...dataGridProps}\n                columns={columns}\n                autoHeight\n            />\n        </RefineMui.List>\n    );\n};\n\nconst Wrapper = ({ children }) => {\n    return (\n        <MuiMaterial.ThemeProvider theme={RefineMui.LightTheme}>\n            <MuiMaterial.CssBaseline />\n            <MuiMaterial.GlobalStyles\n                styles={{ html: { WebkitFontSmoothing: "auto" } }}\n            />\n            {children}\n        </MuiMaterial.ThemeProvider>\n    );\n};\n')))}f.isMDXComponent=!0}}]);