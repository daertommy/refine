"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9216],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,k=u["".concat(d,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(k,l(l({ref:t},s),{},{components:n})):a.createElement(k,l({ref:t},s))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>m});n(67294);var a=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={id:"useModalForm",title:"useModalForm",sidebar_label:"useModalForm"},d=void 0,p={unversionedId:"api-reference/antd/hooks/form/useModalForm",id:"api-reference/antd/hooks/form/useModalForm",title:"useModalForm",description:"The useModalForm hook allows you to manage a form within a `. It returns Ant Design ` and Modal components props.",source:"@site/docs/api-reference/antd/hooks/form/useModalForm.md",sourceDirName:"api-reference/antd/hooks/form",slug:"/api-reference/antd/hooks/form/useModalForm",permalink:"/docs/api-reference/antd/hooks/form/useModalForm",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/form/useModalForm.md",tags:[],version:"current",lastUpdatedBy:"Batuhan Wilhelm",lastUpdatedAt:1700501932,formattedLastUpdatedAt:"Nov 20, 2023",frontMatter:{id:"useModalForm",title:"useModalForm",sidebar_label:"useModalForm"},sidebar:"someSidebar",previous:{title:"useForm",permalink:"/docs/api-reference/antd/hooks/form/useForm"},next:{title:"useStepsForm",permalink:"/docs/api-reference/antd/hooks/form/useStepsForm"}},s={},m=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>defaultFormValues</code>",id:"defaultformvalues",level:3},{value:"<code>defaultVisible</code>",id:"defaultvisible",level:3},{value:"<code>autoSubmitClose</code>",id:"autosubmitclose",level:3},{value:"<code>autoResetForm</code>",id:"autoresetform",level:3},{value:"<code>warnWhenUnsavedChanges</code>",id:"warnwhenunsavedchanges",level:3},{value:"<code>overtimeOptions</code>",id:"overtimeoptions",level:3},{value:"<code>autoSave</code>",id:"autosave",level:3},{value:"<code>enabled</code>",id:"enabled",level:4},{value:"<code>debounce</code>",id:"debounce",level:4},{value:"<code>onFinish</code>",id:"onfinish",level:4},{value:"<code>invalidateOnUnmount</code>",id:"invalidateonunmount",level:4},{value:"<code>invalidateOnClose</code>",id:"invalidateonclose",level:4},{value:"Return Values",id:"return-values",level:2},{value:"<code>formProps</code>",id:"formprops",level:3},{value:"<code>modalProps</code>",id:"modalprops",level:3},{value:"<code>title</code>",id:"title",level:4},{value:"<code>okText</code>",id:"oktext",level:4},{value:"<code>cancelText</code>",id:"canceltext",level:4},{value:"<code>width</code>",id:"width",level:4},{value:"<code>forceRender</code>",id:"forcerender",level:4},{value:"<code>okButtonProps</code>",id:"okbuttonprops",level:4},{value:"<code>onOk</code>",id:"onok",level:4},{value:"<code>onCancel</code>",id:"oncancel",level:4},{value:"<del><code>visible</code></del> <PropTag deprecated />",id:"visible-",level:4},{value:"<code>open</code>",id:"open",level:3},{value:"<code>close</code>",id:"close",level:3},{value:"<code>submit</code>",id:"submit",level:3},{value:"<code>show</code>",id:"show",level:3},{value:"<code>overtime</code>",id:"overtime",level:3},{value:"<code>autoSaveProps</code>",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Example",id:"example",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("Tabs"),k=u("TabItem"),h=u("PropTag"),f=u("PropsTable"),N=u("CodeSandboxExample"),b={toc:m};function g(e){var{components:t}=e,n=l(e,["components"]);return(0,a.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},b,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook allows you to manage a form within a ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Modal>")),". It returns Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},"Modal")," components props."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/antd"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook.")),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"We'll show three examples, ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,a.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,a.kt)(k,{value:"create",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to create a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\n\nimport React from "react";\n\nimport { List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Table } from "antd";\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    // highlight-start\n    const {\n        modalProps: createModalProps,\n        formProps: createFormProps,\n        show: createModalShow,\n    } = useModalForm<IPost>({\n        action: "create",\n    });\n    // highlight-end\n\n    return (\n        <>\n            <List\n                // createButtonProps allows us to create and manage a button above the table.\n                // This code block makes <Modal> appear when you click the button.\n                createButtonProps={{\n                    // highlight-start\n                    onClick: () => {\n                        createModalShow();\n                    },\n                    // highlight-end\n                }}\n            >\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" />\n                    <Table.Column dataIndex="title" title="Title" />\n                    <Table.Column dataIndex="status" title="Status" />\n                </Table>\n            </List>\n            {/* highlight-start */}\n            <Modal {...createModalProps}>\n                <Form {...createFormProps} layout="vertical">\n                    <Form.Item\n                        label="Title"\n                        name="title"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label="Status"\n                        name="status"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Select\n                            options={[\n                                {\n                                    label: "Published",\n                                    value: "published",\n                                },\n                                {\n                                    label: "Draft",\n                                    value: "draft",\n                                },\n                                {\n                                    label: "Rejected",\n                                    value: "rejected",\n                                },\n                            ]}\n                        />\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {/* highlight-end */}\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,a.kt)(k,{value:"edit",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's learn how to add editing capabilities to records that will be opening form in Modal by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\nimport React from "react";\n\nimport { EditButton, List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Space, Table } from "antd";\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    // highlight-start\n    const {\n        modalProps: editModalProps,\n        formProps: editFormProps,\n        show: editModalShow,\n    } = useModalForm<IPost>({\n        action: "edit",\n        warnWhenUnsavedChanges: true,\n    });\n    // highlight-end\n\n    return (\n        <>\n            <List>\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" />\n                    <Table.Column dataIndex="title" title="Title" />\n                    <Table.Column dataIndex="status" title="Status" />\n                    <Table.Column<IPost>\n                        title="Actions"\n                        dataIndex="actions"\n                        key="actions"\n                        render={(_, record) => (\n                            <Space>\n                                {/* highlight-start */}\n                                <EditButton\n                                    hideText\n                                    size="small"\n                                    recordItemId={record.id}\n                                    onClick={() => editModalShow(record.id)}\n                                />\n                                {/* highlight-end */}\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </List>\n            {/* highlight-start */}\n            <Modal {...editModalProps}>\n                <Form {...editFormProps} layout="vertical">\n                    <Form.Item\n                        label="Title"\n                        name="title"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label="Status"\n                        name="status"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Select\n                            options={[\n                                {\n                                    label: "Published",\n                                    value: "published",\n                                },\n                                {\n                                    label: "Draft",\n                                    value: "draft",\n                                },\n                                {\n                                    label: "Rejected",\n                                    value: "rejected",\n                                },\n                            ]}\n                        />\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {/* highlight-end */}\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens the edit form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n    title="Actions"\n    dataIndex="actions"\n    key="actions"\n    render={(_value, record) => <EditButton onClick={() => show(record.id)} />}\n/>\n'))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,a.kt)(k,{value:"clone",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's learn how to add cloning capabilities to records that will be opening form in Modal by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\nimport React from "react";\n\nimport { CloneButton, List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Space, Table } from "antd";\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost>();\n\n    // highlight-start\n    const {\n        modalProps: cloneModalProps,\n        formProps: cloneFormProps,\n        show: cloneModalShow,\n    } = useModalForm<IPost>({\n        action: "clone",\n    });\n    // highlight-end\n\n    return (\n        <>\n            <List>\n                <Table {...tableProps} rowKey="id">\n                    <Table.Column dataIndex="id" title="ID" />\n                    <Table.Column dataIndex="title" title="Title" />\n                    <Table.Column dataIndex="status" title="Status" />\n                    <Table.Column<IPost>\n                        title="Actions"\n                        dataIndex="actions"\n                        key="actions"\n                        render={(_, record) => (\n                            <Space>\n                                {/* highlight-start */}\n                                <CloneButton\n                                    hideText\n                                    size="small"\n                                    recordItemId={record.id}\n                                    onClick={() => cloneModalShow(record.id)}\n                                />\n                                {/* highlight-end */}\n                            </Space>\n                        )}\n                    />\n                </Table>\n            </List>\n            {/* highlight-start */}\n            <Modal {...cloneModalProps}>\n                <Form {...cloneFormProps} layout="vertical">\n                    <Form.Item\n                        label="Title"\n                        name="title"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label="Status"\n                        name="status"\n                        rules={[\n                            {\n                                required: true,\n                            },\n                        ]}\n                    >\n                        <Select\n                            options={[\n                                {\n                                    label: "Published",\n                                    value: "published",\n                                },\n                                {\n                                    label: "Draft",\n                                    value: "draft",\n                                },\n                                {\n                                    label: "Rejected",\n                                    value: "rejected",\n                                },\n                            ]}\n                        />\n                    </Form.Item>\n                </Form>\n            </Modal>\n            {/* highlight-end */}\n        </>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"refine")," doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens clone form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",{parentName:"admonition"},"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Clone>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n    title="Actions"\n    dataIndex="actions"\n    key="actions"\n    render={(_value, record) => <CloneButton onClick={() => show(record.id)} />}\n/>\n'))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Don't forget to pass the record id to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms.")))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," props are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")," documentation"),".")),(0,a.kt)("h3",{id:"syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the drawers visibility state and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"This property can also be set as an object ",(0,a.kt)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.kt)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n    syncWithLocation: { key: "my-modal", syncId: true },\n});\n')),(0,a.kt)("h3",{id:"defaultformvalues"},(0,a.kt)("inlineCode",{parentName:"h3"},"defaultFormValues")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"defaultFormValues")," is only available in ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," form.")),(0,a.kt)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n    defaultFormValues: {\n        title: "Hello World",\n    },\n});\n')),(0,a.kt)("h3",{id:"defaultvisible"},(0,a.kt)("inlineCode",{parentName:"h3"},"defaultVisible")),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVisible")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the modal will be visible by default. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    defaultVisible: true,\n});\n")),(0,a.kt)("h3",{id:"autosubmitclose"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSubmitClose")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoSubmitClose")," will make the modal close after a successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    autoSubmitClose: false,\n});\n")),(0,a.kt)("h3",{id:"autoresetform"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoResetForm")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoResetForm")," will reset the form after a successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    autoResetForm: false,\n});\n")),(0,a.kt)("h3",{id:"warnwhenunsavedchanges"},(0,a.kt)("inlineCode",{parentName:"h3"},"warnWhenUnsavedChanges")),(0,a.kt)("p",null,"When set to true, ",(0,a.kt)("inlineCode",{parentName:"p"},"warnWhenUnsavedChanges")," shows a warning when the user tries to leave the page with unsaved changes. It is used to prevent the user from accidentally leaving the page. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default"),(0,a.kt)("p",null,"You can also set this value in ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config/#warnwhenunsavedchanges"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n    warnWhenUnsavedChanges: true,\n});\n")),(0,a.kt)("h3",{id:"overtimeoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtimeOptions")),(0,a.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm({\n    //...\n    overtimeOptions: {\n        interval: 1000,\n        onInterval(elapsedInterval) {\n            console.log(elapsedInterval);\n        },\n    },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n    elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,a.kt)("h3",{id:"autosave"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSave")),(0,a.kt)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.kt)("p",null,"By default the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.kt)("p",null,"It also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed."),(0,a.kt)("h4",{id:"enabled"},(0,a.kt)("inlineCode",{parentName:"h4"},"enabled")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    autoSave: {\n        enabled: true,\n    },\n});\n")),(0,a.kt)("h4",{id:"debounce"},(0,a.kt)("inlineCode",{parentName:"h4"},"debounce")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"1000"))),(0,a.kt)("p",null,"Set the debounce time for the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        debounce: 2000,\n    },\n});\n")),(0,a.kt)("h4",{id:"onfinish"},(0,a.kt)("inlineCode",{parentName:"h4"},"onFinish")),(0,a.kt)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useModalForm({\n    autoSave: {\n        enabled: true,\n        // highlight-start\n        onFinish: (values) => {\n            return {\n                foo: "bar",\n                ...values,\n            };\n        },\n        // highlight-end\n    },\n});\n')),(0,a.kt)("h4",{id:"invalidateonunmount"},(0,a.kt)("inlineCode",{parentName:"h4"},"invalidateOnUnmount")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        invalidateOnUnmount: true,\n    },\n});\n")),(0,a.kt)("h4",{id:"invalidateonclose"},(0,a.kt)("inlineCode",{parentName:"h4"},"invalidateOnClose")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"))),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the modal is closed. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n    autoSave: {\n        enabled: true,\n        // highlight-next-line\n        invalidateOnClose: true,\n    },\n});\n")),(0,a.kt)("h2",{id:"return-values"},"Return Values"),(0,a.kt)("h3",{id:"formprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"formProps")),(0,a.kt)("p",null,"It's required to manage ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," state and actions. Under the hood the ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," came from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")),"."),(0,a.kt)("p",null,"It contains the props to manage the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form#api"},"Antd ",(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," components such as ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/hooks/form/useForm/#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"onValuesChange"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"initialValues"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"onFieldsChange"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"onFinish")," etc.")),(0,a.kt)("h3",{id:"modalprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"modalProps")),(0,a.kt)("p",null,"The props needed by the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Modal>"))," component."),(0,a.kt)("h4",{id:"title"},(0,a.kt)("inlineCode",{parentName:"h4"},"title")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default when url is ",(0,a.kt)("inlineCode",{parentName:"p"},'"/posts/create"'),': "Create Post"')),(0,a.kt)("p",null,"Title of the modal. Value is based on resource and action values."),(0,a.kt)("h4",{id:"oktext"},(0,a.kt)("inlineCode",{parentName:"h4"},"okText")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"okText")," is the text of the ",(0,a.kt)("inlineCode",{parentName:"p"},'"submit"'),' button within the modal. It is "Save" by default.'),(0,a.kt)("h4",{id:"canceltext"},(0,a.kt)("inlineCode",{parentName:"h4"},"cancelText")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cancelText")," is the text of the ",(0,a.kt)("inlineCode",{parentName:"p"},'"cancel"'),' button within the modal. It is "Cancel" by default.'),(0,a.kt)("h4",{id:"width"},(0,a.kt)("inlineCode",{parentName:"h4"},"width")),(0,a.kt)("p",null,"Width of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It is ",(0,a.kt)("inlineCode",{parentName:"p"},"1000px")," by default."),(0,a.kt)("h4",{id:"forcerender"},(0,a.kt)("inlineCode",{parentName:"h4"},"forceRender")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"forceRender")," renders the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," instead of lazy rendering it. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("h4",{id:"okbuttonprops"},(0,a.kt)("inlineCode",{parentName:"h4"},"okButtonProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"okButtonProps")," contains all the props needed by the ",(0,a.kt)("inlineCode",{parentName:"p"},'"submit"')," button within the modal (disabled,loading etc.). When ",(0,a.kt)("inlineCode",{parentName:"p"},"okButtonProps.onClick")," is called, it triggers ",(0,a.kt)("inlineCode",{parentName:"p"},"form.submit()"),". You can manually pass these props to your custom button."),(0,a.kt)("h4",{id:"onok"},(0,a.kt)("inlineCode",{parentName:"h4"},"onOk")),(0,a.kt)("p",null,"A function that can submit the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to submit the form manually."),(0,a.kt)("h4",{id:"oncancel"},(0,a.kt)("inlineCode",{parentName:"h4"},"onCancel")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"close"))),(0,a.kt)("p",null,"A function that can close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to close the modal manually."),(0,a.kt)("h4",{id:"visible-"},(0,a.kt)("del",{parentName:"h4"},(0,a.kt)("inlineCode",{parentName:"del"},"visible"))," ",(0,a.kt)(h,{deprecated:!0,mdxType:"PropTag"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This prop is deprecated. Please use ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," instead.")),(0,a.kt)("p",null,"Current visible state of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". Default value depends on ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVisible")," prop."),(0,a.kt)("h3",{id:"open"},(0,a.kt)("inlineCode",{parentName:"h3"},"open")),(0,a.kt)("p",null,"Current visible state of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". Default value depends on ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVisible")," prop."),(0,a.kt)("h3",{id:"close"},(0,a.kt)("inlineCode",{parentName:"h3"},"close")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"onCancel"))),(0,a.kt)("p",null,"A function that can close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to close the modal manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { close, modalProps, formProps, onFinish } = useModalForm();\n\nconst onFinishHandler = (values) => {\n    onFinish(values);\n    close();\n};\n\n// ---\n\nreturn (\n    <Modal {...modalProps}>\n        <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n            <Form.Item label="Title" name="title">\n                <Input />\n            </Form.Item>\n        </Form>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"submit"},(0,a.kt)("inlineCode",{parentName:"h3"},"submit")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, submit } = useModalForm();\n\n// ---\n\nreturn (\n    <Modal\n        {...modalProps}\n        footer={[\n            <Button key="submit" type="primary" onClick={submit}>\n                Submit\n            </Button>,\n        ]}\n    >\n        <Form {...formProps} layout="vertical">\n            <Form.Item label="Title" name="title">\n                <Input />\n            </Form.Item>\n        </Form>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"show"},(0,a.kt)("inlineCode",{parentName:"h3"},"show")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"show")," is a function that can show the modal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, show } = useModalForm();\n\nreturn (\n    <>\n        <Button type="primary" onClick={() => show()}>\n            Show Modal\n        </Button>\n        <Modal\n            {...modalProps}\n            footer={[\n                <Button key="submit" type="primary" onClick={submit}>\n                    Submit\n                </Button>,\n            ]}\n        >\n            <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n                <Form.Item label="Title" name="title">\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    </>\n);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps } = useModalForm();\n\n// ---\n\nreturn (\n    <Modal\n        {...modalProps}\n        footer={\n            <Button\n                onClick={(\n                    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> &\n                        React.MouseEvent<HTMLButtonElement, MouseEvent>,\n                ) => modalProps.onCancel(e)}\n            >\n                Cancel\n            </Button>\n        }\n    >\n        <Form {...formProps} layout="vertical">\n            <Form.Item label="Title" name="title">\n                <Input />\n            </Form.Item>\n        </Form>\n    </Modal>\n);\n')),(0,a.kt)("h3",{id:"overtime"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtime")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"autosaveprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"autoSaveProps")),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," properties from mutation."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.kt)("p",null,"Here is an example where we modify the form data before submit:"),(0,a.kt)("p",null,"We need to send the values we received from the user in two separate inputs, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { Modal, useModalForm } from "@refinedev/antd";\nimport { Form, Input } from "antd";\nimport React from "react";\n\nexport const UserCreate: React.FC = () => {\n    // highlight-start\n    const { formProps, modalProps } = useModalForm({\n        action: "create",\n    });\n    // highlight-end\n\n    // highlight-start\n    const handleOnFinish = (values) => {\n        formProps.onFinish?.({\n            fullName: `${values.name} ${values.surname}`,\n        });\n    };\n    // highlight-end\n\n    return (\n        <Modal {...modalProps}>\n            // highlight-next-line\n            <Form {...formProps} onFinish={handleOnFinish} layout="vertical">\n                <Form.Item label="Name" name="name">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Surname" name="surname">\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)(f,{module:"@refinedev/antd/useModalForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/api-reference/core/components/refine-config"},"Refine"),">")," component. ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponse"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TError"))))),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that can open the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useModalForm/#formprops"},"Props needed to manage form component")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#Form"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modalProps"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/antd/hooks/form/useModalForm/#modalprops"},"Props for needed to manage modal component")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/modal/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"Loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"open"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the modal dialog is open or not"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a function that can close the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"form"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"Record id for edit action"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setId"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")," setter"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#basekey"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined>>"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mutationResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},(0,a.kt)("inlineCode",{parentName:"a"},"UseMutationResult<{ data: TData }, TError, { resource: string; values: TVariables; }, unknown>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"success" }'))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(N,{path:"form-antd-use-modal-form",mdxType:"CodeSandboxExample"}))}g.isMDXComponent=!0}}]);