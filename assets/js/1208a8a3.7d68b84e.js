"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[68533],{80587:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(16153);const i=({hook:e,method:t,hasDefault:n=!0})=>{var i,o,l,s,p,d;const c=`It will be passed to the [\`${null===(i=t)||void 0===i?void 0:i.name}\`](${null===(o=t)||void 0===o?void 0:o.URL}) method from the \`dataProvider\` as parameter via the [\`${null===(l=e)||void 0===l?void 0:l.name}\`](${null===(s=e)||void 0===s?void 0:s.URL}) hook. \n    The parameter is usually used as an API endpoint path.\n    It all depends on how to handle the \`resource\` in the [\`${null===(p=t)||void 0===p?void 0:p.name}\`](${null===(d=t)||void 0===d?void 0:d.URL}) method. \n    See the [creating a data provider](/docs/api-reference/core/providers/data-provider/#creating-a-data-provider) section for an example of how resources are handled.`;return a.createElement(a.Fragment,null,n&&a.createElement(r.D,null,"> Default: It reads the `resource` value from the current URL."),a.createElement(r.D,null,c))}},54782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>q,contentTitle:()=>L,default:()=>M,frontMatter:()=>R,metadata:()=>E,toc:()=>A});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const l={toc:[]};function s(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},l,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\n\nimport { List, TagField, useTable } from "@refinedev/antd";\nimport { Table } from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost, HttpError>();\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column dataIndex="content" title="Content" />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value: string) => <TagField value={value} />}\n                />\n            </Table>\n        </List>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}s.isMDXComponent=!0;const u={toc:[]};function m(e){var{components:t}=e,n=c(e,["components"]);return(0,a.kt)("wrapper",d(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){p(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\n\nimport {\n    List,\n    TagField,\n    useTable,\n    // highlight-next-line\n    getDefaultSortOrder,\n} from "@refinedev/antd";\nimport { Table } from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst PostList: React.FC = () => {\n    // highlight-start\n    const { tableProps, sorter } = useTable<IPost>({\n        sorters: {\n            initial: [\n                {\n                    field: "id",\n                    order: "desc",\n                },\n            ],\n        },\n    });\n    // highlight-end\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column\n                    dataIndex="id"\n                    title="ID"\n                    // highlight-start\n                    sorter={{ multiple: 2 }}\n                    defaultSortOrder={getDefaultSortOrder("id", sorter)}\n                    // highlight-end\n                />\n                <Table.Column\n                    dataIndex="title"\n                    title="Title"\n                    // highlight-start\n                    sorter={{ multiple: 1 }}\n                    defaultSortOrder={getDefaultSortOrder("title", sorter)}\n                    // highlight-end\n                />\n                <Table.Column dataIndex="content" title="Content" />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value: string) => <TagField value={value} />}\n                />\n            </Table>\n        </List>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function k(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function f(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}m.isMDXComponent=!0;const g={toc:[]};function b(e){var{components:t}=e,n=f(e,["components"]);return(0,a.kt)("wrapper",k(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){h(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\n\nimport {\n    List,\n    TagField,\n    useTable,\n    // highlight-start\n    FilterDropdown,\n    // highlight-end\n} from "@refinedev/antd";\nimport {\n    Table,\n    // highlight-start\n    Radio,\n    // highlight-end\n} from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps } = useTable<IPost, HttpError>();\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column dataIndex="content" title="Content" />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value: string) => <TagField value={value} />}\n                    // highlight-start\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Radio.Group>\n                                <Radio value="published">Published</Radio>\n                                <Radio value="draft">Draft</Radio>\n                                <Radio value="rejected">Rejected</Radio>\n                            </Radio.Group>\n                        </FilterDropdown>\n                    )}\n                    // highlight-end\n                />\n            </Table>\n        </List>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function y(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}b.isMDXComponent=!0;const C={toc:[]};function w(e){var{components:t}=e,n=y(e,["components"]);return(0,a.kt)("wrapper",v(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){N(e,t,n[t])}))}return e}({},C,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport { HttpError } from "@refinedev/core";\n\nimport {\n    List,\n    TagField,\n    useTable,\n    // highlight-start\n    SaveButton,\n    // highlight-end\n} from "@refinedev/antd";\nimport {\n    Table,\n    // highlight-start\n    Form,\n    Input,\n    // highlight-end\n} from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n}\n\ninterface ISearch {\n    title: string;\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps, searchFormProps } = useTable<IPost, HttpError, ISearch>(\n        {\n            // highlight-start\n            onSearch: (values) => {\n                return [\n                    {\n                        field: "title",\n                        operator: "contains",\n                        value: values.title,\n                    },\n                ];\n            },\n            // highlight-end\n        },\n    );\n\n    return (\n        <List>\n            {/* highlight-start */}\n            <Form {...searchFormProps} layout="inline">\n                <Form.Item name="title">\n                    <Input placeholder="Search by title" />\n                </Form.Item>\n                <SaveButton onClick={searchFormProps.form?.submit} />\n            </Form>\n            {/* highlight-end */}\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column dataIndex="content" title="Content" />\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value: string) => <TagField value={value} />}\n                />\n            </Table>\n        </List>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function T(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function O(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}w.isMDXComponent=!0;const S={toc:[]};function I(e){var{components:t}=e,n=O(e,["components"]);return(0,a.kt)("wrapper",T(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){P(e,t,n[t])}))}return e}({},S,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:"live shared",live:!0,shared:!0},"body {\n    padding: 4px;\n    background: white;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts previewHeight=420px",live:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\nimport {\n    HttpError,\n    useMany,\n    getDefaultFilter,\n} from "@refinedev/core";\n\nimport {\n    List,\n    TagField,\n    useTable,\n    // highlight-start\n    useSelect,\n    FilterDropdown,\n    // highlight-end\n} from "@refinedev/antd";\nimport {\n    Table,\n    // highlight-next-line\n    Select,\n} from "antd";\n\n// highlight-start\ninterface ICategory {\n    id: number;\n    title: string;\n}\n// highlight-end\n\ninterface IPost {\n    id: number;\n    title: string;\n    content: string;\n    status: "published" | "draft" | "rejected";\n    // highlight-start\n    category: {\n        id: number;\n    };\n    // highlight-end\n}\n\nconst PostList: React.FC = () => {\n    const { tableProps, filters } = useTable<IPost, HttpError>();\n\n    // highlight-start\n    // Creates the array of ids. This will filter and fetch the category data for the relevant posts.\n    const categoryIds =\n        tableProps.dataSource?.map((p) => p.category.id.toString()) || [];\n    // Fetches the category of each post. It uses the useMany hook to fetch the category data from the API.\n    const { data, isFetching } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            // Set to true only if the posts array is not empty.\n            enabled: categoryIds.length > 0,\n        },\n    });\n    // highlight-end\n\n    // highlight-start\n    // Creates the props by needed the select component for filtering the posts by category.\n    const { selectProps } = useSelect<ICategory>({\n        resource: "categories",\n        optionLabel: "title",\n        optionValue: "id",\n        defaultValue: getDefaultFilter("category.id", filters, "in"),\n    });\n    // highlight-end\n\n    return (\n        <List>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="title" title="Title" />\n                <Table.Column dataIndex="content" title="Content" />\n                {/* highlight-start */}\n                <Table.Column\n                    dataIndex={["category", "id"]}\n                    title="Category"\n                    render={(value) => {\n                        if (isFetching) return "loading...";\n                        // Gets the title of the category from the data object, which is the result of the useMany hook.\n                        return data?.data.find((p) => p.id === value)?.title;\n                    }}\n                    filterDropdown={(props: FilterDropdownProps) => (\n                        <FilterDropdown\n                            {...props}\n                            mapValue={(selectedKeys) =>\n                                selectedKeys.map((i) => parseInt(i.toString()))\n                            }\n                        >\n                            <Select\n                                style={{ minWidth: 200 }}\n                                mode="multiple"\n                                {...selectProps}\n                            />\n                        </FilterDropdown>\n                    )}\n                />\n                {/* highlight-end */}\n                <Table.Column\n                    dataIndex="status"\n                    title="Status"\n                    render={(value: string) => <TagField value={value} />}\n                />\n            </Table>\n        </List>\n    );\n};\n\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "posts",\n            list: PostList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}I.isMDXComponent=!0;var x=n(80587);function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function j(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function D(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const R={id:"useTable",title:"useTable",source:"packages/antd/src/hooks/table/useTable"},L=void 0,E={unversionedId:"api-reference/antd/hooks/table/useTable",id:"api-reference/antd/hooks/table/useTable",title:"useTable",description:"By using useTable, you can get properties that are compatible with Ant Design ` component. All features such as sorting, filtering, and pagination come out of the box. Under the hood it uses useList` for the fetch.",source:"@site/docs/api-reference/antd/hooks/table/useTable.md",sourceDirName:"api-reference/antd/hooks/table",slug:"/api-reference/antd/hooks/table/useTable",permalink:"/docs/api-reference/antd/hooks/table/useTable",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/table/useTable.md",tags:[],version:"current",lastUpdatedBy:"github-actions[bot]",lastUpdatedAt:1694813967,formattedLastUpdatedAt:"Sep 15, 2023",frontMatter:{id:"useTable",title:"useTable",source:"packages/antd/src/hooks/table/useTable"},sidebar:"someSidebar",previous:{title:"useEditableTable",permalink:"/docs/api-reference/antd/hooks/table/useEditableTable"},next:{title:"useModal",permalink:"/docs/api-reference/antd/hooks/ui/useModal"}},q={},A=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Initial Filter and Sorter",id:"initial-filter-and-sorter",level:2},{value:"Search",id:"search",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>onSearch</code>",id:"onsearch",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>pagination.current</code>",id:"paginationcurrent",level:3},{value:"<code>pagination.pageSize</code>",id:"paginationpagesize",level:3},{value:"<code>pagination.mode</code>",id:"paginationmode",level:3},{value:"<code>sorters.initial</code>",id:"sortersinitial",level:3},{value:"<code>sorters.permanent</code>",id:"sorterspermanent",level:3},{value:"<code>sorters.mode</code>",id:"sortersmode",level:3},{value:"<code>filters.initial</code>",id:"filtersinitial",level:3},{value:"<code>filters.permanent</code>",id:"filterspermanent",level:3},{value:"<code>filters.defaultBehavior</code>",id:"filtersdefaultbehavior",level:3},{value:"<code>filters.mode</code>",id:"filtersmode",level:3},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>queryOptions</code>",id:"queryoptions",level:3},{value:"<code>meta</code>",id:"meta",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"<code>overtimeOptions</code>",id:"overtimeoptions",level:3},{value:"<del><code>initialCurrent</code></del>",id:"initialcurrent",level:3},{value:"<del><code>initialPageSize</code></del>",id:"initialpagesize",level:3},{value:"<del><code>hasPagination</code></del>",id:"haspagination",level:3},{value:"<del><code>initialSorter</code></del>",id:"initialsorter",level:3},{value:"<del><code>permanentSorter</code></del>",id:"permanentsorter",level:3},{value:"<del><code>initialFilter</code></del>",id:"initialfilter",level:3},{value:"<del><code>permanentFilter</code></del>",id:"permanentfilter",level:3},{value:"<del><code>defaultSetFilterBehavior</code></del>",id:"defaultsetfilterbehavior",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>tableProps</code>",id:"tableprops",level:3},{value:"<code>onChange</code>",id:"onchange",level:4},{value:"<code>dataSource</code>",id:"datasource",level:4},{value:"<code>loading</code>",id:"loading",level:4},{value:"<code>pagination</code>",id:"pagination-1",level:4},{value:"<code>scroll</code>",id:"scroll",level:4},{value:"<code>searchFormProps</code>",id:"searchformprops",level:3},{value:"<code>tableQueryResult</code>",id:"tablequeryresult",level:3},{value:"<code>sorters</code>",id:"sorters",level:3},{value:"<code>setSorters</code>",id:"setsorters",level:3},{value:"<code>filters</code>",id:"filters",level:3},{value:"<code>setFilters</code>",id:"setfilters",level:3},{value:"<code>current</code>",id:"current",level:3},{value:"<code>setCurrent</code>",id:"setcurrent",level:3},{value:"<code>pageSize</code>",id:"pagesize",level:3},{value:"<code>setPageSize</code>",id:"setpagesize",level:3},{value:"<code>pageCount</code>",id:"pagecount",level:3},{value:"<code>createLinkForSyncWithLocation</code>",id:"createlinkforsyncwithlocation",level:3},{value:"<code>overtime</code>",id:"overtime",level:3},{value:"<del><code>sorter</code></del>",id:"sorter",level:3},{value:"<del><code>setSorter</code></del>",id:"setsorter",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I handle relational data?",id:"how-can-i-handle-relational-data",level:3},{value:"How can I handle client side filtering?",id:"how-can-i-handle-client-side-filtering",level:3},{value:"How can I handle client side sorting?",id:"how-can-i-handle-client-side-sorting",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3},{value:"Example",id:"example",level:2}],z=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},U=z("PropsTable"),H=z("CodeSandboxExample"),W={toc:A};function M(e){var{components:t}=e,n=D(e,["components"]);return(0,a.kt)("wrapper",j(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){F(e,t,n[t])}))}return e}({},W,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"By using ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable"),", you can get properties that are compatible with Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table>"))," component. All features such as sorting, filtering, and pagination come out of the box. Under the hood it uses ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," for the fetch."),(0,a.kt)("p",null,"For all the other features, you can refer to the Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table>"))," documentation."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook is extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," hook from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/core"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/core"))," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," hook.")),(0,a.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,a.kt)("p",null,"In basic usage, ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," returns the data as it comes from the endpoint. By default, it reads ",(0,a.kt)("a",{parentName:"p",href:"#resource"},(0,a.kt)("inlineCode",{parentName:"a"},"resource"))," from the URL."),(0,a.kt)(s,{mdxType:"BasicUsageLivePreview"}),(0,a.kt)("h2",{id:"pagination"},"Pagination"),(0,a.kt)("p",null,"This feature comes out of the box with the ",(0,a.kt)("inlineCode",{parentName:"p"},"tableProps.pagination"),". It generates the pagination links for the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>")," component instead of react state and overrides ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination.itemRender")," value."),(0,a.kt)("p",null,"It also syncs the pagination state with the URL if you enable the ",(0,a.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,a.kt)("p",null,"If you want to make a change in the pagination of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>"),". You should pass the pagination object of the ",(0,a.kt)("inlineCode",{parentName:"p"},"tableProps")," to the pagination property of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>")," as below. You can override the values of the pagination object depending on your needs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable<IPost>();\n\n<Table\n    {...tableProps}\n    rowKey="id"\n    // highlight-start\n    pagination={{\n        ...tableProps.pagination,\n        position: ["bottomCenter"],\n        size: "small",\n    }}\n    // highlight-end\n>\n    // ---\n</Table>;\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},'By default, pagination happens on the server side. If you want to do pagination handling on the client side, you can pass the pagination.mode property and set it to "client". Also, you can disable the pagination by setting the "off".')),(0,a.kt)("h2",{id:"sorting"},"Sorting"),(0,a.kt)("p",null,"If we want to give a column the sorting property, the corresponding ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table#column"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table.Column>"))," component must be given the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#components-table-demo-head"},"sorter")," property."),(0,a.kt)("p",null,"It also syncs the sorting state with the URL if you enable the ",(0,a.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,a.kt)(m,{mdxType:"SorterLivePreview"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"During the sorting process, the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," property of your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Column />")," component is used as the property name in the API request. If your Column component does not have a ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," value, the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataIndex")," property is used.\nIt can be used when your DataIndex and your sorting key are different.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"When using multiple sorting, ",(0,a.kt)("inlineCode",{parentName:"p"},"multiple")," value is required for ",(0,a.kt)("inlineCode",{parentName:"p"},"sorter")," property. Which specifies the priority of the column in sorting.")),(0,a.kt)("h2",{id:"filtering"},"Filtering"),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"filterDropdown")," property from ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table#column"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table.Column>"))," to make filtering based on the column values. In order to do this, we need to put the filtering form inside the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/antd/components/filter-dropdown/"},(0,a.kt)("inlineCode",{parentName:"a"},"<FilterDropdown>"))," component and pass the properties coming to the function to these component's properties."),(0,a.kt)("p",null,"It also syncs the filtering state with the URL if you enable the ",(0,a.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,a.kt)(b,{mdxType:"FilteringPreview"}),(0,a.kt)("h2",{id:"initial-filter-and-sorter"},"Initial Filter and Sorter"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"If you're using the ",(0,a.kt)("inlineCode",{parentName:"p"},"initial"),", don't forget to add ",(0,a.kt)("inlineCode",{parentName:"p"},"getDefaultSortOrder")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultFilteredValue")," to your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table.Column>")," component. Otherwise, hook states may not sync with the table."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// ---\nconst { tableProps, sorters, filters } = useTable({\n    sorters: {\n        initial: [\n            {\n                field: "title",\n                order: "asc",\n            },\n        ],\n    }\n    filters: {\n        initial: [\n            {\n                field: "status",\n                operator: "eq",\n                value: "published",\n            },\n        ],\n    },\n});\n\n// ---\n<Table.Column\n    dataIndex="title"\n    title="Title"\n    // highlight-next-line\n     defaultSortOrder={getDefaultSortOrder("title", sorters)}\n/>\n<Table.Column\n    dataIndex="status"\n    title="Status"\n    render={(value) => <TagField value={value} />}\n    // highlight-next-line\n    defaultFilteredValue={getDefaultFilter("status", filters)}\n    filterDropdown={(props) => (\n        <FilterDropdown {...props}>\n            <Radio.Group>\n                <Radio value="published">Published</Radio>\n                <Radio value="draft">Draft</Radio>\n                <Radio value="rejected">Rejected</Radio>\n            </Radio.Group>\n        </FilterDropdown>\n    )}\n/>\n// ---\n'))),(0,a.kt)("h2",{id:"search"},"Search"),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("a",{parentName:"p",href:"#onsearch"},(0,a.kt)("inlineCode",{parentName:"a"},"onSearch"))," and ",(0,a.kt)("a",{parentName:"p",href:"#searchformprops"},(0,a.kt)("inlineCode",{parentName:"a"},"searchFormProps"))," properties to make custom filter form. ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch")," is a function that is called when the form is submitted. ",(0,a.kt)("inlineCode",{parentName:"p"},"searchFormProps")," is a property that is passed to the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," component."),(0,a.kt)(w,{mdxType:"SearchPreview"}),(0,a.kt)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This feature is only available if you use a ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Live Provider"),".")),(0,a.kt)("p",null,"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook is mounted, it will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,a.kt)("inlineCode",{parentName:"p"},"liveProvider")," with some parameters such as ",(0,a.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," etc. It is useful when you want to subscribe to live updates."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"liveProvider")," documentation ","\u2192"))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"resource"},(0,a.kt)("inlineCode",{parentName:"h3"},"resource")),(0,a.kt)(x.Z,{hook:{name:"useList",URL:"/docs/api-reference/core/hooks/data/useList/"},method:{name:"getList",URL:"/docs/api-reference/core/providers/data-provider/#getlist"},mdxType:"PropResource"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    resource: "categories",\n});\n')),(0,a.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#identifier"},(0,a.kt)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,a.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,a.kt)("h3",{id:"onsearch"},(0,a.kt)("inlineCode",{parentName:"h3"},"onSearch")),(0,a.kt)("p",null,"When ",(0,a.kt)("a",{parentName:"p",href:"#searchformprops"},(0,a.kt)("inlineCode",{parentName:"a"},"searchFormProps.onFinish"))," is called, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch")," function is called with the values of the form. The ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch")," function should return ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters | Promise<CrudFilters>")),".\nAlso, ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch")," will set the current page to 1."),(0,a.kt)("p",null,"It's useful when you want to filter the data with any query."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { searchFormProps, tableProps } = useTable({\n    onSearch: (values) => {\n        return [\n            {\n                field: "title",\n                operator: "contains",\n                value: values.title,\n            },\n        ];\n    },\n});\n\n// --\n<List>\n    <Form {...searchFormProps}>\n        <Space>\n            <Form.Item name="title">\n                <Input placeholder="Search by title" />\n            </Form.Item>\n            <SaveButton onClick={searchFormProps.form?.submit} />\n        </Space>\n    </Form>\n    <Table {...tableProps} rowKey="id">\n        <Table.Column title="Title" dataIndex="title" />\n    </Table>\n</List>;\n// ---\n')),(0,a.kt)("h3",{id:"dataprovidername"},(0,a.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,a.kt)("p",null,"If there is more than one ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you should use the ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProviderName")," that you will use. It is useful when you want to use a different ",(0,a.kt)("inlineCode",{parentName:"p"},"dataProvider")," for a specific resource."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    dataProviderName: "second-data-provider",\n});\n')),(0,a.kt)("h3",{id:"paginationcurrent"},(0,a.kt)("inlineCode",{parentName:"h3"},"pagination.current")),(0,a.kt)("p",null,"Sets the initial value of the page index. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    pagination: {\n        current: 2,\n    },\n});\n")),(0,a.kt)("h3",{id:"paginationpagesize"},(0,a.kt)("inlineCode",{parentName:"h3"},"pagination.pageSize")),(0,a.kt)("p",null,"Sets the initial value of the page size. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    pagination: {\n        pageSize: 20,\n    },\n});\n")),(0,a.kt)("h3",{id:"paginationmode"},(0,a.kt)("inlineCode",{parentName:"h3"},"pagination.mode")),(0,a.kt)("p",null,"It can be ",(0,a.kt)("inlineCode",{parentName:"p"},'"off"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"client"'),". It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"')," by default."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"off":')," Pagination is disabled. All records will be fetched."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"client":')," Pagination is done on the client side. All records will be fetched and then the records will be paginated on the client side."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"server":'),": Pagination is done on the server side. Records will be fetched by using the ",(0,a.kt)("inlineCode",{parentName:"li"},"current")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"pageSize")," values.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    pagination: {\n        mode: "client",\n    },\n});\n')),(0,a.kt)("h3",{id:"sortersinitial"},(0,a.kt)("inlineCode",{parentName:"h3"},"sorters.initial")),(0,a.kt)("p",null,"Sets the initial value of the sorter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"initial")," is not permanent. It will be cleared when the user changes the sorter. If you want to set a permanent value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters.permanent")," prop."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    sorters: {\n        initial: [\n            {\n                field: "name",\n                order: "asc",\n            },\n        ],\n    },\n});\n')),(0,a.kt)("h3",{id:"sorterspermanent"},(0,a.kt)("inlineCode",{parentName:"h3"},"sorters.permanent")),(0,a.kt)("p",null,"Sets the permanent value of the sorter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"permanent")," is permanent and unchangeable. It will not be cleared when the user changes the sorter. If you want to set a temporary value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters.initial")," prop."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    sorters: {\n        permanent: [\n            {\n                field: "name",\n                order: "asc",\n            },\n        ],\n    },\n});\n')),(0,a.kt)("h3",{id:"sortersmode"},(0,a.kt)("inlineCode",{parentName:"h3"},"sorters.mode")),(0,a.kt)("p",null,"It can be ",(0,a.kt)("inlineCode",{parentName:"p"},'"off"'),", or ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"'),". It is ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"')," by default."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"off":')," ",(0,a.kt)("inlineCode",{parentName:"li"},"sorters")," are not sent to the server. You can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"sorters")," value to sort the records on the client side."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"server":'),": Sorting is done on the server side. Records will be fetched by using the ",(0,a.kt)("inlineCode",{parentName:"li"},"sorters")," value.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    sorters: {\n        mode: "server",\n    },\n});\n')),(0,a.kt)("h3",{id:"filtersinitial"},(0,a.kt)("inlineCode",{parentName:"h3"},"filters.initial")),(0,a.kt)("p",null,"Sets the initial value of the filter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"initial")," is not permanent. It will be cleared when the user changes the filter. If you want to set a permanent value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"filters.permanent")," prop."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    filters: {\n        initial: [\n            {\n                field: "name",\n                operator: "contains",\n                value: "Foo",\n            },\n        ],\n    },\n});\n')),(0,a.kt)("h3",{id:"filterspermanent"},(0,a.kt)("inlineCode",{parentName:"h3"},"filters.permanent")),(0,a.kt)("p",null,"Sets the permanent value of the filter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"permanent")," is permanent and unchangeable. It will not be cleared when the user changes the filter. If you want to set a temporary value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"filters.initial")," prop."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    filters: {\n        permanent: [\n            {\n                field: "name",\n                operator: "contains",\n                value: "Foo",\n            },\n        ],\n    },\n});\n')),(0,a.kt)("h3",{id:"filtersdefaultbehavior"},(0,a.kt)("inlineCode",{parentName:"h3"},"filters.defaultBehavior")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Default: ",(0,a.kt)("inlineCode",{parentName:"p"},"merge"))),(0,a.kt)("p",null,"The filtering behavior can be set to either ",(0,a.kt)("inlineCode",{parentName:"p"},'"merge"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"replace"'),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"merge"'),", it will merge the new filter with the existing filters. This means that if the new filter has the same column as an existing filter, the new filter will replace the existing filter for that column. If the new filter has a different column than the existing filters, it will be added to the existing filters.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"replace"'),", it will replace all existing filters with the new filter. This means that any existing filters will be removed and only the new filter will be applied to the table."))),(0,a.kt)("p",null,"You can also override the default value by using the second parameter of the ",(0,a.kt)("a",{parentName:"p",href:"#setfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"setFilters"))," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    filters: {\n        defaultBehavior: "replace",\n    },\n});\n')),(0,a.kt)("h3",{id:"filtersmode"},(0,a.kt)("inlineCode",{parentName:"h3"},"filters.mode")),(0,a.kt)("p",null,"It can be ",(0,a.kt)("inlineCode",{parentName:"p"},'"off"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"'),". It is ",(0,a.kt)("inlineCode",{parentName:"p"},'"server"')," by default."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"off":')," ",(0,a.kt)("inlineCode",{parentName:"li"},"filters")," are not sent to the server. You can use the ",(0,a.kt)("inlineCode",{parentName:"li"},"filters")," value to filter the records on the client side."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},'"server":'),": Filters are done on the server side. Records will be fetched by using the ",(0,a.kt)("inlineCode",{parentName:"li"},"filters")," value.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    filters: {\n        mode: "off",\n    },\n});\n')),(0,a.kt)("h3",{id:"syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,a.kt)("p",null,"When you use the ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," feature, the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable"),"'s state (e.g. sort order, filters, pagination) is automatically encoded in the query parameters of the URL, and when the URL changes, the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," state is automatically updated to match. This makes it easy to share table state across different routes or pages, and to allow users to bookmark or share links to specific table views. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"Also, you can set this value globally on ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    syncWithLocation: true,\n});\n")),(0,a.kt)("h3",{id:"queryoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," uses the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," hook to fetch data. You can pass the ",(0,a.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"queryOptions"))," to it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    queryOptions: {\n        retry: 3,\n    },\n});\n")),(0,a.kt)("h3",{id:"meta"},(0,a.kt)("inlineCode",{parentName:"h3"},"meta")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,a.kt)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/general-concepts/#meta"},(0,a.kt)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation ","\u2192"))),(0,a.kt)("p",null,"In the following example, we pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,a.kt)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    // highlight-start\n    meta: {\n        headers: { "x-meta-data": "true" },\n    },\n    // highlight-end\n});\n\nconst myDataProvider = {\n    //...\n    getList: async ({\n        resource,\n        pagination,\n        sorters,\n        filters,\n        // highlight-next-line\n        meta,\n    }) => {\n        // highlight-next-line\n        const headers = meta?.headers ?? {};\n        const url = `${apiUrl}/${resource}`;\n\n        //...\n        //...\n\n        // highlight-next-line\n        const { data, headers } = await httpClient.get(`${url}`, { headers });\n\n        return {\n            data,\n        };\n    },\n    //...\n};\n')),(0,a.kt)("h3",{id:"successnotification"},(0,a.kt)("inlineCode",{parentName:"h3"},"successNotification")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,a.kt)("p",null,"After data is fetched successfully, ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," can call ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," to show a success notification. With this prop, you can customize the success notification."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    successNotification: (data, values, resource) => {\n        return {\n            message: `${data.title} Successfully fetched.`,\n            description: "Success with no errors",\n            type: "success",\n        };\n    },\n});\n')),(0,a.kt)("h3",{id:"errornotification"},(0,a.kt)("inlineCode",{parentName:"h3"},"errorNotification")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,a.kt)("p",null,"After data fetching is failed, ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," will call ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," to show an error notification. With this prop, you can customize the error notification."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    errorNotification: (data, values, resource) => {\n        return {\n            message: `Something went wrong when getting ${data.id}`,\n            description: "Error",\n            type: "error",\n        };\n    },\n});\n')),(0,a.kt)("h3",{id:"livemode"},(0,a.kt)("inlineCode",{parentName:"h3"},"liveMode")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"liveMode"),' determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime documentation ","\u2192"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    liveMode: "auto",\n});\n')),(0,a.kt)("h3",{id:"onliveevent"},(0,a.kt)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,a.kt)("p",null,"The callback function is executed when new events from a subscription have arrived."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    onLiveEvent: (event) => {\n        console.log(event);\n    },\n});\n")),(0,a.kt)("h3",{id:"liveparams"},(0,a.kt)("inlineCode",{parentName:"h3"},"liveParams")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,a.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,a.kt)("p",null,"Params to pass to liveProvider's ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method."),(0,a.kt)("h3",{id:"overtimeoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtimeOptions")),(0,a.kt)("p",null,"If you want the loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useTable({\n    //...\n    overtimeOptions: {\n        interval: 1000,\n        onInterval(elapsedInterval) {\n            console.log(elapsedInterval);\n        },\n    }\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>}\n")),(0,a.kt)("h3",{id:"initialcurrent"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"initialCurrent"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination.current")," instead.")),(0,a.kt)("p",null,"Sets the initial value of the page index. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    initialCurrent: 2,\n});\n")),(0,a.kt)("h3",{id:"initialpagesize"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"initialPageSize"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination.pageSize")," instead.")),(0,a.kt)("p",null,"Sets the initial value of the page size. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    initialPageSize: 20,\n});\n")),(0,a.kt)("h3",{id:"haspagination"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"hasPagination"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination.mode")," instead.")),(0,a.kt)("p",null,"Determines whether to use server-side pagination or not. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useTable({\n    hasPagination: false,\n});\n")),(0,a.kt)("h3",{id:"initialsorter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"initialSorter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters.initial")," instead.")),(0,a.kt)("p",null,"Sets the initial value of the sorter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"initialSorter")," is not permanent. It will be cleared when the user changes the sorter. If you want to set a permanent value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"permanentSorter")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    initialSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n});\n')),(0,a.kt)("h3",{id:"permanentsorter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"permanentSorter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters.permanent")," instead.")),(0,a.kt)("p",null,"Sets the permanent value of the sorter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"permanentSorter")," is permanent and unchangeable. It will not be cleared when the user changes the sorter. If you want to set a temporary value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"initialSorter")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    permanentSorter: [\n        {\n            field: "title",\n            order: "asc",\n        },\n    ],\n});\n')),(0,a.kt)("h3",{id:"initialfilter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"initialFilter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"filters.initial")," instead.")),(0,a.kt)("p",null,"Sets the initial value of the filter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"initialFilter")," is not permanent. It will be cleared when the user changes the filter. If you want to set a permanent value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"permanentFilter")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    initialFilter: [\n        {\n            field: "title",\n            operator: "contains",\n            value: "Foo",\n        },\n    ],\n});\n')),(0,a.kt)("h3",{id:"permanentfilter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"permanentFilter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"filters.permanent")," instead.")),(0,a.kt)("p",null,"Sets the permanent value of the filter. The ",(0,a.kt)("inlineCode",{parentName:"p"},"permanentFilter")," is permanent and unchangeable. It will not be cleared when the user changes the filter. If you want to set a temporary value, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"initialFilter")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    permanentFilter: [\n        {\n            field: "title",\n            operator: "contains",\n            value: "Foo",\n        },\n    ],\n});\n')),(0,a.kt)("h3",{id:"defaultsetfilterbehavior"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"defaultSetFilterBehavior"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"filters.defaultBehavior")," instead.")),(0,a.kt)("p",null,"The filtering behavior can be set to either ",(0,a.kt)("inlineCode",{parentName:"p"},'"merge"')," or ",(0,a.kt)("inlineCode",{parentName:"p"},'"replace"'),". It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"merge")," by default."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"merge"'),", it will merge the new filter with the existing filters. This means that if the new filter has the same column as an existing filter, the new filter will replace the existing filter for that column. If the new filter has a different column than the existing filters, it will be added to the existing filters.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,a.kt)("inlineCode",{parentName:"p"},'"replace"'),", it will replace all existing filters with the new filter. This means that any existing filters will be removed and only the new filter will be applied to the table."))),(0,a.kt)("p",null,"You can also override the default value by using the second parameter of the ",(0,a.kt)("a",{parentName:"p",href:"#setfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"setFilters"))," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n    defaultSetFilterBehavior: "replace",\n});\n')),(0,a.kt)("h2",{id:"return-values"},"Return Values"),(0,a.kt)("h3",{id:"tableprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"tableProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tableProps")," are the props needed by the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table>"))," component."),(0,a.kt)("h4",{id:"onchange"},(0,a.kt)("inlineCode",{parentName:"h4"},"onChange")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," callback function is executed when a user interacts(filter, sort, etc.) with the table."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," handles sorting, filtering, and pagination with this function. If you override this function, you need to handle these operations manually.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { tableProps } = useTable()\n\n<Table {...tableProps} onChange={tableProps.onChange} rowKey="id">\n    <Table.Column title="Title" dataIndex="title" />\n</Table>\n')),(0,a.kt)("h4",{id:"datasource"},(0,a.kt)("inlineCode",{parentName:"h4"},"dataSource")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"dataSource")," contains the data to be displayed in the table. Values fetched with ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,a.kt)("h4",{id:"loading"},(0,a.kt)("inlineCode",{parentName:"h4"},"loading")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"loading")," indicates whether the data is being fetched."),(0,a.kt)("h4",{id:"pagination-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"pagination")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pagination")," returns the pagination configuration values(pageSize, current, position, etc.)."),(0,a.kt)("h4",{id:"scroll"},(0,a.kt)("inlineCode",{parentName:"h4"},"scroll")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"scroll")," is for making the table scrollable or not. It is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"{ x: true }")," by default."),(0,a.kt)("h3",{id:"searchformprops"},(0,a.kt)("inlineCode",{parentName:"h3"},"searchFormProps")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"searchFormProps")," returns ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," instance of Ant Design. When ",(0,a.kt)("inlineCode",{parentName:"p"},"searchFormProps.onFinish")," is called, it will trigger ",(0,a.kt)("a",{parentName:"p",href:"#onsearch"},(0,a.kt)("inlineCode",{parentName:"a"},"onSearch"))," function.\nYou can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"searchFormProps.form.submit")," to submit the form manually."),(0,a.kt)("p",null,"It's useful when you want to create a filter form for your ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { HttpError } from "@refinedev/core";\nimport { List, useTable, SaveButton } from "@refinedev/antd";\nimport { Table, Form, Input } from "antd";\n\ninterface IPost {\n    id: number;\n    title: string;\n}\n\ninterface ISearch {\n    title: string;\n}\n\nconst PostList: React.FC = () => {\n    const { searchFormProps, tableProps } = useTable<IPost, HttpError, ISearch>(\n        {\n            onSearch: (values) => {\n                return [\n                    {\n                        field: "title",\n                        operator: "contains",\n                        value: values.title,\n                    },\n                ];\n            },\n        },\n    );\n\n    return (\n        <List>\n            <Form {...searchFormProps} layout="inline">\n                <Form.Item name="title">\n                    <Input placeholder="Search by title" />\n                </Form.Item>\n                {/* highlight-next-line */}\n                <SaveButton onClick={searchFormProps.form?.submit} />\n            </Form>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column title="Title" dataIndex="title" />\n            </Table>\n        </List>\n    );\n};\n')),(0,a.kt)("h3",{id:"tablequeryresult"},(0,a.kt)("inlineCode",{parentName:"h3"},"tableQueryResult")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tableQueryResult")," are the returned values from ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,a.kt)("h3",{id:"sorters"},(0,a.kt)("inlineCode",{parentName:"h3"},"sorters")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sorters")," is the current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,a.kt)("h3",{id:"setsorters"},(0,a.kt)("inlineCode",{parentName:"h3"},"setSorters")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setSorters")," is a function to set current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"}," (sorters: CrudSorting) => void;\n")),(0,a.kt)("h3",{id:"filters"},(0,a.kt)("inlineCode",{parentName:"h3"},"filters")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"filters")," is the current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,a.kt)("h3",{id:"setfilters"},(0,a.kt)("inlineCode",{parentName:"h3"},"setFilters")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"((filters: CrudFilters, behavior?: SetFilterBehavior) => void) & ((setter: (prevFilters: CrudFilters) => CrudFilters) => void)\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setFilters")," is a function to set current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,a.kt)("h3",{id:"current"},(0,a.kt)("inlineCode",{parentName:"h3"},"current")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"current")," is the current page index state. If pagination is disabled, it will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.kt)("h3",{id:"setcurrent"},(0,a.kt)("inlineCode",{parentName:"h3"},"setCurrent")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined;\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setCurrent")," is a function to set the current page index state. If pagination is disabled, it will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.kt)("h3",{id:"pagesize"},(0,a.kt)("inlineCode",{parentName:"h3"},"pageSize")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pageSize")," is the current page size state. If pagination is disabled, it will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.kt)("h3",{id:"setpagesize"},(0,a.kt)("inlineCode",{parentName:"h3"},"setPageSize")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined;\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setPageSize")," is a function to set the current page size state. If pagination is disabled, it will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.kt)("h3",{id:"pagecount"},(0,a.kt)("inlineCode",{parentName:"h3"},"pageCount")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"pageCount")," is the total page count state. If pagination is disabled, it will be ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,a.kt)("h3",{id:"createlinkforsyncwithlocation"},(0,a.kt)("inlineCode",{parentName:"h3"},"createLinkForSyncWithLocation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"(params: SyncWithLocationParams) => string;\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"createLinkForSyncWithLocation")," is a function creates accessible links for ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation"),". It takes an ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#syncwithlocationparams"},"SyncWithLocationParams")," as parameters."),(0,a.kt)("h3",{id:"overtime"},(0,a.kt)("inlineCode",{parentName:"h3"},"overtime")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useTable();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"sorter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"sorter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters")," instead.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sorter")," is the current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,a.kt)("h3",{id:"setsorter"},(0,a.kt)("del",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"del"},"setSorter"))),(0,a.kt)("admonition",{title:"Deprecated",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"setSorters")," instead.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setSorter")," is a function to set the current ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"}," (sorters: CrudSorting) => void;\n")),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-handle-relational-data"},"How can I handle relational data?"),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useMany/"},(0,a.kt)("inlineCode",{parentName:"a"},"useMany"))," hook to fetch relational data and filter ",(0,a.kt)("inlineCode",{parentName:"p"},"<Table>")," by categories with the help of ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/api-reference/antd/hooks/field/useSelect/"},(0,a.kt)("inlineCode",{parentName:"a"},"useSelect"))),(0,a.kt)(I,{mdxType:"RelationalLivePreview"}),(0,a.kt)("h3",{id:"how-can-i-handle-client-side-filtering"},"How can I handle client side filtering?"),(0,a.kt)("p",null,"You can set the ",(0,a.kt)("a",{parentName:"p",href:"#filtersmode"},(0,a.kt)("inlineCode",{parentName:"a"},'filters.mode: "off"'))," in order to disable server-side filtering. ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," is fully compatible with ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table#components-table-demo-head"},(0,a.kt)("inlineCode",{parentName:"a"},"Ant Design <Table> component's"))," filtering feature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@refinedev/antd";\nimport { Table } from "antd";\n\nconst ListPage = () => {\n    const { tableProps } = useTable({\n        filters: {\n            mode: "off",\n        },\n    });\n\n    return (\n        <Table {...tableProps} rowKey="id">\n            {/* ... */}\n            <Table.Column\n                dataIndex="status"\n                title="Status"\n                filters={[\n                    {\n                        text: "Published",\n                        value: "published",\n                    },\n                    {\n                        text: "Draft",\n                        value: "draft",\n                    },\n                    {\n                        text: "Rejected",\n                        value: "rejected",\n                    },\n                ]}\n                onFilter={(value, record) => record.status === value}\n            />\n        </Table>\n    );\n};\n')),(0,a.kt)("h3",{id:"how-can-i-handle-client-side-sorting"},"How can I handle client side sorting?"),(0,a.kt)("p",null,"You can set the ",(0,a.kt)("a",{parentName:"p",href:"#sortersmode"},(0,a.kt)("inlineCode",{parentName:"a"},'sorters.mode: "off"'))," in order to disable server-side sorting. ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," is fully compatible with ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/table#components-table-demo-head"},(0,a.kt)("inlineCode",{parentName:"a"},"Ant Design <Table> component's"))," sorting feature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useTable } from "@refinedev/antd";\nimport { Table } from "antd";\n\nconst ListPage = () => {\n    const { tableProps } = useTable({\n        sorters: {\n            mode: "off",\n        },\n    });\n\n    return (\n        <Table {...tableProps} rowKey="id">\n            <Table.Column\n                dataIndex="id"\n                title="ID"\n                sorter={(a, b) => a.id - b.id}\n            />\n            {/* ... */}\n        </Table>\n    );\n};\n')),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)(U,{module:"@refinedev/antd/useTable",mdxType:"PropsTable"}),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Desription"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for search params"),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))))),(0,a.kt)("h3",{id:"return-values-1"},"Return values"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"searchFormProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps<TSearchVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"tableProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design ",(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"<Table>"))," props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/table/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"TableProps<TData>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"tableQueryResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the ",(0,a.kt)("inlineCode",{parentName:"td"},"react-query"),"'s ",(0,a.kt)("inlineCode",{parentName:"td"},"useQuery")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{`` data: TData[];`` total: number; },`` TError>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,a.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"current"),(0,a.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,a.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize. (returns ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"sorters"),(0,a.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setSorters"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorters state."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(sorters: CrudSorting) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("del",{parentName:"td"},"sorter")),(0,a.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("del",{parentName:"td"},"setSorter")),(0,a.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorters state."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(sorters: CrudSorting) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"filters"),(0,a.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,a.kt)("td",{parentName:"tr",align:null},"- ",(0,a.kt)("inlineCode",{parentName:"td"},'(filters: CrudFilters, behavior?: "merge" \\| "replace" = "merge") => void')," - ",(0,a.kt)("inlineCode",{parentName:"td"},"(setter: (previousFilters: CrudFilters) => CrudFilters) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))))),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(H,{path:"table-antd-use-table",mdxType:"CodeSandboxExample"}))}M.isMDXComponent=!0}}]);