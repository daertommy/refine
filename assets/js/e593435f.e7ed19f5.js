"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[57403],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});n(67294);var a=n(3905);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const s={title:"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase",description:"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.",slug:"customizable-issue-tracker-with-refine-and-supabase",authors:"melih",tags:["refine","supabase","react","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/customizable-issue-tracker-with-refine-and-supabase",source:"@site/blog/2021-11-12-issue-tracker-refine.md",title:"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase",description:"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.",date:"2021-11-12T00:00:00.000Z",formattedDate:"November 12, 2021",tags:[{label:"refine",permalink:"/blog/tags/refine"},{label:"supabase",permalink:"/blog/tags/supabase"},{label:"react",permalink:"/blog/tags/react"},{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:17.175,hasTruncateMarker:!0,authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],frontMatter:{title:"Create Your Easy Customizable Internal Issue Tracker With Refine and Supabase",description:"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to.",slug:"customizable-issue-tracker-with-refine-and-supabase",authors:"melih",tags:["refine","supabase","react","tutorial"],image:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/placeholder.png",hide_table_of_contents:!1},prevItem:{title:"refine vs React-Admin Which is Better for Your Project?",permalink:"/blog/refine-vs-react-admin"},nextItem:{title:"Create E-mail Subscription Panel with Refine and Strapi",permalink:"/blog/e-mail-subscription-panel-with-refine"},relatedPosts:[{title:"How to set up a WebSocket connection with Node.js and React.js?",description:"Understanding Real-time communication with React and WebSocket",permalink:"/blog/react-websocket-tutorial-nodejs",formattedDate:"August 16, 2023",authors:[{name:"Frank Joseph",title:"Software Developer",imageURL:"/img/generic-profile.png",key:"frank_joseph"}],readingTime:12.28,date:"2023-08-16T00:00:00.000Z"},{title:"How to create React draggable components with react-dnd",description:"We'll be using the react-dnd library to create draggable components in React.",permalink:"/blog/react-draggable-components-with-react-dnd",formattedDate:"March 7, 2023",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:21.255,date:"2023-03-07T00:00:00.000Z"},{title:"Creating Polished Content with React Markdown",description:"We will explore the process of integrating the markdown editor into a refine application",permalink:"/blog/react-markdown",formattedDate:"August 24, 2023",authors:[{name:"David Omotayo",title:"Frontend developer",url:"https://github.com/david4473",imageURL:"https://github.com/david4473.png",key:"david_omotayo"}],readingTime:12.735,date:"2023-08-24T00:00:00.000Z"}],authorPosts:[{title:"Create Full Featured Admin Panel with React and Ant Design",description:"We will see how easy it is to develop a functional Admin panel with the perfect harmony of Refine and Ant Design.",permalink:"/blog/refine-react-ant-design-admin-panel-framework",formattedDate:"February 21, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:12.605,date:"2022-02-21T00:00:00.000Z"},{title:"Building an Customizable Invoice Generator App with Refine, Strapi & Ant Design | Part II",description:"Looking for an invoice generator? Try out Refine. With our custom interface, you can build your own invoice in minutes! Learn more here.",permalink:"/blog/refine-invoice-generator",formattedDate:"March 1, 2022",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:13.67,date:"2022-03-01T00:00:00.000Z"},{title:"Create E-mail Subscription Panel with Refine and Strapi",description:"We will make a web application that allows you to quickly create subscribers and send emails to your subscribers in a simple way. We\u2019ll use refine to develop the frontend easily and strapi for backend solutions.",permalink:"/blog/e-mail-subscription-panel-with-refine",formattedDate:"October 25, 2021",authors:[{name:"Melih Ekinci",title:"Frontend Developer",url:"https://github.com/mlhekinci",imageURL:"https://github.com/mlhekinci.png",key:"melih"}],readingTime:7.125,date:"2021-10-25T00:00:00.000Z"}]},u={authorsImageUrls:[void 0]},c=[{value:"Create Supabase Database",id:"create-supabase-database",level:2},{value:"Refine Project Setup",id:"refine-project-setup",level:2},{value:"Custom Login Page",id:"custom-login-page",level:2},{value:"Custom Signup Page",id:"custom-signup-page",level:2},{value:"Add Resource",id:"add-resource",level:2},{value:"Add List and Filter",id:"add-list-and-filter",level:2},{value:"Create Task",id:"create-task",level:2},{value:"Edit Task",id:"edit-task",level:2},{value:"Show Task",id:"show-task",level:2},{value:"Add Custom Chart",id:"add-custom-chart",level:2},{value:"Overview Project",id:"overview-project",level:2},{value:"Example",id:"example",level:2}],m=(d="CodeSandboxExample",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var d;const g={toc:c};function f(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){r(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This post was created using version 3.x.x of ",(0,a.kt)("strong",{parentName:"p"},"refine"),". Although we plan to update it with the latest version of ",(0,a.kt)("strong",{parentName:"p"},"refine")," as soon as possible, you can still benefit from the post in the meantime."),(0,a.kt)("p",{parentName:"admonition"},"You should know that ",(0,a.kt)("strong",{parentName:"p"},"refine")," version 4.x.x is backward compatible with version 3.x.x, so there is no need to worry. If you want to see the differences between the two versions, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/migration-guide/"},"migration guide"),"."),(0,a.kt)("p",{parentName:"admonition"},"Just be aware that the source code example in this post have been updated to version 4.x.x.")),(0,a.kt)("p",null,"In this article, we will make a customizable internal issue tracker web application with supabase and refine."),(0,a.kt)("p",null,"This web application will  us to create issue and tasks for your team members. You will also be able to choose the priority of these tasks, their tags, and which person to assign them to."),(0,a.kt)("p",null,"We will use ",(0,a.kt)("a",{parentName:"p",href:"https://supabase.io/"},"Supabase")," in backend. Let's start by creating our Supabase account and tables."),(0,a.kt)("h2",{id:"create-supabase-database"},"Create Supabase Database"),(0,a.kt)("p",null,"We have to go to ",(0,a.kt)("a",{parentName:"p",href:"https://supabase.io/"},"Supabase")," and create an organization and database. Then we can start creating our tables."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/start.png",alt:"overview"}),(0,a.kt)("br",null),"The tables we need to create for our project are as follows:",(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"label"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id"),": bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title"),": varchar"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color"),": varchar"))),(0,a.kt)("br",null),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/label_table.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"priority "),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title")," varchar"))),(0,a.kt)("br",null),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/common_table.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"status"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title")," varchar"))),(0,a.kt)("br",null),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/common_table.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"users"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"email")," varchar"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," uuid"))),(0,a.kt)("br",null),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/user_table.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"tasks"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title")," varchar"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"description")," varchar"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"start_time")," date"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end_time")," date"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"priority")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"statuts")," bigint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"users")," uuid"))),(0,a.kt)("br",null),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/task_table.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"We created our database tables. The important part here is that as you can see, in our tasks table, label, priority, status and users values \u200b\u200bare defined as bigint. To summarize the reason for this, we relation the label, priority, status and users tables that we created above with the corresponding values \u200b\u200bin our tasks table."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"  Add Foreign key relationships steps:"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Got to a table, right click the column you wish to add a foreign key for")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Select 'edit column'")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Select 'Add foreign key relation'")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Select the table and column to make a foreign key for")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Click save")))),(0,a.kt)("p",null,"So we can take  reference their id and use their value in our tasks table."),(0,a.kt)("p",null,"Now let's go to the Supabase Table editor and create our constant values."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Label Table")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/label_value.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Priority Table")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/priority_value.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Status Table")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/status_value.png",alt:"overview"}),(0,a.kt)("br",null),"Let's create a test task to better understand key relation.",(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/task_test.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"As you can see, since we have defined the ids of our label, status, priority and users tables as references to our tasks table, we can now use their values."),(0,a.kt)("p",null,"Let's look at how we can use this data we created on the Supabase side with refine ."),(0,a.kt)("h2",{id:"refine-project-setup"},"Refine Project Setup"),(0,a.kt)("p",null,"Now let's refine the task-manager panel. With superplate, we can quickly create a refine project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  npm create refine-app@latest refine-task-manager -- -b v3\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Select your project type \u203a refine-react\n\u2714 What will be the name of your app \xb7 refine-task-manager\n\u2714 Package manager: \xb7 Npm\n\u2714 Do you want to use a UI Framework? \xb7 Ant Design\n\u2714 Do you want a customized theme?: \xb7 Default theme\n\u2714 Router Provider: \xb7 React Router v6\n\u2714 Data Provider: \xb7 Supabase\n\u2714 Do you want a customized layout? \xb7 Yes\n\u2714 i18n - Internationalization: \xb7 No\n")),(0,a.kt)("p",null,"After the project setup is loaded, let's start by entering our project and making the necessary changes."),(0,a.kt)("p",null,"Let's add our supabase url and key to our refine project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/utility/supabaseClient.ts"',title:'"src/utility/supabaseClient.ts"'},'import { createClient } from "@refinedev/supabase";\n\nconst SUPABASE_URL = "YOUR_SUPABASE_URL";\nconst SUPABASE_KEY = "YOUR_SUPABASE_API_KEY";\n\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);\n')),(0,a.kt)("p",null,"Now we can access and list the tables we created via the supabase."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add custom login and signup page in App.tsx")),(0,a.kt)("p",null,"Our purpose here is to log in if there is a registered user in the supabase. If you do not have a registered user, saving a user to the supabase with refine."),(0,a.kt)("h2",{id:"custom-login-page"},"Custom Login Page"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/login/index.tsx"',title:'"src/pages/login/index.tsx"'},'import React from "react";\nimport { useLogin, useNavigation } from "@refinedev/core";\n\nimport {\n    Row,\n    Col,\n    AntdLayout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n} from "@refinedev/antd";\n\nimport "./styles.css";\n\nconst { Text, Title } = Typography;\n\nexport interface ILoginForm {\n    email: string;\n    password: string;\n}\n\nexport const Login: React.FC = () => {\n    const [form] = Form.useForm<ILoginForm>();\n\n    const { mutate: login } = useLogin<ILoginForm>();\n    const { push } = useNavigation();\n\n    const CardTitle = (\n        <Title level={3} className="title">\n            Sign in your account\n        </Title>\n    );\n\n    return (\n        <AntdLayout className="layout">\n            <Row\n                justify="center"\n                align="middle"\n                style={{\n                    height: "100vh",\n                }}\n            >\n                <Col xs={22}>\n                    <div className="container">\n                        <div className="imageContainer">\n                            <img src="./refine.svg" alt="Refine Logo" />\n                        </div>\n                        <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\n                            <Form<ILoginForm>\n                                layout="vertical"\n                                form={form}\n                                onFinish={(values) => {\n                                    login(values);\n                                }}\n                                initialValues={{\n                                    email: "info@refine.dev",\n                                    password: "refine-supabase",\n                                }}\n                            >\n                                <Form.Item\n                                    name="email"\n                                    label="Email"\n                                    rules={[{ required: true, type: "email" }]}\n                                >\n                                    <Input size="large" placeholder="Email" />\n                                </Form.Item>\n                                <Form.Item\n                                    name="password"\n                                    label="Password"\n                                    rules={[{ required: true }]}\n                                    style={{ marginBottom: "12px" }}\n                                >\n                                    <Input\n                                        type="password"\n                                        placeholder="\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf"\n                                        size="large"\n                                    />\n                                </Form.Item>\n                                <Button\n                                    type="primary"\n                                    size="large"\n                                    htmlType="submit"\n                                    block\n                                >\n                                    Sign in\n                                </Button>\n                            </Form>\n                            <div style={{ marginTop: 8 }}>\n                                <Text style={{ fontSize: 12 }}>\n                                    Don\u2019t have an account?\n                                    <a\n                                        href="#"\n                                        style={{\n                                            fontWeight: "bold",\n                                            marginLeft: 12,\n                                        }}\n                                        onClick={() => push("signup")}\n                                    >\n                                        Sign up\n                                    </a>\n                                </Text>\n                            </div>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </AntdLayout>\n    );\n};\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/pages/login/styles.css"',title:'"src/pages/login/styles.css"'},'.layout {\n  background: radial-gradient(50% 50% at 50% 50%, #63386a 0%, #310438 100%);\n  background-size: "cover";\n}\n\n.container {\n  max-width: 408px;\n  margin: auto;\n}\n\n.title {\n  text-align: center;\n  color: #626262;\n  font-size: 30px;\n  letter-spacing: -0.04em;\n}\n\n.imageContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 16px;\n}\n  \n')),(0,a.kt)("h2",{id:"custom-signup-page"},"Custom Signup Page"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/signup.tsx"',title:'"src/pages/signup.tsx"'},'import React from "react";\nimport { useNavigation } from "@refinedev/core";\nimport {\n    Row,\n    Col,\n    AntdLayout,\n    Card,\n    Typography,\n    Form,\n    Input,\n    Button,\n} from "@refinedev/antd";\nimport "./styles.css";\nimport { supabaseClient } from "utility";\n\nconst { Text, Title } = Typography;\n\nexport interface ISignup {\n    email: string;\n    password: string;\n}\n\nexport const Signup: React.FC = () => {\n    const [form] = Form.useForm<ISignup>();\n    const { push } = useNavigation();\n\n    const CardTitle = (\n        <Title level={3} className="title">\n            Sign Up\n        </Title>\n    );\n\n    const signup = async (email: string, password: string) => {\n        const { error } = await supabaseClient.auth.signUp({\n            email,\n            password,\n        });\n\n        if (error) {\n            return Promise.reject(error);\n        }\n    };\n\n    return (\n        <AntdLayout className="layout">\n            <Row\n                justify="center"\n                align="middle"\n                style={{\n                    height: "100vh",\n                }}\n            >\n                <Col xs={22}>\n                    <div className="container">\n                        <div className="imageContainer">\n                            <img src="./refine.svg" alt="Refine Logo" />\n                        </div>\n                        <Card title={CardTitle} headStyle={{ borderBottom: 0 }}>\n                            <Form<ISignup>\n                                layout="vertical"\n                                form={form}\n                                onFinish={(values) => {\n                                    signup(values.email, values.password);\n                                    push("login");\n                                }}\n                            >\n                                <Form.Item\n                                    name="email"\n                                    label="Email"\n                                    rules={[{ required: true, type: "email" }]}\n                                >\n                                    <Input size="large" placeholder="Email" />\n                                </Form.Item>\n                                <Form.Item\n                                    name="password"\n                                    label="Password"\n                                    rules={[{ required: true }]}\n                                    style={{ marginBottom: "12px" }}\n                                >\n                                    <Input\n                                        type="password"\n                                        placeholder="\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf\u25cf"\n                                        size="large"\n                                    />\n                                </Form.Item>\n                                <Button\n                                    type="primary"\n                                    size="large"\n                                    htmlType="submit"\n                                    block\n                                    style={{ marginTop: 24 }}\n                                >\n                                    Create Account\n                                </Button>\n                            </Form>\n                            <div style={{ marginTop: 16 }}>\n                                <Text style={{ fontSize: 12 }}>\n                                    Don\u2019t have an account?\n                                    <a\n                                        href="#"\n                                        style={{\n                                            fontWeight: "bold",\n                                            marginLeft: 12,\n                                        }}\n                                        onClick={() => push("login")}\n                                    >\n                                        Sign in\n                                    </a>\n                                </Text>\n                            </div>\n                        </Card>\n                    </div>\n                </Col>\n            </Row>\n        </AntdLayout>\n    );\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="src/pages/signup/styles.css"',title:'"src/pages/signup/styles.css"'},'.layout {\n  background: radial-gradient(50% 50% at 50% 50%, #63386a 0%, #310438 100%);\n  background-size: "cover";\n}\n\n.container {\n  max-width: 408px;\n  margin: auto;\n}\n\n.title {\n  text-align: center;\n  color: #626262;\n  font-size: 30px;\n  letter-spacing: -0.04em;\n}\n\n.imageContainer {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 16px;\n}\n\n  \n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\nimport {\n    notificationProvider,\n    Layout,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { Login } from "./pages/login";\nimport { Signup } from "./pages/signup";\n\nfunction App() {\n    return (\n        <Refine\n            dataProvider={dataProvider(supabaseClient)}\n            authProvider={authProvider}\n            LoginPage={Login}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    {\n                        element: <Signup />,\n                        path: "/signup",\n                    },\n                ] as typeof routerProvider.routes,\n            }}\n            notificationProvider={notificationProvider}\n            Layout={Layout}\n            catchAll={<ErrorComponent />}\n        />\n    );\n}\n\nexport default App;\n\n')),(0,a.kt)("p",null,"Here we define our login and signup pages. We then use the refine's ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/packages/documentation/routers/"},"router-provider")," and ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/core/hooks/navigation/useNavigation/"},"useNavigaton")," hooks to switch between login and signup."),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/login.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"We can now create supabase users and log in from our refine interface."),(0,a.kt)("h2",{id:"add-resource"},"Add Resource"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Adding resources according to the table name we created in Supabase")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport {\n    notificationProvider,\n    Layout,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { Login } from "./pages/login";\nimport { Signup } from "./pages/signup";\n\nfunction App() {\n    return (\n        <Refine\n            dataProvider={dataProvider(supabaseClient)}\n            authProvider={authProvider}\n            DashboardPage={Dashboard}\n            LoginPage={Login}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    {\n                        element: <Signup />,\n                        path: "/signup",\n                    },\n                ] as typeof routerProvider.routes,\n            }}\n            resources={[\n                {\n                    name: "users",\n                },\n                {\n                    name: "tasks",\n                },\n            ]}\n            notificationProvider={notificationProvider}\n            Layout={Layout}\n            catchAll={<ErrorComponent />}\n        />\n    );\n}\n\nexport default App;\n\n')),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/list.png",alt:"overview"}),(0,a.kt)("br",null),"We can now create lists of tasks and make changes to them.",(0,a.kt)("h2",{id:"add-list-and-filter"},"Add List and Filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/task/list.tsx"',title:'"src/pages/task/list.tsx"'},'import React from "react";\nimport {\n    useMany,\n    IResourceComponentsProps,\n    HttpError,\n    CrudFilters,\n} from "@refinedev/core";\n\nimport {\n    useTable,\n    List,\n    Table,\n    TextField,\n    TagField,\n    DateField,\n    Space,\n    ShowButton,\n    EditButton,\n    DeleteButton,\n    Row,\n    Col,\n    Card,\n} from "@refinedev/antd";\n\nimport {\n    ILabel,\n    IPriority,\n    ITask,\n    ITaskFilterVariables,\n    IStatus,\n    IAuthUser,\n} from "interfaces";\n\nimport { Filter } from "../task";\n\nexport const TaskList: React.FC<IResourceComponentsProps> = () => {\n    const { tableProps, searchFormProps } = useTable<\n        ITask,\n        HttpError,\n        ITaskFilterVariables\n    >({\n        onSearch: (params) => {\n            const filters: CrudFilters = [];\n            const {\n                title,\n                label,\n                priority,\n                users,\n                status,\n                start_time,\n                end_time,\n            } = params;\n\n            filters.push(\n                {\n                    field: "title",\n                    operator: "eq",\n                    value: title,\n                },\n\n                {\n                    field: "label",\n                    operator: "eq",\n                    value: label,\n                },\n\n                {\n                    field: "priority",\n                    operator: "eq",\n                    value: priority,\n                },\n\n                {\n                    field: "users",\n                    operator: "eq",\n                    value: users,\n                },\n\n                {\n                    field: "status",\n                    operator: "eq",\n                    value: status,\n                },\n\n                {\n                    field: "start_time",\n                    operator: "gte",\n                    value: start_time ? start_time[0].toISOString() : undefined,\n                },\n\n                {\n                    field: "start_time",\n                    operator: "lte",\n                    value: start_time ? start_time[1].toISOString() : undefined,\n                },\n\n                {\n                    field: "end_time",\n                    operator: "gte",\n                    value: end_time ? end_time[0].toISOString() : undefined,\n                },\n\n                {\n                    field: "end_time",\n                    operator: "lte",\n                    value: end_time ? end_time[1].toISOString() : undefined,\n                },\n            );\n            return filters;\n        },\n    });\n\n    const labelIds = tableProps?.dataSource?.map((item) => item.label) ?? [];\n    const priorityIds =\n        tableProps?.dataSource?.map((item) => item.priority) ?? [];\n    const assignedIds = tableProps?.dataSource?.map((item) => item.users) ?? [];\n    const statusIds = tableProps?.dataSource?.map((item) => item.status) ?? [];\n\n    const { data: labels } = useMany<ILabel>({\n        resource: "label",\n        ids: labelIds,\n    });\n\n    const { data: priority } = useMany<IPriority>({\n        resource: "priority",\n        ids: priorityIds,\n    });\n\n    const { data: assigned } = useMany<IAuthUser>({\n        resource: "users",\n        ids: assignedIds,\n    });\n\n    const { data: status } = useMany<IStatus>({\n        resource: "status",\n        ids: statusIds,\n    });\n\n    return (\n        <Row gutter={[16, 16]}>\n            <Col lg={6} xs={24}>\n                <Card title="Task Filter">\n                    <Filter formProps={searchFormProps} />\n                </Card>\n            </Col>\n            <Col lg={18} xs={24}>\n                <List>\n                    <Table {...tableProps} rowKey="id">\n                        <Table.Column dataIndex="title" title="Title" />\n                        <Table.Column\n                            dataIndex="label"\n                            title="Label"\n                            render={(value) => {\n                                return (\n                                    <TagField\n                                        color={\n                                            labels?.data.find(\n                                                (item) => item.id === value,\n                                            )?.color\n                                        }\n                                        value={\n                                            labels?.data.find(\n                                                (item) => item.id === value,\n                                            )?.title\n                                        }\n                                    />\n                                );\n                            }}\n                        />\n                        <Table.Column\n                            dataIndex="priority"\n                            title="Priority"\n                            render={(value) => {\n                                return (\n                                    <TextField\n                                        value={\n                                            priority?.data.find(\n                                                (item) => item.id === value,\n                                            )?.title\n                                        }\n                                    />\n                                );\n                            }}\n                        />\n                        <Table.Column\n                            dataIndex="users"\n                            title="Assigned"\n                            render={(value) => {\n                                return (\n                                    <TagField\n                                        value={\n                                            assigned?.data.find(\n                                                (item) => item.id === value,\n                                            )?.email\n                                        }\n                                    />\n                                );\n                            }}\n                        />\n                        <Table.Column\n                            dataIndex="status"\n                            title="Status"\n                            render={(value) => {\n                                return (\n                                    <TextField\n                                        value={\n                                            status?.data.find(\n                                                (item) => item.id === value,\n                                            )?.title\n                                        }\n                                    />\n                                );\n                            }}\n                        />\n                        <Table.Column\n                            dataIndex="start_time"\n                            title="Start Date"\n                            render={(value) => (\n                                <DateField format="DD/MM/YYYY" value={value} />\n                            )}\n                        />\n                        <Table.Column\n                            dataIndex="end_time"\n                            title="Due Date"\n                            render={(value) => (\n                                <DateField format="DD/MM/YYYY" value={value} />\n                            )}\n                        />\n                        <Table.Column<ITask>\n                            title="Actions"\n                            dataIndex="actions"\n                            render={(_, record): React.ReactNode => {\n                                return (\n                                    <Space>\n                                        <ShowButton\n                                            size="small"\n                                            recordItemId={record.id}\n                                            hideText\n                                        />\n                                        <EditButton\n                                            size="small"\n                                            recordItemId={record.id}\n                                            hideText\n                                        />\n                                        <DeleteButton\n                                            size="small"\n                                            recordItemId={record.id}\n                                            hideText\n                                        />\n                                    </Space>\n                                );\n                            }}\n                        />\n                    </Table>\n                </List>\n            </Col>\n        </Row>\n    );\n};\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/task/filter.tsx"',title:'"src/pages/task/filter.tsx"'},'import React from "react";\nimport {\n    Form,\n    FormProps,\n    Input,\n    useSelect,\n    Select,\n    DatePicker,\n    Icons,\n    Button,\n} from "@refinedev/antd";\n\nimport { ITask, IPriority, IStatus, IAuthUser } from "interfaces";\n\nconst { RangePicker } = DatePicker;\n\nexport const Filter: React.FC<{ formProps: FormProps }> = ({ formProps }) => {\n    const { selectProps: labelSelectProps } = useSelect<ITask>({\n        resource: "label",\n    });\n\n    const { selectProps: priorityProps } = useSelect<IPriority>({\n        resource: "priority",\n    });\n\n    const { selectProps: statusProps } = useSelect<IStatus>({\n        resource: "status",\n    });\n\n    const { selectProps: assigneProps } = useSelect<IAuthUser>({\n        resource: "users",\n        optionValue: "id",\n        optionLabel: "email",\n    });\n\n    return (\n        <Form layout="vertical" {...formProps}>\n            <Form.Item label="Search" name="title">\n                <Input placeholder="Title" prefix={<Icons.SearchOutlined />} />\n            </Form.Item>\n            <Form.Item label="Label" name="label">\n                <Select\n                    {...labelSelectProps}\n                    allowClear\n                    placeholder="Seach Label"\n                />\n            </Form.Item>\n            <Form.Item label="Priority" name="priority">\n                <Select\n                    {...priorityProps}\n                    allowClear\n                    placeholder="Seach Priority"\n                />\n            </Form.Item>\n            <Form.Item label="Status" name="status">\n                <Select\n                    {...statusProps}\n                    allowClear\n                    placeholder="Search Status"\n                />\n            </Form.Item>\n            <Form.Item label="Assigned" name="users">\n                <Select\n                    {...assigneProps}\n                    allowClear\n                    placeholder="Search Assignee"\n                />\n            </Form.Item>\n            <Form.Item label="Start Date" name="start_time">\n                <RangePicker />\n            </Form.Item>\n            <Form.Item label="Due Date" name="end_time">\n                <RangePicker />\n            </Form.Item>\n            <Form.Item>\n                <Button htmlType="submit" type="primary">\n                    Filter\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n};\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/interfaces"',title:'"src/interfaces"'},"export interface IAuthUser {\n  id: string;\n  email: string;\n}\n\nexport interface ILabel {\n  id: string;\n  title: string;\n  color: string;\n}\n\nexport interface IPriority {\n  id: string;\n  title: string;\n}\n\nexport interface IStatus {\n  id: string;\n  title: string\n}\n\nexport interface ITask {\n  id: string;\n  title: string;\n  description: string;\n  start_time: string;\n  end_time: string;\n  label: string;\n  priority: string;\n  status: string;\n  users: string\n}\n\nexport interface ITaskFilterVariables {\n  title: string;\n  label: string;\n  priority: string;\n  users: string;\n  status: string;\n  start_time: [Dayjs, Dayjs];\n  end_time: [Dayjs, Dayjs];\n}\n")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/task_list.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null," Using refine's ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/guides-and-concepts/search/table-search"},"tableSearch")," and list, we can create our list and perform filtering. "),(0,a.kt)("p",null,"As seen in the example, we listed and showed the task table we created in supabase with refine. Now you can make changes as you want with refine."),(0,a.kt)("p",null,"Now how do we create task? Let's examine how we can edit them and see their details."),(0,a.kt)("h2",{id:"create-task"},"Create Task"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/task/create.tsx"',title:'"src/pages/task/create.tsx"'},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport {\n    useForm,\n    Create,\n    Form,\n    Input,\n    Select,\n    useSelect,\n    DatePicker,\n} from "@refinedev/antd";\n\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from "interfaces";\n\nexport const TaskCreate: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<ITask>();\n\n    const { selectProps: labelSelectProps } = useSelect<ILabel>({\n        resource: "label",\n    });\n\n    const { selectProps: prioritySelectPorps } = useSelect<IPriority>({\n        resource: "priority",\n    });\n\n    const { selectProps: assigneSelectProps } = useSelect<IAuthUser>({\n        resource: "users",\n        optionValue: "id",\n        optionLabel: "email",\n    });\n\n    const { selectProps: statusSelectProps } = useSelect<IStatus>({\n        resource: "status",\n    });\n\n    return (\n        <Create saveButtonProps={saveButtonProps}>\n            <Form {...formProps} wrapperCol={{ span: 12 }} layout="vertical">\n                <Form.Item\n                    label="Title"\n                    name="title"\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Description" name="description">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Label" name="label">\n                    <Select {...labelSelectProps} />\n                </Form.Item>\n                <Form.Item label="Priority" name="priority">\n                    <Select {...prioritySelectPorps} />\n                </Form.Item>\n                <Form.Item label="Assigne To" name="users">\n                    <Select {...assigneSelectProps} />\n                </Form.Item>\n                <Form.Item label="Select Status" name="status">\n                    <Select {...statusSelectProps} />\n                </Form.Item>\n                <Form.Item label="Start Date" name="start_time">\n                    <DatePicker style={{ width: "50%" }} />\n                </Form.Item>\n                <Form.Item label="Due Date" name="end_time">\n                    <DatePicker style={{ width: "50%" }} />\n                </Form.Item>\n            </Form>\n        </Create>\n    );\n};\n\n')),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/create_test.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"edit-task"},"Edit Task"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/task/edit.tsx"',title:'"src/pages/task/edit.tsx"'},'import { IResourceComponentsProps } from "@refinedev/core";\n\nimport {\n    useForm,\n    Form,\n    Input,\n    Select,\n    Edit,\n    useSelect,\n} from "@refinedev/antd";\n\nimport { ITask, IPriority, IStatus, IAuthUser } from "interfaces";\n\nexport const EditTask: React.FC<IResourceComponentsProps> = () => {\n    const { formProps, saveButtonProps } = useForm<ITask>();\n\n    const { selectProps: labelSelectProps } = useSelect<ITask>({\n        resource: "label",\n    });\n\n    const { selectProps: priorityProps } = useSelect<IPriority>({\n        resource: "priority",\n    });\n\n    const { selectProps: assigneProps } = useSelect<IAuthUser>({\n        resource: "users",\n        optionValue: "id",\n        optionLabel: "email",\n    });\n\n    const { selectProps: statusProps } = useSelect<IStatus>({\n        resource: "status",\n    });\n\n    return (\n        <Edit saveButtonProps={saveButtonProps}>\n            <Form {...formProps} wrapperCol={{ span: 12 }} layout="vertical">\n                <Form.Item label="Title" name="title">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Description" name="description">\n                    <Input />\n                </Form.Item>\n                <Form.Item label="Label" name="label">\n                    <Select {...labelSelectProps} />\n                </Form.Item>\n                <Form.Item label="Priority" name="priority">\n                    <Select {...priorityProps} />\n                </Form.Item>\n                <Form.Item label="Status" name="status">\n                    <Select {...statusProps} />\n                </Form.Item>\n                <Form.Item label="Assigne" name="users">\n                    <Select {...assigneProps} />\n                </Form.Item>\n            </Form>\n        </Edit>\n    );\n};\n\n')),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/edit_test.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"show-task"},"Show Task"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/task/show"',title:'"src/pages/task/show"'},'import { useShow, useOne } from "@refinedev/core";\nimport { Show, Typography, Tag, DateField } from "@refinedev/antd";\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from "interfaces";\n\nconst { Title, Text } = Typography;\n\nexport const TaskShow: React.FC = () => {\n    const { queryResult } = useShow<ITask>();\n    const { data, isLoading } = queryResult;\n    const record = data?.data;\n\n    const { data: assigned } = useOne<IAuthUser>({\n        resource: "users",\n        id: record?.users || "",\n    });\n\n    const { data: label } = useOne<ILabel>({\n        resource: "label",\n        id: record?.label || "",\n    });\n\n    const { data: priority } = useOne<IPriority>({\n        resource: "priority",\n        id: record?.priority || "",\n    });\n\n    const { data: status } = useOne<IStatus>({\n        resource: "status",\n        id: record?.status || "",\n    });\n\n    console.log(status?.data);\n\n    return (\n        <Show isLoading={isLoading}>\n            <Title level={5}>Task:</Title>\n            <Text>{record?.title || "-"}</Text>\n\n            <Title level={5}>Task Desciption:</Title>\n            <Text>{record?.description}</Text>\n\n            <Title level={5}>Assigned To:</Title>\n            <Text>\n                <Tag>{assigned?.data?.email ?? "-"}</Tag>\n            </Text>\n\n            <Title level={5}>Label:</Title>\n            <Text>\n                <Tag>{label?.data?.title ?? "-"}</Tag>\n            </Text>\n\n            <Title level={5}>Priority:</Title>\n            <Text>{priority?.data?.title ?? "-"}</Text>\n\n            <Title level={5}>Status:</Title>\n            <Text>{status?.data?.title ?? "-"}</Text>\n\n            <Title level={5}>Start Date:</Title>\n            <DateField format="DD/MM/YYYY" value={record?.start_time ?? "-"} />\n\n            <Title level={5}>Due Date:</Title>\n            <DateField format="DD/MM/YYYY" value={record?.end_time ?? "-"} />\n        </Show>\n    );\n};\n\n')),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/show.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"By using Refine's basic views such as ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/components/basic-views/create"},"create"),", ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/components/basic-views/edit/"},"edit")," and ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/docs/ui-frameworks/antd/components/basic-views/show/"},"show"),", we can now create tasks, edit these tasks and view their details."),(0,a.kt)("p",null,"Let's see how to add a dashboard page to our project together."),(0,a.kt)("h2",{id:"add-custom-chart"},"Add Custom Chart"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/task/pie.tsx"',title:'"src/components/task/pie.tsx"'},'import React from "react";\nimport { Pie } from "@ant-design/charts";\n\ninterface ChartProps {\n  data: {\n    type: any;\n    value: any;\n  }[];\n}\n\nexport const TaskChart: React.FC<ChartProps> = ({ data }) => {\n  var config = {\n    data: data,\n    angleField: "value",\n    colorField: "type",\n    radius: 0.9,\n    label: {\n      type: "inner",\n      offset: "-30%",\n      content: function content(_ref: any) {\n        var percent = _ref.percent;\n        return "".concat((percent * 100).toFixed(0), "%");\n      },\n      style: {\n        fontSize: 14,\n        textAlign: "center",\n      },\n    },\n    interactions: [{ type: "element-active" }],\n  };\n  return <Pie {...config} />;\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/pages/dashboard/index.tsx"',title:'"src/pages/dashboard/index.tsx"'},'import React from "react";\nimport { useList, useMany } from "@refinedev/core";\nimport { Row, Col, Card } from "@refinedev/antd";\nimport { ITask, ILabel, IPriority, IStatus, IAuthUser } from "interfaces";\nimport { TaskChart } from "components/task/pie";\nimport { groupBy } from "helper";\n\nexport const Dashboard = () => {\n    const taskList = useList<ITask>({\n        resource: "tasks",\n    });\n\n    const labelIds = taskList.data?.data.map((item) => item.label) ?? [];\n    const priorityIds = taskList.data?.data.map((item) => item.priority) ?? [];\n    const assignedIds = taskList.data?.data.map((item) => item.users) ?? [];\n    const statusIds = taskList.data?.data.map((item) => item.status) ?? [];\n\n    const { data: labels } = useMany<ILabel>({\n        resource: "label",\n        ids: labelIds || [],\n    });\n\n    const { data: priority } = useMany<IPriority>({\n        resource: "priority",\n        ids: priorityIds || [],\n    });\n\n    const { data: assigned } = useMany<IAuthUser>({\n        resource: "users",\n        ids: assignedIds || [],\n    });\n\n    const { data: status } = useMany<IStatus>({\n        resource: "status",\n        ids: statusIds || [],\n    });\n\n    return (\n        <Row gutter={[16, 16]}>\n            <Col xl={7} lg={12} md={24} sm={24} xs={24}>\n                <Card>\n                    <TaskChart\n                        data={\n                            labels?.data.map((i) => {\n                                return {\n                                    type: i.title,\n                                    value: groupBy(labelIds)[i.id],\n                                };\n                            }) ?? []\n                        }\n                    />\n                </Card>\n            </Col>\n            <Col xl={7} lg={12} md={24} sm={24} xs={24}>\n                <Card>\n                    <TaskChart\n                        data={\n                            priority?.data.map((i) => {\n                                return {\n                                    type: i.title,\n                                    value: groupBy(priorityIds)[i.id],\n                                };\n                            }) ?? []\n                        }\n                    />\n                </Card>\n            </Col>\n            <Col xl={7} lg={12} md={24} sm={24} xs={24}>\n                <Card>\n                    <TaskChart\n                        data={\n                            status?.data.map((i) => {\n                                return {\n                                    type: i.title,\n                                    value: groupBy(statusIds)[i.id],\n                                };\n                            }) ?? []\n                        }\n                    />\n                </Card>\n            </Col>\n            <Col xl={7} lg={12} md={24} sm={24} xs={24}>\n                <Card>\n                    <TaskChart\n                        data={\n                            assigned?.data.map((i) => {\n                                return {\n                                    type: i.email,\n                                    value: groupBy(assignedIds)[i.id],\n                                };\n                            }) ?? []\n                        }\n                    />\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\n')),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/dash_overview.png",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"Final version of our ",(0,a.kt)("inlineCode",{parentName:"p"},"<App.tsx/>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Refine } from "@refinedev/core";\nimport {\n    notificationProvider,\n    Layout,\n    ErrorComponent,\n} from "@refinedev/antd";\nimport routerProvider from "@refinedev/react-router-v6";\nimport { dataProvider } from "@refinedev/supabase";\nimport authProvider from "./authProvider";\nimport { supabaseClient } from "utility";\n\nimport "@refinedev/antd/dist/reset.css";\n\nimport { UserList } from "./pages/user";\nimport { TaskList, TaskShow, TaskCreate, EditTask } from "./pages/task";\nimport { Dashboard } from "./pages/dashboard";\nimport { Login } from "./pages/login";\nimport { Signup } from "./pages/signup";\n\nfunction App() {\n    return (\n        <Refine\n            dataProvider={dataProvider(supabaseClient)}\n            authProvider={authProvider}\n            DashboardPage={Dashboard}\n            LoginPage={Login}\n            routerProvider={{\n                ...routerProvider,\n                routes: [\n                    {\n                        element: <Signup />,\n                        path: "/signup",\n                    },\n                ] as typeof routerProvider.routes,\n            }}\n            resources={[\n                {\n                    name: "users",\n                    list: UserList,\n                },\n                {\n                    name: "tasks",\n                    list: TaskList,\n                    edit: EditTask,\n                    create: TaskCreate,\n                    show: TaskShow,\n                },\n            ]}\n            notificationProvider={notificationProvider}\n            Layout={Layout}\n            catchAll={<ErrorComponent />}\n        />\n    );\n}\n\nexport default App;\n\n')),(0,a.kt)("p",null,"Our project is done. Lets see how its look like."),(0,a.kt)("h2",{id:"overview-project"},"Overview Project"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Overview")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/overview-project.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Task Filter")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/filter.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Dashboard Page")),(0,a.kt)("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2021-11-12-issue-tracker-refine/dashboard.gif",alt:"overview"}),(0,a.kt)("br",null),(0,a.kt)("p",null,"As you can see, we made a simple and short task manager application using refine on our front end and using its data-provider. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/examples/blog-issue-tracker"},"Here is repo")," "),(0,a.kt)("p",null,"For more information about Refine: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine"},"Refine Github Page")),(0,a.kt)("p",null,"For other examples and articles that will interest you with refine:  ",(0,a.kt)("a",{parentName:"p",href:"https://refine.dev/blog/"},"https://refine.dev/blog/")),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(m,{path:"blog-issue-tracker",mdxType:"CodeSandboxExample"}))}f.isMDXComponent=!0}}]);