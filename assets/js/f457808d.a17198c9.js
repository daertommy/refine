"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6066,2933,30950,21977,31968],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},36379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={},s=void 0,p={unversionedId:"api-reference/antd/hooks/list/basic-usage-live-preview",id:"api-reference/antd/hooks/list/basic-usage-live-preview",title:"basic-usage-live-preview",description:"",source:"@site/docs/api-reference/antd/hooks/list/basic-usage-live-preview.md",sourceDirName:"api-reference/antd/hooks/list",slug:"/api-reference/antd/hooks/list/basic-usage-live-preview",permalink:"/docs/api-reference/antd/hooks/list/basic-usage-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/list/basic-usage-live-preview.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1700830153,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{}},d={},c=[],u={toc:c};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=420px",live:!0,url:"http://localhost:3000/products",previewHeight:"420px"},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useSimpleList } from "@refinedev/antd";\nimport { Typography, List } from "antd";\n\nconst { Text } = Typography;\n\ninterface IProduct {\n    id: number;\n    name: string;\n    description: string;\n    price: string;\n}\n\nconst ProductList: React.FC = () => {\n    const { listProps } = useSimpleList<IProduct>();\n\n    return <List {...listProps} renderItem={renderItem} />;\n};\n\nconst renderItem = (item: IProduct) => {\n    const { id, name, description, price } = item;\n\n    return (\n        <List.Item actions={[<Text key={id}>{price}</Text>]}>\n            <List.Item.Meta title={name} description={description} />\n        </List.Item>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}m.isMDXComponent=!0},82062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={},s=void 0,p={unversionedId:"api-reference/antd/hooks/list/filtering-live-preview",id:"api-reference/antd/hooks/list/filtering-live-preview",title:"filtering-live-preview",description:"",source:"@site/docs/api-reference/antd/hooks/list/filtering-live-preview.md",sourceDirName:"api-reference/antd/hooks/list",slug:"/api-reference/antd/hooks/list/filtering-live-preview",permalink:"/docs/api-reference/antd/hooks/list/filtering-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/list/filtering-live-preview.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1700830153,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{}},d={},c=[],u={toc:c};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=420px",live:!0,url:"http://localhost:3000/products",previewHeight:"420px"},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useSimpleList } from "@refinedev/antd";\nimport { Typography, List, Input } from "antd";\n\nconst { Text } = Typography;\n\ninterface IProduct {\n    id: number;\n    name: string;\n    description: string;\n    price: string;\n}\n\nconst ProductList: React.FC = () => {\n    const { listProps, setFilters } = useSimpleList<IProduct>({\n        filters: {\n            initial: [\n                {\n                    field: "name",\n                    operator: "contains",\n                    value: "Awesome",\n                },\n            ],\n        },\n    });\n\n    return (\n        <div>\n            <Input.Search\n                placeholder="Search by name"\n                onChange={(e) => {\n                    setFilters([\n                        {\n                            field: "name",\n                            operator: "contains",\n                            value: e.target.value,\n                        },\n                    ]);\n                }}\n            />\n            <List {...listProps} renderItem={renderItem} />\n        </div>\n    );\n};\n\nconst renderItem = (item: IProduct) => {\n    const { id, name, description, price } = item;\n\n    return (\n        <List.Item actions={[<Text key={id}>{price}</Text>]}>\n            <List.Item.Meta title={name} description={description} />\n        </List.Item>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}m.isMDXComponent=!0},8938:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={},s=void 0,p={unversionedId:"api-reference/antd/hooks/list/search-live-preview",id:"api-reference/antd/hooks/list/search-live-preview",title:"search-live-preview",description:"",source:"@site/docs/api-reference/antd/hooks/list/search-live-preview.md",sourceDirName:"api-reference/antd/hooks/list",slug:"/api-reference/antd/hooks/list/search-live-preview",permalink:"/docs/api-reference/antd/hooks/list/search-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/list/search-live-preview.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1700830153,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{}},d={},c=[],u={toc:c};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=420px",live:!0,url:"http://localhost:3000/products",previewHeight:"420px"},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useSimpleList } from "@refinedev/antd";\nimport { Typography, List, Form, Input, Button } from "antd";\nimport { HttpError } from "@refinedev/core";\n\nconst { Text } = Typography;\n\ninterface IProduct {\n    id: number;\n    name: string;\n    description: string;\n    price: string;\n}\n\ninterface ISearch {\n    name: string;\n    description: string;\n}\n\nconst ProductList: React.FC = () => {\n    const { listProps, searchFormProps } = useSimpleList<\n        IProduct,\n        HttpError,\n        ISearch\n    >({\n        onSearch: (values) => {\n            return [\n                {\n                    field: "name",\n                    operator: "contains",\n                    value: values.name,\n                },\n                {\n                    field: "description",\n                    operator: "contains",\n                    value: values.description,\n                },\n            ];\n        },\n    });\n\n    return (\n        <div>\n            <Form {...searchFormProps} layout="inline">\n                <Form.Item name="name">\n                    <Input placeholder="Search by name" />\n                </Form.Item>\n                <Form.Item name="description">\n                    <Input placeholder="Search by description" />\n                </Form.Item>\n                <Button type="primary" onClick={searchFormProps.form?.submit}>\n                    Search\n                </Button>\n            </Form>\n            <List {...listProps} renderItem={renderItem} />\n        </div>\n    );\n};\n\nconst renderItem = (item: IProduct) => {\n    const { id, name, description, price } = item;\n\n    return (\n        <List.Item actions={[<Text key={id}>{price}</Text>]}>\n            <List.Item.Meta title={name} description={description} />\n        </List.Item>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}m.isMDXComponent=!0},46377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={},s=void 0,p={unversionedId:"api-reference/antd/hooks/list/sorting-live-preview",id:"api-reference/antd/hooks/list/sorting-live-preview",title:"sorting-live-preview",description:"",source:"@site/docs/api-reference/antd/hooks/list/sorting-live-preview.md",sourceDirName:"api-reference/antd/hooks/list",slug:"/api-reference/antd/hooks/list/sorting-live-preview",permalink:"/docs/api-reference/antd/hooks/list/sorting-live-preview",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/list/sorting-live-preview.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1700830153,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{}},d={},c=[],u={toc:c};function m(e){var{components:t}=e,n=o(e,["components"]);return(0,r.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},u,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/products previewHeight=420px",live:!0,url:"http://localhost:3000/products",previewHeight:"420px"},'setInitialRoutes(["/products"]);\n\n// visible-block-start\nimport { useSimpleList } from "@refinedev/antd";\nimport { Typography, List } from "antd";\n\nconst { Text } = Typography;\n\ninterface IProduct {\n    id: number;\n    name: string;\n    description: string;\n    price: string;\n}\n\nconst ProductList: React.FC = () => {\n    const { listProps } = useSimpleList<IProduct>({\n        // highlight-start\n        sorters: {\n            initial: [\n                {\n                    field: "name",\n                    order: "desc",\n                },\n            ],\n        },\n        // highlight-end\n    });\n\n    return <List {...listProps} renderItem={renderItem} />;\n};\n\nconst renderItem = (item: IProduct) => {\n    const { id, name, description, price } = item;\n\n    return (\n        <List.Item actions={[<Text key={id}>{price}</Text>]}>\n            <List.Item.Meta title={name} description={description} />\n        </List.Item>\n    );\n};\n// visible-block-end\n\nsetRefineProps({\n    resources: [\n        {\n            name: "products",\n            list: ProductList,\n        },\n    ],\n});\n\nrender(<RefineAntdDemo />);\n')))}m.isMDXComponent=!0},13190:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>v,frontMatter:()=>c,metadata:()=>m,toc:()=>f});n(67294);var r=n(3905),a=n(36379),i=n(46377),o=n(82062),l=n(8938);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function d(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const c={id:"useSimpleList",title:"useSimpleList",source:"https://github.com/refinedev/refine/blob/master/packages/antd/src/hooks/list/useSimpleList/useSimpleList.ts"},u=void 0,m={unversionedId:"api-reference/antd/hooks/list/useSimpleList",id:"api-reference/antd/hooks/list/useSimpleList",title:"useSimpleList",description:"By using useSimpleList, you can get properties that are compatible with the Ant Design's ` component. All features such as sorting, filtering, and pagination come out of the box. useSimpleList uses useTable` under the hood for the fetch.",source:"@site/docs/api-reference/antd/hooks/list/useSimpleList.md",sourceDirName:"api-reference/antd/hooks/list",slug:"/api-reference/antd/hooks/list/useSimpleList",permalink:"/docs/api-reference/antd/hooks/list/useSimpleList",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/api-reference/antd/hooks/list/useSimpleList.md",tags:[],version:"current",lastUpdatedBy:"Alican Erdurmaz",lastUpdatedAt:1700830153,formattedLastUpdatedAt:"Nov 24, 2023",frontMatter:{id:"useSimpleList",title:"useSimpleList",source:"https://github.com/refinedev/refine/blob/master/packages/antd/src/hooks/list/useSimpleList/useSimpleList.ts"},sidebar:"someSidebar",previous:{title:"useImport",permalink:"/docs/api-reference/antd/hooks/import/useImport"},next:{title:"useEditableTable",permalink:"/docs/api-reference/antd/hooks/table/useEditableTable"}},h={},f=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Search",id:"search",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>resource</code>",id:"resource",level:3},{value:"<code>pagination.current</code>",id:"paginationcurrent",level:3},{value:"<code>pagination.pageSize</code>",id:"paginationpagesize",level:3},{value:"<code>pagination.mode</code>",id:"paginationmode",level:3},{value:"<code>sorters.initial</code>",id:"sortersinitial",level:3},{value:"<code>sorters.permanent</code>",id:"sorterspermanent",level:3},{value:"<code>filters.initial</code>",id:"filtersinitial",level:3},{value:"<code>filters.permanent</code>",id:"filterspermanent",level:3},{value:"<code>filters.defaultBehavior</code>",id:"filtersdefaultbehavior",level:3},{value:"<code>syncWithLocation</code>",id:"syncwithlocation",level:3},{value:"<code>queryOptions</code>",id:"queryoptions",level:3},{value:"<code>meta</code>",id:"meta",level:3},{value:"<code>dataProviderName</code>",id:"dataprovidername",level:3},{value:"<code>successNotification</code>",id:"successnotification",level:3},{value:"<code>errorNotification</code>",id:"errornotification",level:3},{value:"<code>liveMode</code>",id:"livemode",level:3},{value:"<code>onLiveEvent</code>",id:"onliveevent",level:3},{value:"<code>liveParams</code>",id:"liveparams",level:3},{value:"<code>onSearch</code>",id:"onsearch",level:3},{value:"<del><code>initialCurrent</code></del>",id:"initialcurrent",level:3},{value:"<del><code>initialPageSize</code></del>",id:"initialpagesize",level:3},{value:"<del><code>hasPagination</code></del>",id:"haspagination",level:3},{value:"<del><code>initialSorter</code></del>",id:"initialsorter",level:3},{value:"<del><code>permanentSorter</code></del>",id:"permanentsorter",level:3},{value:"<del><code>initialFilter</code></del>",id:"initialfilter",level:3},{value:"<del><code>permanentFilter</code></del>",id:"permanentfilter",level:3},{value:"<del><code>defaultSetFilterBehavior</code></del>",id:"defaultsetfilterbehavior",level:3},{value:"<code>overtimeOptions</code>",id:"overtimeoptions",level:3},{value:"Return Values",id:"return-values",level:2},{value:"<code>queryResult</code>",id:"queryresult",level:3},{value:"<code>searchFormProps</code>",id:"searchformprops",level:3},{value:"<code>listProps</code>",id:"listprops",level:3},{value:"<code>dataSource</code>",id:"datasource",level:4},{value:"<code>loading</code>",id:"loading",level:4},{value:"<code>pagination</code>",id:"pagination-1",level:4},{value:"<code>sorters</code>",id:"sorters",level:3},{value:"<code>setSorters</code>",id:"setsorters",level:3},{value:"<code>filters</code>",id:"filters",level:3},{value:"<code>setFilters</code>",id:"setfilters",level:3},{value:"<code>current</code>",id:"current",level:3},{value:"<code>setCurrent</code>",id:"setcurrent",level:3},{value:"<code>pageSize</code>",id:"pagesize",level:3},{value:"<code>setPageSize</code>",id:"setpagesize",level:3},{value:"<code>pageCount</code>",id:"pagecount",level:3},{value:"<code>createLinkForSyncWithLocation</code>",id:"createlinkforsyncwithlocation",level:3},{value:"<code>overtime</code>",id:"overtime",level:3},{value:"<del><code>sorter</code></del>",id:"sorter",level:3},{value:"<del><code>setSorter</code></del>",id:"setsorter",level:3},{value:"API",id:"api",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values-1",level:3}],k=(g="PropsTable",function(e){return console.warn("Component "+g+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var g;const N={toc:f};function v(e){var{components:t}=e,n=d(e,["components"]);return(0,r.kt)("wrapper",p(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){s(e,t,n[t])}))}return e}({},N,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By using ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList"),", you can get properties that are compatible with the Ant Design's ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/list/"},(0,r.kt)("inlineCode",{parentName:"a"},"<List>"))," component. All features such as sorting, filtering, and pagination come out of the box. ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable"))," under the hood for the fetch."),(0,r.kt)("p",null,"For all the other features, you can refer to the Ant Design's ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/list/"},(0,r.kt)("inlineCode",{parentName:"a"},"<List>"))," documentation."),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"In the following example, we will show how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," to list the products."),(0,r.kt)("p",null,"It returns ",(0,r.kt)("inlineCode",{parentName:"p"},"listProps")," which is compatible with the Ant Design's ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>")," component. By default, it reads the ",(0,r.kt)("a",{parentName:"p",href:"#resource"},(0,r.kt)("inlineCode",{parentName:"a"},"resource"))," from the current URL."),(0,r.kt)(a.default,{mdxType:"BasicUsageLivePreview"}),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"This feature comes out of the box with the ",(0,r.kt)("inlineCode",{parentName:"p"},"listProps.pagination"),". It generates the pagination links for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>")," component instead of react state and overrides ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.itemRender")," value."),(0,r.kt)("p",null,"It also syncs the pagination state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)("p",null,"If you want to make a change in the pagination of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>"),". You should pass the pagination object of the ",(0,r.kt)("inlineCode",{parentName:"p"},"listProps")," to the pagination property of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>")," as below. You can override the values of the pagination object as your need."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// ...\nconst { listProps } = useSimpleList<IProduct>();\n\n// ...\n\nreturn (\n  <AntdList\n    {...listProps}\n    renderItem={renderItem}\n    // highlight-start\n    pagination={{\n      ...listProps.pagination,\n      position: "top",\n      size: "small",\n    }}\n    // highlight-end\n  />\n);\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'By default, pagination happens on the server side. If you want to do pagination handling on the client side, you can pass the pagination.mode property and set it to "client". You can also disable the pagination by setting it to "off".')),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," hook supports the sorting feature. You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," property to the hook to set the initial and permanent sorting state."),(0,r.kt)("p",null,"It also syncs the sorting state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)(i.default,{mdxType:"SortingLivePreview"}),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," hook supports the filtering feature. You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," property to the hook to set the initial and permanent filtering state and you change the filtering state by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setFilter")," function."),(0,r.kt)("p",null,"It also syncs the filtering state with the URL if you enable the ",(0,r.kt)("a",{parentName:"p",href:"#syncWithLocation"},(0,r.kt)("inlineCode",{parentName:"a"},"syncWithLocation")),"."),(0,r.kt)(o.default,{mdxType:"FilteringLivePreview"}),(0,r.kt)("h2",{id:"search"},"Search"),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("a",{parentName:"p",href:"#onsearch"},(0,r.kt)("inlineCode",{parentName:"a"},"onSearch"))," property and the ",(0,r.kt)("a",{parentName:"p",href:"#searchformprops"},(0,r.kt)("inlineCode",{parentName:"a"},"searchFormProps"))," return value to make a custom filter form. ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," is a function that is called when the form is submitted. ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps")," is a property that is passed to the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/form"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," component."),(0,r.kt)(l.default,{mdxType:"SearchLivePreview"}),(0,r.kt)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This feature is only available if you use a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},"Live Provider"),".")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," hook is mounted, it will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"liveProvider")," with some parameters such as ",(0,r.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," etc. It is useful when you want to subscribe to live updates."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"liveProvider")," documentation ","\u2192"))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"resource"},(0,r.kt)("inlineCode",{parentName:"h3"},"resource")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," passes the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as a param. This parameter is usually used as an API endpoint path. It all depends on how to handle the resources in your ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),"."),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/data-provider#creating-a-data-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"creating a data provider"))," documentation for an example of how resources are handled."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," value is inferred from the current route where the component or the hook is used. It can be overridden by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,r.kt)("p",null,"The use case for overriding the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," prop:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can list a ",(0,r.kt)("inlineCode",{parentName:"li"},"category")," from the ",(0,r.kt)("inlineCode",{parentName:"li"},"<ProductList>")," page.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { HttpError } from "@refinedev/core";\nimport { useSimpleList } from "@refinedev/antd";\n\ninterface IProduct {\n  id: number;\n  name: string;\n  description: string;\n  price: string;\n}\n\ninterface ICategory {\n  id: number;\n  name: string;\n}\n\nexport const ProductList: React.FC = () => {\n  const { tableQueryResult: productsQueryResult } = useSimpleList<IProduct, HttpError>();\n\n  const { tableQueryResult: categoriesQueryResult } = useSimpleList<ICategory, HttpError>({\n    resource: "categories",\n  });\n\n  return <div>{/* ... */}</div>;\n};\n')),(0,r.kt)("p",null,"Also, you can give a URL path to the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  resource: "categories/subcategory", // <BASE_URL_FROM_DATA_PROVIDER>/categories/subcategory\n});\n')),(0,r.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#identifier"},(0,r.kt)("inlineCode",{parentName:"a"},"identifier")," of the ",(0,r.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,r.kt)("h3",{id:"paginationcurrent"},(0,r.kt)("inlineCode",{parentName:"h3"},"pagination.current")),(0,r.kt)("p",null,"Sets the initial value of the page index. It is ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  pagination: {\n    current: 2,\n  },\n});\n")),(0,r.kt)("h3",{id:"paginationpagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"pagination.pageSize")),(0,r.kt)("p",null,"Sets the initial value of the page size. It is ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  pagination: {\n    pageSize: 20,\n  },\n});\n")),(0,r.kt)("h3",{id:"paginationmode"},(0,r.kt)("inlineCode",{parentName:"h3"},"pagination.mode")),(0,r.kt)("p",null,"It can be ",(0,r.kt)("inlineCode",{parentName:"p"},'"off"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"server"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"client"'),". It is ",(0,r.kt)("inlineCode",{parentName:"p"},'"server"')," by default."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},'"off":')," Pagination is disabled. All records will be fetched."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},'"client":')," Pagination is done on the client side. All records will be fetched and then the records will be paginated on the client side."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},'"server":'),": Pagination is done on the server side. Records will be fetched by using the ",(0,r.kt)("inlineCode",{parentName:"li"},"current")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"pageSize")," values.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  pagination: {\n    mode: "client",\n  },\n});\n')),(0,r.kt)("h3",{id:"sortersinitial"},(0,r.kt)("inlineCode",{parentName:"h3"},"sorters.initial")),(0,r.kt)("p",null,"Sets the initial value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initial")," is not permanent. It will be cleared when the user changes the sorter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters.permanent")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  sorters: {\n    initial: [\n      {\n        field: "name",\n        order: "asc",\n      },\n    ],\n  },\n});\n')),(0,r.kt)("h3",{id:"sorterspermanent"},(0,r.kt)("inlineCode",{parentName:"h3"},"sorters.permanent")),(0,r.kt)("p",null,"Sets the permanent value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanent")," is permanent and unchangeable. It will not be cleared when the user changes the sorter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters.initial")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  sorters: {\n    permanent: [\n      {\n        field: "name",\n        order: "asc",\n      },\n    ],\n  },\n});\n')),(0,r.kt)("h3",{id:"filtersinitial"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters.initial")),(0,r.kt)("p",null,"Sets the initial value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initial")," is not permanent. It will be cleared when the user changes the filter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters.permanent")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  filters: {\n    initial: [\n      {\n        field: "name",\n        operator: "contains",\n        value: "Foo",\n      },\n    ],\n  },\n});\n')),(0,r.kt)("h3",{id:"filterspermanent"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters.permanent")),(0,r.kt)("p",null,"Sets the permanent value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanent")," is permanent and unchangeable. It will not be cleared when the user changes the filter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"filters.initial")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  filters: {\n    permanent: [\n      {\n        field: "name",\n        operator: "contains",\n        value: "Foo",\n      },\n    ],\n  },\n});\n')),(0,r.kt)("h3",{id:"filtersdefaultbehavior"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters.defaultBehavior")),(0,r.kt)("p",null,"The filtering behavior can be set to either ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),". It is ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," by default."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"'),", it will merge the new filter with the existing filters. This means that if the new filter has the same column as an existing filter, the new filter will replace the existing filter for that column. If the new filter has a different column than the existing filters, it will be added to the existing filters.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),", it will replace all existing filters with the new filter. This means that any existing filters will be removed and only the new filter will be applied to the table."))),(0,r.kt)("p",null,"You can also override the default value by using the second parameter of the ",(0,r.kt)("a",{parentName:"p",href:"#setfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"setFilters"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  filters: {\n    defaultBehavior: "replace",\n  },\n});\n')),(0,r.kt)("h3",{id:"syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"h3"},"syncWithLocation")),(0,r.kt)("p",null,"When you use the syncWithLocation feature, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList"),"'s state (e.g. sort order, filters, pagination) is automatically encoded in the query parameters of the URL, and when the URL changes, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," state is automatically updated to match. This makes it easy to share list states across different routes or pages and allows users to bookmark or share links to specific table views. ",(0,r.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,r.kt)("p",null,"Also, you can set this value globally on the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/components/refine-config#syncwithlocation"},(0,r.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  syncWithLocation: true,\n});\n")),(0,r.kt)("h3",{id:"queryoptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"queryOptions")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," uses the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/useTable/"},(0,r.kt)("inlineCode",{parentName:"a"},"useTable"))," hook to fetch data. You can pass the ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"queryOptions"))," to it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  queryOptions: {\n    retry: 3,\n  },\n});\n")),(0,r.kt)("h3",{id:"meta"},(0,r.kt)("inlineCode",{parentName:"h3"},"meta")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,r.kt)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides-concepts/general-concepts/#meta-concept"},(0,r.kt)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation for more information ","\u2192"))),(0,r.kt)("p",null,"In the following example, we pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  // highlight-start\n  meta: {\n    headers: { "x-meta-data": "true" },\n  },\n  // highlight-end\n});\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    sorters,\n    filters,\n    // highlight-next-line\n    meta,\n  }) => {\n    // highlight-next-line\n    const headers = meta?.headers ?? {};\n    const url = `${apiUrl}/${resource}`;\n\n    //...\n    //...\n\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers });\n\n    return {\n      data,\n    };\n  },\n  //...\n};\n')),(0,r.kt)("h3",{id:"dataprovidername"},(0,r.kt)("inlineCode",{parentName:"h3"},"dataProviderName")),(0,r.kt)("p",null,"If there is more than one ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProviderName")," prop. This is useful when you have a different data provider for different resources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  dataProviderName: "second-data-provider",\n});\n')),(0,r.kt)("h3",{id:"successnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"successNotification")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data is fetched successfully, ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. With this prop, you can customize the success notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: "Success with no errors",\n      type: "success",\n    };\n  },\n});\n')),(0,r.kt)("h3",{id:"errornotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"errorNotification")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/notification-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data fetching is failed, ",(0,r.kt)("inlineCode",{parentName:"p"},"useSimpleList")," will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show an error notification. With this prop, you can customize the error notification."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: "Error",\n      type: "error",\n    };\n  },\n});\n')),(0,r.kt)("h3",{id:"livemode"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveMode")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"Determines whether to update data automatically (",(0,r.kt)("inlineCode",{parentName:"p"},'"auto"'),") or not (",(0,r.kt)("inlineCode",{parentName:"p"},'"manual"'),") if a related live event is received. It can be used to update and show data in Realtime throughout your app."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#livemode"},"Live / Realtime documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  liveMode: "auto",\n});\n')),(0,r.kt)("h3",{id:"onliveevent"},(0,r.kt)("inlineCode",{parentName:"h3"},"onLiveEvent")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"The callback function is executed when new events from a subscription have arrived."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n")),(0,r.kt)("h3",{id:"liveparams"},(0,r.kt)("inlineCode",{parentName:"h3"},"liveParams")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"Params to pass to liveProvider's ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/providers/live-provider/#subscribe"},"subscribe")," method."),(0,r.kt)("h3",{id:"onsearch"},(0,r.kt)("inlineCode",{parentName:"h3"},"onSearch")),(0,r.kt)("p",null,"When ",(0,r.kt)("a",{parentName:"p",href:"#searchformprops"},(0,r.kt)("inlineCode",{parentName:"a"},"searchFormProps.onFinish"))," is called, the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function is called with the values of the form. The ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function should return ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters | Promise<CrudFilters>")),". When the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function is called, the current page will be set to 1."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," is useful when you want to filter the data with multiple fields by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form>")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// ...\n\nconst { searchFormProps, listProps } = useSimpleList({\n  onSearch: (values) => {\n    return [\n      {\n        field: "name",\n        operator: "contains",\n        value: values.name,\n      },\n      {\n        field: "description",\n        operator: "contains",\n        value: values.description,\n      },\n    ];\n  },\n});\n\n// ...\n\nreturn (\n  <div>\n    <Form {...searchFormProps} layout="inline">\n      <Form.Item name="name">\n        <Input placeholder="Search by name" />\n      </Form.Item>\n      <Form.Item name="description">\n        <Input placeholder="Search by description" />\n      </Form.Item>\n      <Button type="primary" onClick={searchFormProps.form?.submit}>\n        Search\n      </Button>\n    </Form>\n    <AntdList {...listProps} renderItem={renderItem} />\n  </div>\n);\n')),(0,r.kt)("h3",{id:"initialcurrent"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"initialCurrent"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.current")," instead.")),(0,r.kt)("p",null,"Sets the initial value of the page index. It is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  initialCurrent: 2,\n});\n")),(0,r.kt)("h3",{id:"initialpagesize"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"initialPageSize"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.pageSize")," instead.")),(0,r.kt)("p",null,"Sets the initial value of the page size. It is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"10")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  initialPageSize: 20,\n});\n")),(0,r.kt)("h3",{id:"haspagination"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"hasPagination"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.mode")," instead.")),(0,r.kt)("p",null,"Determines whether to use server-side pagination or not. It is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSimpleList({\n  hasPagination: false,\n});\n")),(0,r.kt)("h3",{id:"initialsorter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"initialSorter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters.initial")," instead.")),(0,r.kt)("p",null,"Sets the initial value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," is not permanent. It will be cleared when the user changes the sorter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  initialSorter: [\n    {\n      field: "name",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.kt)("h3",{id:"permanentsorter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"permanentSorter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters.permanent")," instead.")),(0,r.kt)("p",null,"Sets the permanent value of the sorter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentSorter")," is permanent and unchangeable. It will not be cleared when the user changes the sorter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialSorter")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  permanentSorter: [\n    {\n      field: "name",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.kt)("h3",{id:"initialfilter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"initialFilter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"filters.initial")," instead.")),(0,r.kt)("p",null,"Sets the initial value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," is not permanent. It will be cleared when the user changes the filter. If you want to set a permanent value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  initialFilter: [\n    {\n      field: "name",\n      operator: "contains",\n      value: "Foo",\n    },\n  ],\n});\n')),(0,r.kt)("h3",{id:"permanentfilter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"permanentFilter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"filters.permanent")," instead.")),(0,r.kt)("p",null,"Sets the permanent value of the filter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"permanentFilter")," is permanent and unchangeable. It will not be cleared when the user changes the filter. If you want to set a temporary value, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilter")," prop."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  permanentFilter: [\n    {\n      field: "name",\n      operator: "contains",\n      value: "Foo",\n    },\n  ],\n});\n')),(0,r.kt)("h3",{id:"defaultsetfilterbehavior"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"defaultSetFilterBehavior"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"filters.defaultBehavior")," instead.")),(0,r.kt)("p",null,"The filtering behavior can be set to either ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),". It is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," by default."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"merge"'),", it will merge the new filter with the existing filters. This means that if the new filter has the same column as an existing filter, the new filter will replace the existing filter for that column. If the new filter has a different column than the existing filters, it will be added to the existing filters.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When the filter behavior is set to ",(0,r.kt)("inlineCode",{parentName:"p"},'"replace"'),", it will replace all existing filters with the new filter. This means that any existing filters will be removed and only the new filter will be applied to the table."))),(0,r.kt)("p",null,"You can also override the default value by using the second parameter of the ",(0,r.kt)("a",{parentName:"p",href:"#setfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"setFilters"))," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSimpleList({\n  defaultSetFilterBehavior: "replace",\n});\n')),(0,r.kt)("h3",{id:"overtimeoptions"},(0,r.kt)("inlineCode",{parentName:"h3"},"overtimeOptions")),(0,r.kt)("p",null,"If you want the loading overtime for the request, you can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful if you want to show a loading indicator when the request takes too long.\n",(0,r.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,r.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,r.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useSimpleList({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,r.kt)("h2",{id:"return-values"},"Return Values"),(0,r.kt)("h3",{id:"queryresult"},(0,r.kt)("inlineCode",{parentName:"h3"},"queryResult")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"queryResult")," is the returned values from ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,r.kt)("h3",{id:"searchformprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"searchFormProps")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps")," returns the ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,r.kt)("inlineCode",{parentName:"a"},"<Form>"))," instance of Ant Design. When ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps.onFinish")," is called, it will trigger ",(0,r.kt)("a",{parentName:"p",href:"#onsearch"},(0,r.kt)("inlineCode",{parentName:"a"},"onSearch"))," function.\nYou can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"searchFormProps.form.submit")," to submit the form manually."),(0,r.kt)("p",null,"It's useful when you want to create a filter form for your ",(0,r.kt)("inlineCode",{parentName:"p"},"<List>"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// ...\n\nconst { searchFormProps, listProps } = useSimpleList({\n  onSearch: (values) => {\n    return [\n      {\n        field: "name",\n        operator: "contains",\n        value: values.name,\n      },\n      {\n        field: "description",\n        operator: "contains",\n        value: values.description,\n      },\n    ];\n  },\n});\n\n// ...\n\nreturn (\n  <div>\n    <Form {...searchFormProps} layout="inline">\n      <Form.Item name="name">\n        <Input placeholder="Search by name" />\n      </Form.Item>\n      <Form.Item name="description">\n        <Input placeholder="Search by description" />\n      </Form.Item>\n      <Button type="primary" onClick={searchFormProps.form?.submit}>\n        Search\n      </Button>\n    </Form>\n    <AntdList {...listProps} renderItem={renderItem} />\n  </div>\n);\n')),(0,r.kt)("h3",{id:"listprops"},(0,r.kt)("inlineCode",{parentName:"h3"},"listProps")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"listProps")," is an object that contains compatible props for Ant Design ","[",(0,r.kt)("inlineCode",{parentName:"p"},"<List>"),"][antd list]"," component."),(0,r.kt)("h4",{id:"datasource"},(0,r.kt)("inlineCode",{parentName:"h4"},"dataSource")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," contains the data to be displayed in the list. Values are fetched with the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/hooks/data/useList/"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," hook."),(0,r.kt)("h4",{id:"loading"},(0,r.kt)("inlineCode",{parentName:"h4"},"loading")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"loading")," indicates whether the data is being fetched or not."),(0,r.kt)("h4",{id:"pagination-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"pagination")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," returns the pagination configuration values(pageSize, current, position, etc.)."),(0,r.kt)("h3",{id:"sorters"},(0,r.kt)("inlineCode",{parentName:"h3"},"sorters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," is the current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,r.kt)("h3",{id:"setsorters"},(0,r.kt)("inlineCode",{parentName:"h3"},"setSorters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setSorters")," is a function to set the current",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"}," (sorters: CrudSorting) => void;\n")),(0,r.kt)("h3",{id:"filters"},(0,r.kt)("inlineCode",{parentName:"h3"},"filters")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"filters")," is the current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,r.kt)("h3",{id:"setfilters"},(0,r.kt)("inlineCode",{parentName:"h3"},"setFilters")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"((filters: CrudFilters, behavior?: SetFilterBehavior) => void) & ((setter: (prevFilters: CrudFilters) => CrudFilters) => void)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setFilters")," is a function to set the current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},"filters state"),"."),(0,r.kt)("h3",{id:"current"},(0,r.kt)("inlineCode",{parentName:"h3"},"current")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"current")," is the current page index state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"setcurrent"},(0,r.kt)("inlineCode",{parentName:"h3"},"setCurrent")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setCurrent")," is a function to set the current page index state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"pagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"pageSize")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," is the current page size state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"setpagesize"},(0,r.kt)("inlineCode",{parentName:"h3"},"setPageSize")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"React.Dispatch<React.SetStateAction<number>> | undefined;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setPageSize")," is a function to set the current page size state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"pagecount"},(0,r.kt)("inlineCode",{parentName:"h3"},"pageCount")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pageCount")," is the total page count state. If pagination is disabled, it will be ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"createlinkforsyncwithlocation"},(0,r.kt)("inlineCode",{parentName:"h3"},"createLinkForSyncWithLocation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"(params: SyncWithLocationParams) => string;\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createLinkForSyncWithLocation")," is a function that creates accessible links for ",(0,r.kt)("inlineCode",{parentName:"p"},"syncWithLocation"),". It takes an ","[SyncWithLocationParams][syncwithlocationparams]"," as parameters."),(0,r.kt)("h3",{id:"overtime"},(0,r.kt)("inlineCode",{parentName:"h3"},"overtime")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,r.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useSimpleList();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,r.kt)("h3",{id:"sorter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"sorter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sorter")," is the current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,r.kt)("h3",{id:"setsorter"},(0,r.kt)("del",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"del"},"setSorter"))),(0,r.kt)("admonition",{title:"Deprecated",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"setSorters")," instead.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setSorter")," is a function to set current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},"sorters state"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"}," (sorters: CrudSorting) => void;\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(k,{module:"@refinedev/antd/useSimpleList",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TSearchVariables"),(0,r.kt)("td",{parentName:"tr",align:null},"Antd form values"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{}"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))))),(0,r.kt)("h3",{id:"return-values-1"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"searchFormProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant design Form props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"Form")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"listProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant design List props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/list/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"List")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"totalPage"),(0,r.kt)("td",{parentName:"tr",align:null},"Total page count (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"current"),(0,r.kt)("td",{parentName:"tr",align:null},"Current page index state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setCurrent"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the current (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Current pageSize state (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setPageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that changes the pageSize. (returns ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if pagination is disabled)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.Dispatch<React.SetStateAction<number>>")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setSorters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorters state."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorters: CrudSorting) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"sorter")),(0,r.kt)("td",{parentName:"tr",align:null},"Current sorting state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"setSorter")),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new sorters state."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(sorters: CrudSorting) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Current filters state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/api-reference/core/interfaceReferences#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setFilters"),(0,r.kt)("td",{parentName:"tr",align:null},"A function that accepts a new filter state"),(0,r.kt)("td",{parentName:"tr",align:null},"- ",(0,r.kt)("inlineCode",{parentName:"td"},'(filters: CrudFilters, behavior?: "merge" \\| "replace" = "merge") => void')," ",(0,r.kt)("br",null)," - ",(0,r.kt)("inlineCode",{parentName:"td"},"(setter: (previousFilters: CrudFilters) => CrudFilters) => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"overtime"),(0,r.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))))))}v.isMDXComponent=!0}}]);